--- if_em.c.orig	2024-11-26 12:37:36 UTC
+++ if_em.c
@@ -379,8 +379,12 @@ static driver_t em_driver = {
 	"em", em_methods, sizeof(struct adapter),
 };
 
+#if __FreeBSD_version >= 1400058
+DRIVER_MODULE(em, pci, em_driver, 0, 0);
+#else
 devclass_t em_devclass;
 DRIVER_MODULE(em, pci, em_driver, em_devclass, 0, 0);
+#endif
 MODULE_DEPEND(em, pci, 1, 1, 1);
 MODULE_DEPEND(em, ether, 1, 1, 1);
 
@@ -1584,11 +1588,8 @@ em_irq_fast(void *arg)
 em_irq_fast(void *arg)
 {
 	struct adapter	*adapter = arg;
-	if_t ifp;
 	u32		reg_icr;
 
-	ifp = adapter->ifp;
-
 	reg_icr = E1000_READ_REG(&adapter->hw, E1000_ICR);
 
 	/* Hot eject?  */
@@ -4478,7 +4479,6 @@ em_setup_receive_ring(struct rx_ring *rxr)
 			goto fail;
 		}
 		rxbuf->m_head->m_len = adapter->rx_mbuf_sz;
-		rxbuf->m_head->m_flags &= ~M_HASFCS; /* we strip it */
 		rxbuf->m_head->m_pkthdr.len = adapter->rx_mbuf_sz;
 
 		/* Get the memory mapping */
--- if_lem.c.orig	2024-11-26 12:37:36 UTC
+++ if_lem.c
@@ -289,8 +289,12 @@ static driver_t lem_driver = {
 	"em", lem_methods, sizeof(struct adapter),
 };
 
+#if __FreeBSD_version >= 1400058
+DRIVER_MODULE(lem, pci, lem_driver, 0, 0);
+#else
 extern devclass_t em_devclass;
 DRIVER_MODULE(lem, pci, lem_driver, em_devclass, 0, 0);
+#endif
 MODULE_DEPEND(lem, pci, 1, 1, 1);
 MODULE_DEPEND(lem, ether, 1, 1, 1);
 
@@ -960,7 +964,7 @@ lem_start_locked(if_t ifp)
 		}
 
 		/* Send a copy of the frame to the BPF listener */
-		if_etherbpfmtap(ifp, m_head);
+		ether_bpf_mtap_if(ifp, m_head);
 
 		/* Set timeout in case hardware has problems transmitting. */
 		adapter->watchdog_check = TRUE;
@@ -1479,10 +1483,7 @@ lem_irq_fast(void *arg)
 lem_irq_fast(void *arg)
 {
 	struct adapter	*adapter = arg;
-	if_t ifp;
 	u32		reg_icr;
-
-	ifp = adapter->ifp;
 
 	reg_icr = E1000_READ_REG(&adapter->hw, E1000_ICR);
 
