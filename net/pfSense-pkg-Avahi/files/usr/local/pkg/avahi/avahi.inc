<?php
/*
 * avahi.inc
 *
 * part of pfSense (https://www.pfsense.org)
 * Copyright (c) 2018 Denny Page
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


require_once("config.inc");
require_once("functions.inc");
require_once("util.inc");
require_once("service-utils.inc");

define("AVAHI_CONFIG_FILE", "/usr/local/etc/avahi/avahi-daemon.conf");
define("AVAHI_RCFILE", "/usr/local/etc/rc.d/avahi-daemon.sh");
define("AVAHI_DAEMON", "/usr/local/sbin/avahi-daemon");


function avahi_write_config($avahi_config) {
	$txt = "# This file is generated by the pfSense Avahi package.\n";
	$txt .= "# Do not edit this file, it will be overwritten automatically.\n";

	$txt .= "\n[server]\n";
	if (!empty($avahi_config['interfaces'])) {
		$real_interfaces = array();
		foreach (explode(',', $avahi_config['interfaces']) as $i) {
			$real_interfaces[$i] = get_real_interface($i);
		}
		$action = ($avahi_config['action'] == "deny") ? "deny" : "allow";
		$txt .= "{$action}-interfaces=" . implode(',', $real_interfaces) . "\n";
	}
	$txt .= "allow-point-to-point=yes\n";
	$txt .= "use-ipv4=" . ($avahi_config['disable_ipv4'] ? "no" : "yes") . "\n";
	$txt .= "use-ipv6=" . ($avahi_config['disable_ipv6'] ? "no" : "yes") . "\n";

	if (!empty($avahi_config['override_hostname'])) {
		$txt .= "host-name=" . $avahi_config['override_hostname'] . "\n";
	}
	if (!empty($avahi_config['override_domain'])) {
		$txt .= "domain-name=" . $avahi_config['override_domain'] . "\n";
	}
	$txt .= "enable-dbus=no\n";
	$txt .= "cache-entries-max=0\n";

	$txt .= "\n[wide-area]\n";
	$txt .= "enable-wide-area=no\n";

	$txt .= "\n[publish]\n";
	$txt .= "disable-publishing=" . ($avahi_config['publishing'] ? "no" : "yes") . "\n";
	$txt .= "publish-addresses=" . ($avahi_config['publish_addresses'] ? "yes" : "no") . "\n";
	$txt .= "publish-hinfo=" . ($avahi_config['publish_hinfo'] ? "yes" : "no") . "\n";
	$txt .= "publish-workstation=" . ($avahi_config['publish_workstation'] ? "yes" : "no") . "\n";
	$txt .= "publish-domain=" . ($avahi_config['publish_domain'] ? "yes" : "no") . "\n";
	$txt .= "publish-aaaa-on-ipv4=" . ($avahi_config['publish_ipv4_aaaa'] ? "yes" : "no") . "\n";
	$txt .= "publish-a-on-ipv6=" . ($avahi_config['publish_ipv6_a'] ? "yes" : "no") . "\n";
	$txt .= "disable-user-service-publishing=yes\n";

	$txt .= "\n[reflector]\n";
	$txt .= "enable-reflector=" . ($avahi_config['reflection'] ? "yes" : "no") . "\n";

	if (!file_put_contents(AVAHI_CONFIG_FILE, $txt)) {
		log_error("ERROR: Could not open {" . AVAHI_CONFIG_FILE . "} for writing");
		exit;
	}
}


function avahi_sync_config() {
	global $config;

	if (is_service_running('avahi')) {
		log_error("Stopping service avahi");
		stop_service('avahi');
	}

	$avahi_config = &$config['installedpackages']['avahi']['config'][0];
	if (isset($avahi_config['enable'])) {
		$enable = $avahi_config['enable'];
	} else {
		$enable = 'no';
	}

	if ($enable !== 'yes') {
		unlink_if_exists(AVAHI_RCFILE);
		return;
	}

	/* Write the config file */
	avahi_write_config($avahi_config);

	/* Write the rc script */
	$cmd = AVAHI_DAEMON;
	$start = "	$cmd -D";
	$stop = "	/usr/bin/killall -q avahi-daemon";
	write_rcfile(array(
		"file" => "avahi-daemon.sh",
		"start" => $start,
		"stop" => $stop
		)
	);

	if (platform_booting()) {
		return;
	}

	/* Start/Restart Avahi, if a CARP VIP is set, check its status and act
	* appropriately. */
	if (isset($avahi_config['carpstatusvid']) && $avahi_config['carpstatusvid'] != "none") {
		$status = get_carp_interface_status($avahi_config['carpstatusvid']);
		switch (strtoupper($status)) {
			// Stop the service if the VIP is in BACKUP or INIT state.
			case "BACKUP":
			case "INIT":
				log_error("Stopping service avahi (CARP BACKUP/INIT)");
				stop_service("avahi");
				break;
			// Start the service if the VIP is MASTER state.
			case "MASTER":
			// Assume it's up if the status can't be determined.
			default:
				log_error("Starting service avahi");
				start_service('avahi');
				break;
		}
	} else {
		log_error("Starting service avahi");
		start_service('avahi');
	}
}

function avahi_deinstall_command() {
	if (is_service_running('avahi')) {
		log_error("Stopping service avahi");
		stop_service('avahi');
	}

	unlink_if_exists(AVAHI_RCFILE);
}

function avahi_get_carp_list() {
	$list = array();
	$list['none'] = 'none';
	$carplist = get_configured_vip_list("all", VIP_CARP);
	foreach ($carplist as $vid => $vaddr) {
		$vip = get_configured_vip($vid);
		$list[$vid] = "{$vaddr} (vhid: {$vip['vhid']})";
	}
	return ($list);
}

function avahi_plugin_carp($pluginparams) {
	global $config;
	/* If avahi is not configured, then stop */
	if (is_array($config['installedpackages']['avahi']['config'])) {
		$avahi_config = &$config['installedpackages']['avahi']['config'][0];
	} else {
		return null;
	}
	/* If there is no properly configured CARP status check IP, then stop */
	if (!isset($avahi_config['carpstatusvid']) || $avahi_config['carpstatusvid'] == "none") {
		return null;
	}
	/* Locate the VIP and match it against the configured check address */
	list($vhid, $iface) = explode("@", trim($pluginparams['interface']));
	$friendly = convert_real_interface_to_friendly_interface_name($iface);
	$vip = get_configured_vip($avahi_config['carpstatusvid']);
	if (($vip['vhid'] != $vhid) || ($vip['interface'] != $friendly)) {
		/* This is not the VIP we're looking for, move along. */
		return null;
	}
	/* Start or stop the service as needed based on the CARP transition. */
	if ($pluginparams['event'] == "rc.carpmaster") {
		log_error("Starting service avahi");
		start_service("avahi");
	} elseif ($pluginparams['event'] == "rc.carpbackup") {
		log_error("Stopping service avahi (CARP BACKUP/INIT)");
		stop_service("avahi");
	}
}
