#!/bin/sh

# PROVIDE: frr dynamicrouting
# REQUIRE: netif routing
# KEYWORD: nojailvnet shutdown

# Add the following line to /etc/rc.conf to enable frr:
#  frr_enable="YES"
#
# You may also wish to use the following variables to fine-tune startup:
# Enable Integrated configuration mode (using the single configuration file
# frr.conf in place of one file for each dameon)
#  frr_vtysh_boot="YES"
# Selecting limited set of daemons to run
#  frr_daemons="zebra babeld bfdd bgpd eigrpd fabricd isisd ospfd ospf6d ripd ripngd staticd"
# Global tuning
#  frr_flags=""
# Per daemon tuning may be done with daemon_name_flags
#  zebra_flags="-P 0"
#  bgpd_flags="-nrP 0" and so on
# If you want to give the routing daemons a chance to catchup before
# continuing, set frr_wait_for to a "default" or certain prefix.
#  frr_wait_for="default"
# Set the time limit for the wait.
#  frr_wait_seconds="90"
#
# If the frr daemons require additional shared libraries to start,
# use the following variable to run ldconfig(8) in advance:
#  frr_extralibs_path="/usr/local/lib ..."
#
# This RC script was adapted from the net/quagga port

# shellcheck disable=SC2034
# shellcheck disable=SC3009
# shellcheck disable=SC3043

# shellcheck disable=SC1091
. "/etc/rc.subr"

name="frr"
rcvar="${name}_enable"

start_postcmd="start_postcmd"
stop_postcmd="rm -f ${pidfile}"
configtest_cmd="check_config"
extra_commands="configtest"
command_args="-d"

load_rc_config "${name}"
: "${frr_enable:="NO"}"
: "${frr_flags:=""}"
: "${frr_daemons:="zebra babeld bfdd bgpd eigrpd fabricd isisd ospfd ospf6d ripd ripngd staticd"}"
: "${frr_vtysh_boot:="NO"}"
: "${frr_wait_for:=""}"
: "${frr_wait_seconds:="90"}"

check_config()
{
    echo "I: Checking: ${daemon}.conf"
    # pimd doesn't support -C
    if [ "${daemon}" = "pimd" ]; then
        echo "W: Ignored"
    else
        # shellcheck disable=SC2086
        "${command}" $daemon_flags -C
        result=$?
        if [ "${result}" = "0" ]; then
            echo "I: Ok"
        else
            echo "E: Failed"
            exit 1
        fi
    fi
}

start_postcmd()
{
    # Wait only when last daemon has started.
    [ "${start_daemons_list}" != "${start_daemons_list% "${name}"}" ] \
        || return 0

    if [ -n "${frr_wait_for}" ]; then
        echo "I: Waiting (${frr_wait_seconds} seconds) for a route to ${frr_wait_for}..."
        local waited_for=0
        while [ "${waited_for}" -lt "${frr_wait_seconds}" ]; do
            ! /sbin/route -n "show" "${frr_wait_for}" >/dev/null 2>&1 || {
                echo "I: Route is now available"
                return 0
            }
            waited_for="$((waited_for + 1))"
            sleep 1;
        done
        echo "W: Giving up..."
        return 1
    fi

    return 0
}

do_cmd()
{
    [ $# = 2 ] \
        || return 1

    local cmd="${1}"
    local daemon_list="${2}"

    local ret=0
    local is_vtysh_start=0

    ! checkyesno "frr_vtysh_boot" || { [ "${cmd}" != "restart" ] && [ "${cmd}" != "start" ]; } \
        || is_vtysh_start=1

    [ "${is_vtysh_start}" = "0" ] || {
        daemon="vtysh"
        daemon_flags=""
        command="/usr/local/bin/${daemon}"
        check_config
    }
    for daemon_i in ${daemon_list}; do
        instance=
        daemon="${daemon_i%-*}"
        [ "${#daemon_i}" = "${#daemon}" ] \
            || instance="${daemon_i#*-}"
        command="/usr/local/sbin/${daemon}"
        pidfile="/var/run/frr/${daemon_i}.pid"
        vtyfile="/var/run/frr/${daemon_i}.vty"
        checkyesno "frr_vtysh_boot" || {
            required_files="/var/etc/frr/${daemon}.conf"
            { [ "${cmd}" != "start" ] && [ "${cmd}" != "restart" ]; } \
                || check_config
            [ "${cmd}" != "start" ] || [ -f "${required_files}" ] \
                || continue
        }
        [ "${cmd}" != "stop" ] || [ -n "$(check_process "${command}")" ] \
            || continue
        eval "flags=\$\{${daemon}_flags:-\"\${frr_flags}\"\}"
        [ -z "${instance}" ] \
            || flags="-n ${instance} ${flags}"
        name="${daemon}"
        _rc_restart_done="false"
        run_rc_command "${cmd}" \
            || ret=1
        [ "${cmd}" != "stop" ] \
            || rm -f "${pidfile}" "${vtyfile}"
    done
    [ "${is_vtysh_start}" = "0" ] || {
        echo "I: Executing boot startup configuration..."
        /usr/local/bin/vtysh -b
    }

    return "${ret}"
}

do_stop()
{
    stop_daemons_list="${frr_daemons}"

    local proto=
    for proto in "ospf" "ospf6"; do
        local daemon_list=
        daemon_list="$(find -s "/var/run/frr/" \
            -mindepth 1 -maxdepth 1 -type f -name '*.pid' | \
            sed -n -r "s%^.*/(${proto}d(-[0-9]+)?)\.pid\$%\1%pg" | tr '\n' ' ')"
        [ -n "${daemon_list}" ] \
            || continue
        stop_daemons_list="$(echo "${stop_daemons_list}" | \
            sed "s/${proto}d/${daemon_list}/g")"
    done
    stop_daemons_list="${stop_daemons_list# *}"

    # shellcheck disable=SC2086
    do_cmd "stop" "$(reverse_list ${stop_daemons_list})"
}

do_start()
{
    start_daemons_list="${frr_daemons}"

    ! checkyesno "frr_enable" \
        || do_cmd "start" "${start_daemons_list}"
}

frr_cmd="${1}"

case "${1}" in
    force*)
        frr_cmd="${frr_cmd#force}"
        ;;
    fast*)
        frr_cmd="${frr_cmd#fast}"
        ;;
esac
shift

if [ $# -ge 1 ] && [ "${1}" != "all" ]; then
    for daemon in "${@}"; do
        echo "${frr_daemons}" | grep -q "\b${daemon}\b" || {
            echo "E: Bad daemon name or daemon not enabled: ${daemon}"
            exit 1
        }
    done
    frr_daemons="$*"
fi

case "${frr_cmd}" in
    start|quietstart)
        [ -z "${frr_extralibs_path}" ] \
            || /sbin/ldconfig -m "${frr_extralibs_path}"
        do_start
        ;;
    stop)
        do_stop
        ;;
    restart)
        do_stop
        do_start
        ;;
    *)
        do_cmd "${frr_cmd}"
        ;;
esac
