<?php
/*
 * telegraf.inc
 *
 * part of pfSense (https://www.pfsense.org)
 * Copyright (c) 2017-2020 Rubicon Communications, LLC (Netgate)
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require_once("functions.inc");
require_once("globals.inc");
require_once("pkg-utils.inc");
require_once("service-utils.inc");
require_once("util.inc");

function telegraf_resync_config() {
	global $g, $config;

	$telegraf_conf = array();
	if (is_array($config['installedpackages']['telegraf'])) {
		foreach ($config['installedpackages']['telegraf']['config'][0] as $k => $v) {
			$telegraf_conf[$k] = addslashes($v);
		}
	}


	/* disable telegraf if not enabled */
	if ($telegraf_conf['enable'] != "on") {
		if (is_service_running("telegraf")) {
			stop_service("telegraf");
		}
		unlink_if_exists("/usr/local/etc/rc.d/telegraf.sh");
		unlink_if_exists("/usr/local/etc/telegraf.conf");
		return;
	}

	if (empty($telegraf_conf['interval'])) {
		$telegraf_conf['interval'] = 10;
	}

	$shortname = '';
	if ($telegraf_conf['shortname'] == 'on') {
		$shortname = "\thostname = \"" . $config['system']['hostname'] . "\"";
	}

	$ca_pem_file = "/usr/local/etc/telegraf.ca";
	$a_ca = $config['ca'];
	if (!is_array($a_ca)) {
		$a_ca=array();
	}
	if (count($a_ca)) {
		$ca_pem = '';
		foreach ($a_ca as $ca) {
			$ca_pem .= base64_decode($ca['crt']) . "\n";
		}
		file_put_contents($ca_pem_file, $ca_pem);
	}

	/* generate telegraf.conf */
	$cfg = <<< EOD
# This file is automatically generated by pfSense #
[agent]
	interval = "{$telegraf_conf['interval']}s"
	round_interval = true
{$shortname}

[[inputs.cpu]]
	percpu = true
	totalcpu = true
	fielddrop = ["time_*"]

[[inputs.disk]]
	ignore_fs = ["tmpfs", "devtmpfs"]

[[inputs.diskio]]

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.net]]

[[inputs.processes]]

[[inputs.swap]]

[[inputs.system]]

[[inputs.pf]]

EOD;

	/* HAProxy Monitor Configuration */
	if ($telegraf_conf["haproxy_enable"]) {
		$ha_port = 2200;
		if ($telegraf_conf["haproxy_port"]) {
			$ha_port = $telegraf_conf["haproxy_port"];	
		}

		$cfg .= "\n[[inputs.haproxy]]\n";
		$cfg .= "\tservers = [\"http://127.0.0.1:" . $ha_port . "/haproxy/haproxy_stats.php?haproxystats=1\"]\n";
		$cfg .= "\n";
	}

        /* Ping Monitor Configuration */
        if ($telegraf_conf["ping_enable"]) {
                if (!empty($telegraf_conf['ping_host_1'])) {
                        $monitor_hosts[] = '"' . $telegraf_conf["ping_host_1"] . '"';
                }
                if (!empty($telegraf_conf['ping_host_2'])) {
                        $monitor_hosts[] = '"' . $telegraf_conf["ping_host_2"] . '"';
                }
                if (!empty($telegraf_conf['ping_host_3'])) {
                        $monitor_hosts[] = '"' . $telegraf_conf["ping_host_3"] . '"';
                }
                if (!empty($telegraf_conf['ping_host_4'])) {
                        $monitor_hosts[] = '"' . $telegraf_conf["ping_host_4"] . '"';
                }

                $monitor_hosts = implode(",", $monitor_hosts);

                $cfg .= "\n[[inputs.ping]]\n";
                $cfg .= "\turls = [" . $monitor_hosts . "]";
                $cfg .= "\n\tdeadline = 0\n\n"; /* deadline (-w) function not supported in BSD ping */
        }

        /* Netstat Configuration */
        if ($telegraf_conf["netstat_enable"]) {

                $cfg .= "[[inputs.netstat]]\n\n";  
        }

	if ((is_array($telegraf_conf['telegraf_output']) && in_array("influxdb", $telegraf_conf['telegraf_output'])) || $telegraf_conf['telegraf_output'] == "influxdb") {
		$cfg .= "[[outputs.influxdb]]\n";
		$cfg .= "\turls = [\"" . $telegraf_conf['influx_server'] . "\"]\n";
		$cfg .= "\tdatabase = \"" . $telegraf_conf['influx_db'] . "\"\n";

		if (!empty($telegraf_conf['influx_user'])) {
			$cfg .= "\tusername = \"" . $telegraf_conf['influx_user'] . "\"\n";
		}
		if (!empty($telegraf_conf['influx_pass'])) {
			$cfg .= "\tpassword = \"" . base64_decode($telegraf_conf['influx_pass']) . "\"\n";
		}
		if ($telegraf_conf['insecure_skip_verify'] == "on") {
			$cfg .= "\tinsecure_skip_verify = true\n";
		}
		if (count($a_ca)) {
			$cfg .= "\tssl_ca = \"" . $ca_pem_file . "\"\n";
		}
	} else if ((is_array($telegraf_conf['telegraf_output']) && in_array("elasticsearch", $telegraf_conf['telegraf_output'])) || $telegraf_conf['telegraf_output'] == "elasticsearch") {
		$cfg .= "[[outputs.elasticsearch]]\n";
		$cfg .= "\tenable_sniffer = false\n";
		$cfg .= "\thealth_check_interval = \"10s\"\n";
		$cfg .= "\tindex_name = \"telegraf-%Y.%m.%d\"\n";
		$cfg .= "\tmanage_template = true\n";
		$cfg .= "\toverwrite_template = false\n";
		$cfg .= "\ttemplate_name = \"telegraf\"\n";
		$cfg .= "\turls = [\"" . $telegraf_conf['elasticsearch_server'] . "\"]\n";
        } else if ((is_array($telegraf_conf['telegraf_output']) && in_array("graphite", $telegraf_conf['telegraf_output'])) || $telegraf_conf['telegraf_output'] == "graphite") {
		$cfg .= "[[outputs.graphite]]\n";
		$cfg .= "\tservers = [\"" . $telegraf_conf['graphite_server'] . "\"]\n";
		if (!empty($telegraf_conf['graphite_prefix'])) {
			$cfg .= "\tprefix = \"" . $telegraf_conf['graphite_prefix'] . "\"\n";
		} else {
			$cfg .= "\tprefix = \"monitor\"\n";
		}
		$cfg .= "\ttemplate = \"host.tags.measurement.field\"\n";
		if (!empty($telegraf_conf['graphite_timeout'])) {
			$cfg .= "\ttimeout = " . $telegraf_conf['graphite_timeout'] . "\n";
		} else {
			$cfg .= "\ttimeout = 2\n";
		}
	}

	/* Raw additional configuration options */
 	if ($telegraf_conf["telegraf_raw_config"]) {
		$cfg .= "\n# Additional Raw Options\n";
		$cfg .= base64_decode($telegraf_conf["telegraf_raw_config"]);
		$cfg .= "\n";
	}

	$conffile = "/usr/local/etc/telegraf.conf";
	file_put_contents($conffile, $cfg);

	/* generate telegraf.sh rcfile */
	$pidfile = "{$g['varrun_path']}/telegraf.pid";
	$logfile = "{$g['varlog_path']}/telegraf.log";
	write_rcfile(array(
		"file" => "telegraf.sh",
		"start" => "/usr/sbin/daemon -crP {$pidfile} /usr/local/bin/telegraf -config={$conffile} 2> {$logfile}",
		"stop" => "/bin/kill `/bin/cat {$pidfile}`"
		)
	);

	/* (re)start service */
	if (is_service_running("telegraf")) {
		restart_service("telegraf");
	} else {
		start_service("telegraf");
	}
}
?>
