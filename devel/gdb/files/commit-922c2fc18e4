commit 0167735706a3328fb8d2206e6eae472e231e8695
Author: John Baldwin <jhb@FreeBSD.org>
Date:   Tue Mar 22 12:05:43 2022 -0700

    x86-nat: Use an unordered_map to store per-pid debug reg state.
    
    This replaces a manual linked list which used O(n) lookup and removal.
    
    (cherry picked from commit 922c2fc18e4de33d24b6ba3b7b6e8732209a5e69)

diff --git a/gdb/x86-nat.c b/gdb/x86-nat.c
index d0d52a00265..c1e892bf564 100644
--- gdb/x86-nat.c
+++ gdb/x86-nat.c
@@ -22,6 +22,8 @@
 #include "gdbcmd.h"
 #include "inferior.h"
 
+#include <unordered_map>
+
 /* Support for hardware watchpoints and breakpoints using the x86
    debug registers.
 
@@ -36,75 +38,20 @@
 /* Low-level function vector.  */
 struct x86_dr_low_type x86_dr_low;
 
-/* Per-process data.  We don't bind this to a per-inferior registry
-   because of targets like x86 GNU/Linux that need to keep track of
-   processes that aren't bound to any inferior (e.g., fork children,
-   checkpoints).  */
+/* Hash table storing per-process data.  We don't bind this to a
+   per-inferior registry because of targets like x86 GNU/Linux that
+   need to keep track of processes that aren't bound to any inferior
+   (e.g., fork children, checkpoints).  */
 
-struct x86_process_info
-{
-  /* Linked list.  */
-  struct x86_process_info *next;
-
-  /* The process identifier.  */
-  pid_t pid;
-
-  /* Copy of x86 hardware debug registers.  */
-  struct x86_debug_reg_state state;
-};
-
-static struct x86_process_info *x86_process_list = NULL;
-
-/* Find process data for process PID.  */
-
-static struct x86_process_info *
-x86_find_process_pid (pid_t pid)
-{
-  struct x86_process_info *proc;
-
-  for (proc = x86_process_list; proc; proc = proc->next)
-    if (proc->pid == pid)
-      return proc;
-
-  return NULL;
-}
-
-/* Add process data for process PID.  Returns newly allocated info
-   object.  */
-
-static struct x86_process_info *
-x86_add_process (pid_t pid)
-{
-  struct x86_process_info *proc = XCNEW (struct x86_process_info);
-
-  proc->pid = pid;
-  proc->next = x86_process_list;
-  x86_process_list = proc;
-
-  return proc;
-}
-
-/* Get data specific info for process PID, creating it if necessary.
-   Never returns NULL.  */
-
-static struct x86_process_info *
-x86_process_info_get (pid_t pid)
-{
-  struct x86_process_info *proc;
-
-  proc = x86_find_process_pid (pid);
-  if (proc == NULL)
-    proc = x86_add_process (pid);
-
-  return proc;
-}
+static std::unordered_map<pid_t,
+			  struct x86_debug_reg_state> x86_debug_process_state;
 
 /* Get debug registers state for process PID.  */
 
 struct x86_debug_reg_state *
 x86_debug_reg_state (pid_t pid)
 {
-  return &x86_process_info_get (pid)->state;
+  return &x86_debug_process_state[pid];
 }
 
 /* See declaration in x86-nat.h.  */
@@ -112,24 +59,7 @@ x86_debug_reg_state (pid_t pid)
 void
 x86_forget_process (pid_t pid)
 {
-  struct x86_process_info *proc, **proc_link;
-
-  proc = x86_process_list;
-  proc_link = &x86_process_list;
-
-  while (proc != NULL)
-    {
-      if (proc->pid == pid)
-	{
-	  *proc_link = proc->next;
-
-	  xfree (proc);
-	  return;
-	}
-
-      proc_link = &proc->next;
-      proc = *proc_link;
-    }
+  x86_debug_process_state.erase (pid);
 }
 
 /* Clear the reference counts and forget everything we knew about the
