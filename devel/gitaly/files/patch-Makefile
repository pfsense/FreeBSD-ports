--- Makefile.orig	2025-07-16 11:35:37 UTC
+++ Makefile
@@ -156,7 +156,6 @@ GIT_VERSION ?=
 # GIT_VERSION_x_xx defines versions for each instance of bundled Git we ship. When a new
 # major version is added, be sure to update GIT_PACKED_EXECUTABLES, the *-bundled-git targets,
 # and add new targets under the "# These targets build specific releases of Git." section.
-GIT_VERSION_2_49 ?= v2.49.0.gl2
 GIT_VERSION_2_50 ?= v2.50.1.gl1
 #
 # OVERRIDE_GIT_VERSION allows you to specify a custom semver value to be reported by the
@@ -168,7 +167,7 @@ ifeq (${GIT_VERSION:default=},)
 ifeq (${GIT_VERSION:default=},)
 	# GIT_VERSION should be overridden to the default version of bundled Git. This is only
 	# necessary until https://gitlab.com/gitlab-org/gitaly/-/issues/6195 is complete.
-    override GIT_VERSION := ${GIT_VERSION_2_49}
+    override GIT_VERSION := ${GIT_VERSION_2_50}
     # When GIT_VERSION is not explicitly set, we default to bundled Git.
 	export WITH_BUNDLED_GIT = YesPlease
 else
@@ -264,8 +263,7 @@ BUILD_GEM_NAME ?= gitaly
 BUILD_GEM_NAME ?= gitaly
 
 # Git binaries that are eventually embedded into the Gitaly binary.
-GIT_PACKED_EXECUTABLES       = $(addprefix ${BUILD_DIR}/bin/gitaly-, $(addsuffix -v2.49, ${GIT_EXECUTABLES})) \
-                               $(addprefix ${BUILD_DIR}/bin/gitaly-, $(addsuffix -v2.50, ${GIT_EXECUTABLES}))
+GIT_PACKED_EXECUTABLES       = $(addprefix ${BUILD_DIR}/bin/gitaly-, $(addsuffix -v2.50, ${GIT_EXECUTABLES}))
 
 # All executables provided by Gitaly.
 GITALY_EXECUTABLES           = $(addprefix ${BUILD_DIR}/bin/,$(notdir $(shell find ${SOURCE_DIR}/cmd -mindepth 1 -maxdepth 1 -type d -print)))
@@ -354,15 +352,13 @@ install: build
 
 .PHONY: build-bundled-git
 ## Build bundled Git binaries.
-build-bundled-git: build-bundled-git-v2.49 build-bundled-git-v2.50
-build-bundled-git-v2.49: $(patsubst %,${BUILD_DIR}/bin/gitaly-%-v2.49,${GIT_EXECUTABLES})
+build-bundled-git: build-bundled-git-v2.50
 build-bundled-git-v2.50: $(patsubst %,${BUILD_DIR}/bin/gitaly-%-v2.50,${GIT_EXECUTABLES})
 
 .PHONY: install-bundled-git
 ## Install bundled Git binaries. The target directory can be modified by
 ## setting PREFIX and DESTDIR.
-install-bundled-git: install-bundled-git-v2.49 install-bundled-git-v2.50
-install-bundled-git-v2.49: $(patsubst %,${INSTALL_DEST_DIR}/gitaly-%-v2.49,${GIT_EXECUTABLES})
+install-bundled-git: install-bundled-git-v2.50
 install-bundled-git-v2.50: $(patsubst %,${INSTALL_DEST_DIR}/gitaly-%-v2.50,${GIT_EXECUTABLES})
 
 ifdef WITH_BUNDLED_GIT
@@ -684,17 +680,12 @@ ${DEPENDENCY_DIR}/git-distribution/build/git: ${DEPEND
 	${Q}touch $@
 
 # These targets build specific releases of Git.
-${BUILD_DIR}/bin/gitaly-%-v2.49: override GIT_VERSION = ${GIT_VERSION_2_49}
 ${BUILD_DIR}/bin/gitaly-%-v2.50: override GIT_VERSION = ${GIT_VERSION_2_50}
 
 ifdef USE_MESON
-${BUILD_DIR}/bin/gitaly-%-v2.49: ${DEPENDENCY_DIR}/git-v2.49/build/% | ${BUILD_DIR}/bin
-	${Q}install $< $@
 ${BUILD_DIR}/bin/gitaly-%-v2.50: ${DEPENDENCY_DIR}/git-v2.50/build/% | ${BUILD_DIR}/bin
 	${Q}install $< $@
 else
-${BUILD_DIR}/bin/gitaly-%-v2.49: ${DEPENDENCY_DIR}/git-v2.49/% | ${BUILD_DIR}/bin
-	${Q}install $< $@
 ${BUILD_DIR}/bin/gitaly-%-v2.50: ${DEPENDENCY_DIR}/git-v2.50/% | ${BUILD_DIR}/bin
 	${Q}install $< $@
 endif
@@ -731,12 +722,12 @@ ${DEPENDENCY_DIR}/git-%/Makefile: ${DEPENDENCY_DIR}/gi
 # otherwise try to rebuild all targets depending on it whenever we build
 # something else. We thus depend on the Makefile instead.
 ${DEPENDENCY_DIR}/git-%/Makefile: ${DEPENDENCY_DIR}/git-%.version
-	${Q}${GIT} -c init.defaultBranch=master init ${GIT_QUIET} "${@D}"
-	${Q}${GIT} -C "${@D}" config remote.origin.url ${GIT_REPO_URL}
-	${Q}${GIT} -C "${@D}" config remote.origin.tagOpt --no-tags
-	${Q}${GIT} -C "${@D}" fetch --depth 1 ${GIT_QUIET} origin ${GIT_VERSION}
-	${Q}${GIT} -C "${@D}" reset --hard
-	${Q}${GIT} -C "${@D}" checkout ${GIT_QUIET} --detach FETCH_HEAD
+	#${Q}${GIT} -c init.defaultBranch=master init ${GIT_QUIET} "${@D}"
+	#${Q}${GIT} -C "${@D}" config remote.origin.url ${GIT_REPO_URL}
+	#${Q}${GIT} -C "${@D}" config remote.origin.tagOpt --no-tags
+	#${Q}${GIT} -C "${@D}" fetch --depth 1 ${GIT_QUIET} origin ${GIT_VERSION}
+	#${Q}${GIT} -C "${@D}" reset --hard
+	#${Q}${GIT} -C "${@D}" checkout ${GIT_QUIET} --detach FETCH_HEAD
 ifeq ($(OVERRIDE_GIT_VERSION),)
 	${Q}rm -f "${@D}"/version
 else
