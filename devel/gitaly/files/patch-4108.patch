--- ruby/proto/gitaly/blob_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/blob_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: blob.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("blob.proto", :syntax => :proto3) do
     add_message "gitaly.GetBlobRequest" do
--- ruby/proto/gitaly/blob_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/blob_services_pb.rb
@@ -8,7 +8,7 @@ module Gitaly
   module BlobService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
@@ -17,29 +17,29 @@ module Gitaly
       # GetBlob returns the contents of a blob object referenced by its object
       # ID. We use a stream to return a chunked arbitrarily large binary
       # response
-      rpc :GetBlob, Gitaly::GetBlobRequest, stream(Gitaly::GetBlobResponse)
-      rpc :GetBlobs, Gitaly::GetBlobsRequest, stream(Gitaly::GetBlobsResponse)
+      rpc :GetBlob, ::Gitaly::GetBlobRequest, stream(::Gitaly::GetBlobResponse)
+      rpc :GetBlobs, ::Gitaly::GetBlobsRequest, stream(::Gitaly::GetBlobsResponse)
       # ListBlobs will list all blobs reachable from a given set of revisions by
       # doing a graph walk. It is not valid to pass revisions which do not resolve
       # to an existing object.
-      rpc :ListBlobs, Gitaly::ListBlobsRequest, stream(Gitaly::ListBlobsResponse)
+      rpc :ListBlobs, ::Gitaly::ListBlobsRequest, stream(::Gitaly::ListBlobsResponse)
       # ListAllBlobs retrieves all blobs pointers in the repository, including
       # those not reachable by any reference.
-      rpc :ListAllBlobs, Gitaly::ListAllBlobsRequest, stream(Gitaly::ListAllBlobsResponse)
+      rpc :ListAllBlobs, ::Gitaly::ListAllBlobsRequest, stream(::Gitaly::ListAllBlobsResponse)
       # GetLFSPointers retrieves LFS pointers from a given set of object IDs.
       # This RPC filters all requested objects and only returns those which refer
       # to a valid LFS pointer.
-      rpc :GetLFSPointers, Gitaly::GetLFSPointersRequest, stream(Gitaly::GetLFSPointersResponse)
+      rpc :GetLFSPointers, ::Gitaly::GetLFSPointersRequest, stream(::Gitaly::GetLFSPointersResponse)
       # ListLFSPointers retrieves LFS pointers reachable from a given set of
       # revisions by doing a graph walk. This includes both normal revisions like
       # an object ID or branch, but also the pseudo-revisions "--all" and "--not"
       # as documented in git-rev-parse(1). Revisions which don't directly or
       # transitively reference any LFS pointers are ignored. It is not valid to
       # pass revisions which do not resolve to an existing object.
-      rpc :ListLFSPointers, Gitaly::ListLFSPointersRequest, stream(Gitaly::ListLFSPointersResponse)
+      rpc :ListLFSPointers, ::Gitaly::ListLFSPointersRequest, stream(::Gitaly::ListLFSPointersResponse)
       # ListAllLFSPointers retrieves all LFS pointers in the repository, including
       # those not reachable by any reference.
-      rpc :ListAllLFSPointers, Gitaly::ListAllLFSPointersRequest, stream(Gitaly::ListAllLFSPointersResponse)
+      rpc :ListAllLFSPointers, ::Gitaly::ListAllLFSPointersRequest, stream(::Gitaly::ListAllLFSPointersResponse)
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/cleanup_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/cleanup_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: cleanup.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("cleanup.proto", :syntax => :proto3) do
     add_message "gitaly.ApplyBfgObjectMapStreamRequest" do
--- ruby/proto/gitaly/cleanup_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/cleanup_services_pb.rb
@@ -8,13 +8,13 @@ module Gitaly
   module CleanupService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
       self.service_name = 'gitaly.CleanupService'
 
-      rpc :ApplyBfgObjectMapStream, stream(Gitaly::ApplyBfgObjectMapStreamRequest), stream(Gitaly::ApplyBfgObjectMapStreamResponse)
+      rpc :ApplyBfgObjectMapStream, stream(::Gitaly::ApplyBfgObjectMapStreamRequest), stream(::Gitaly::ApplyBfgObjectMapStreamResponse)
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/commit_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/commit_pb.rb
@@ -1,11 +1,11 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: commit.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
 require 'google/protobuf/timestamp_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("commit.proto", :syntax => :proto3) do
     add_message "gitaly.ListCommitsRequest" do
--- ruby/proto/gitaly/commit_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/commit_services_pb.rb
@@ -8,7 +8,7 @@ module Gitaly
   module CommitService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
--- ruby/proto/gitaly/conflicts_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/conflicts_pb.rb
@@ -1,11 +1,11 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: conflicts.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
 require 'google/protobuf/timestamp_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("conflicts.proto", :syntax => :proto3) do
     add_message "gitaly.ListConflictFilesRequest" do
--- ruby/proto/gitaly/conflicts_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/conflicts_services_pb.rb
@@ -8,17 +8,17 @@ module Gitaly
   module ConflictsService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
       self.service_name = 'gitaly.ConflictsService'
 
-      rpc :ListConflictFiles, Gitaly::ListConflictFilesRequest, stream(Gitaly::ListConflictFilesResponse)
+      rpc :ListConflictFiles, ::Gitaly::ListConflictFilesRequest, stream(::Gitaly::ListConflictFilesResponse)
       # ResolveConflicts tries to resolve a conflicting merge with a set of
       # user-provided merge resolutions. If resolving the conflict succeeds, the
       # result will be a new merge commit.
-      rpc :ResolveConflicts, stream(Gitaly::ResolveConflictsRequest), Gitaly::ResolveConflictsResponse
+      rpc :ResolveConflicts, stream(::Gitaly::ResolveConflictsRequest), ::Gitaly::ResolveConflictsResponse
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/diff_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/diff_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: diff.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("diff.proto", :syntax => :proto3) do
     add_message "gitaly.CommitDiffRequest" do
--- ruby/proto/gitaly/diff_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/diff_services_pb.rb
@@ -8,21 +8,21 @@ module Gitaly
   module DiffService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
       self.service_name = 'gitaly.DiffService'
 
       # Returns stream of CommitDiffResponse with patches chunked over messages
-      rpc :CommitDiff, Gitaly::CommitDiffRequest, stream(Gitaly::CommitDiffResponse)
+      rpc :CommitDiff, ::Gitaly::CommitDiffRequest, stream(::Gitaly::CommitDiffResponse)
       # Return a stream so we can divide the response in chunks of deltas
-      rpc :CommitDelta, Gitaly::CommitDeltaRequest, stream(Gitaly::CommitDeltaResponse)
-      rpc :RawDiff, Gitaly::RawDiffRequest, stream(Gitaly::RawDiffResponse)
-      rpc :RawPatch, Gitaly::RawPatchRequest, stream(Gitaly::RawPatchResponse)
-      rpc :DiffStats, Gitaly::DiffStatsRequest, stream(Gitaly::DiffStatsResponse)
+      rpc :CommitDelta, ::Gitaly::CommitDeltaRequest, stream(::Gitaly::CommitDeltaResponse)
+      rpc :RawDiff, ::Gitaly::RawDiffRequest, stream(::Gitaly::RawDiffResponse)
+      rpc :RawPatch, ::Gitaly::RawPatchRequest, stream(::Gitaly::RawPatchResponse)
+      rpc :DiffStats, ::Gitaly::DiffStatsRequest, stream(::Gitaly::DiffStatsResponse)
       # Return a list of files changed along with the status of each file
-      rpc :FindChangedPaths, Gitaly::FindChangedPathsRequest, stream(Gitaly::FindChangedPathsResponse)
+      rpc :FindChangedPaths, ::Gitaly::FindChangedPathsRequest, stream(::Gitaly::FindChangedPathsResponse)
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/hook_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/hook_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: hook.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("hook.proto", :syntax => :proto3) do
     add_message "gitaly.PreReceiveHookRequest" do
--- ruby/proto/gitaly/hook_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/hook_services_pb.rb
@@ -8,23 +8,23 @@ module Gitaly
   module HookService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
       self.service_name = 'gitaly.HookService'
 
-      rpc :PreReceiveHook, stream(Gitaly::PreReceiveHookRequest), stream(Gitaly::PreReceiveHookResponse)
-      rpc :PostReceiveHook, stream(Gitaly::PostReceiveHookRequest), stream(Gitaly::PostReceiveHookResponse)
-      rpc :UpdateHook, Gitaly::UpdateHookRequest, stream(Gitaly::UpdateHookResponse)
-      rpc :ReferenceTransactionHook, stream(Gitaly::ReferenceTransactionHookRequest), stream(Gitaly::ReferenceTransactionHookResponse)
+      rpc :PreReceiveHook, stream(::Gitaly::PreReceiveHookRequest), stream(::Gitaly::PreReceiveHookResponse)
+      rpc :PostReceiveHook, stream(::Gitaly::PostReceiveHookRequest), stream(::Gitaly::PostReceiveHookResponse)
+      rpc :UpdateHook, ::Gitaly::UpdateHookRequest, stream(::Gitaly::UpdateHookResponse)
+      rpc :ReferenceTransactionHook, stream(::Gitaly::ReferenceTransactionHookRequest), stream(::Gitaly::ReferenceTransactionHookResponse)
       # PackObjectsHook is meant to be called by git-upload-pack via the
       # uploadpack.packObjectsHook mechanism. It generates a stream of packed
       # Git objects.
-      rpc :PackObjectsHook, stream(Gitaly::PackObjectsHookRequest), stream(Gitaly::PackObjectsHookResponse)
+      rpc :PackObjectsHook, stream(::Gitaly::PackObjectsHookRequest), stream(::Gitaly::PackObjectsHookResponse)
       # PackObjectsHookWithSidechannel is an optimized version of PackObjectsHook that uses
       # a unix socket side channel.
-      rpc :PackObjectsHookWithSidechannel, Gitaly::PackObjectsHookWithSidechannelRequest, Gitaly::PackObjectsHookWithSidechannelResponse
+      rpc :PackObjectsHookWithSidechannel, ::Gitaly::PackObjectsHookWithSidechannelRequest, ::Gitaly::PackObjectsHookWithSidechannelResponse
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/internal_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/internal_pb.rb
@@ -1,9 +1,9 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: internal.proto
 
+require 'lint_pb'
 require 'google/protobuf'
 
-require 'lint_pb'
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("internal.proto", :syntax => :proto3) do
     add_message "gitaly.WalkReposRequest" do
--- ruby/proto/gitaly/internal_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/internal_services_pb.rb
@@ -10,7 +10,7 @@ module Gitaly
     # only reachable by Praefect or other Gitalies
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
@@ -18,7 +18,7 @@ module Gitaly
 
       # WalkRepos walks the storage and streams back all known git repos on the
       # requested storage
-      rpc :WalkRepos, Gitaly::WalkReposRequest, stream(Gitaly::WalkReposResponse)
+      rpc :WalkRepos, ::Gitaly::WalkReposRequest, stream(::Gitaly::WalkReposResponse)
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/lint_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/lint_pb.rb
@@ -1,6 +1,7 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: lint.proto
 
+require 'google/protobuf/descriptor_pb'
 require 'google/protobuf'
 
 Google::Protobuf::DescriptorPool.generated_pool.build do
--- ruby/proto/gitaly/namespace_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/namespace_pb.rb
@@ -1,9 +1,9 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: namespace.proto
 
+require 'lint_pb'
 require 'google/protobuf'
 
-require 'lint_pb'
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("namespace.proto", :syntax => :proto3) do
     add_message "gitaly.AddNamespaceRequest" do
--- ruby/proto/gitaly/namespace_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/namespace_services_pb.rb
@@ -8,16 +8,16 @@ module Gitaly
   module NamespaceService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
       self.service_name = 'gitaly.NamespaceService'
 
-      rpc :AddNamespace, Gitaly::AddNamespaceRequest, Gitaly::AddNamespaceResponse
-      rpc :RemoveNamespace, Gitaly::RemoveNamespaceRequest, Gitaly::RemoveNamespaceResponse
-      rpc :RenameNamespace, Gitaly::RenameNamespaceRequest, Gitaly::RenameNamespaceResponse
-      rpc :NamespaceExists, Gitaly::NamespaceExistsRequest, Gitaly::NamespaceExistsResponse
+      rpc :AddNamespace, ::Gitaly::AddNamespaceRequest, ::Gitaly::AddNamespaceResponse
+      rpc :RemoveNamespace, ::Gitaly::RemoveNamespaceRequest, ::Gitaly::RemoveNamespaceResponse
+      rpc :RenameNamespace, ::Gitaly::RenameNamespaceRequest, ::Gitaly::RenameNamespaceResponse
+      rpc :NamespaceExists, ::Gitaly::NamespaceExistsRequest, ::Gitaly::NamespaceExistsResponse
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/objectpool_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/objectpool_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: objectpool.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("objectpool.proto", :syntax => :proto3) do
     add_message "gitaly.CreateObjectPoolRequest" do
--- ruby/proto/gitaly/operations_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/operations_pb.rb
@@ -1,12 +1,12 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: operations.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
 require 'errors_pb'
 require 'google/protobuf/timestamp_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("operations.proto", :syntax => :proto3) do
     add_message "gitaly.UserCreateBranchRequest" do
--- ruby/proto/gitaly/operations_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/operations_services_pb.rb
@@ -12,23 +12,23 @@ module Gitaly
     # '/allowed' endpoint.
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
       self.service_name = 'gitaly.OperationService'
 
-      rpc :UserCreateBranch, Gitaly::UserCreateBranchRequest, Gitaly::UserCreateBranchResponse
-      rpc :UserUpdateBranch, Gitaly::UserUpdateBranchRequest, Gitaly::UserUpdateBranchResponse
-      rpc :UserDeleteBranch, Gitaly::UserDeleteBranchRequest, Gitaly::UserDeleteBranchResponse
+      rpc :UserCreateBranch, ::Gitaly::UserCreateBranchRequest, ::Gitaly::UserCreateBranchResponse
+      rpc :UserUpdateBranch, ::Gitaly::UserUpdateBranchRequest, ::Gitaly::UserUpdateBranchResponse
+      rpc :UserDeleteBranch, ::Gitaly::UserDeleteBranchRequest, ::Gitaly::UserDeleteBranchResponse
       # UserCreateTag creates a new tag.
-      rpc :UserCreateTag, Gitaly::UserCreateTagRequest, Gitaly::UserCreateTagResponse
-      rpc :UserDeleteTag, Gitaly::UserDeleteTagRequest, Gitaly::UserDeleteTagResponse
+      rpc :UserCreateTag, ::Gitaly::UserCreateTagRequest, ::Gitaly::UserCreateTagResponse
+      rpc :UserDeleteTag, ::Gitaly::UserDeleteTagRequest, ::Gitaly::UserDeleteTagResponse
       # UserMergeRef creates a merge commit and updates target_ref to point to that
       # new commit. The first parent of the merge commit (the main line) is taken
       # from first_parent_ref. The second parent is specified by its commit ID in source_sha.
       # If target_ref already exists it will be overwritten.
-      rpc :UserMergeToRef, Gitaly::UserMergeToRefRequest, Gitaly::UserMergeToRefResponse
+      rpc :UserMergeToRef, ::Gitaly::UserMergeToRefRequest, ::Gitaly::UserMergeToRefResponse
       # UserMergeBranch tries to merge the given commit into the target branch.
       # The merge commit is created with the given user as author/committer and
       # the given message.
@@ -38,20 +38,20 @@ module Gitaly
       # requested merge, which will result in a response with the created merge
       # commit ID. Only if a second message with `apply = true` is sent will the
       # merge be applied.
-      rpc :UserMergeBranch, stream(Gitaly::UserMergeBranchRequest), stream(Gitaly::UserMergeBranchResponse)
+      rpc :UserMergeBranch, stream(::Gitaly::UserMergeBranchRequest), stream(::Gitaly::UserMergeBranchResponse)
       # UserFFBranch tries to perform a fast-forward merge of the given branch to
       # the given commit. If the merge is not a fast-forward merge, the request
       # will fail. The RPC will return an empty response in case updating the
       # reference fails e.g. because of a race.
-      rpc :UserFFBranch, Gitaly::UserFFBranchRequest, Gitaly::UserFFBranchResponse
+      rpc :UserFFBranch, ::Gitaly::UserFFBranchRequest, ::Gitaly::UserFFBranchResponse
       # UserCherryPick tries to perform a cherry-pick of a given commit onto a
       # branch.
-      rpc :UserCherryPick, Gitaly::UserCherryPickRequest, Gitaly::UserCherryPickResponse
+      rpc :UserCherryPick, ::Gitaly::UserCherryPickRequest, ::Gitaly::UserCherryPickResponse
       # UserCommitFiles builds a commit from a stream of actions and updates the target branch to point to it.
       # UserCommitFilesRequest with a UserCommitFilesRequestHeader must be sent as the first message of the stream.
       # Following that, a variable number of actions can be sent to build a new commit. Each action consists of
       # a header followed by content if used by the action.
-      rpc :UserCommitFiles, stream(Gitaly::UserCommitFilesRequest), Gitaly::UserCommitFilesResponse
+      rpc :UserCommitFiles, stream(::Gitaly::UserCommitFilesRequest), ::Gitaly::UserCommitFilesResponse
       # UserRebaseConfirmable rebases the given remote branch onto a target
       # branch. The remote branch may be part of another repository.
       #
@@ -60,15 +60,15 @@ module Gitaly
       # requested rebase, which will result in a response with the created rebase
       # commit ID. Only if a second message with `apply = true` is sent will the
       # rebase be applied.
-      rpc :UserRebaseConfirmable, stream(Gitaly::UserRebaseConfirmableRequest), stream(Gitaly::UserRebaseConfirmableResponse)
+      rpc :UserRebaseConfirmable, stream(::Gitaly::UserRebaseConfirmableRequest), stream(::Gitaly::UserRebaseConfirmableResponse)
       # UserRevert tries to perform a revert of a given commit onto a branch.
-      rpc :UserRevert, Gitaly::UserRevertRequest, Gitaly::UserRevertResponse
+      rpc :UserRevert, ::Gitaly::UserRevertRequest, ::Gitaly::UserRevertResponse
       # UserSquash squashes a range of commits into a single commit.
-      rpc :UserSquash, Gitaly::UserSquashRequest, Gitaly::UserSquashResponse
+      rpc :UserSquash, ::Gitaly::UserSquashRequest, ::Gitaly::UserSquashResponse
       # UserApplyPatch applies patches to a given branch.
-      rpc :UserApplyPatch, stream(Gitaly::UserApplyPatchRequest), Gitaly::UserApplyPatchResponse
+      rpc :UserApplyPatch, stream(::Gitaly::UserApplyPatchRequest), ::Gitaly::UserApplyPatchResponse
       # UserUpdateSubmodule updates a submodule to point to a new commit.
-      rpc :UserUpdateSubmodule, Gitaly::UserUpdateSubmoduleRequest, Gitaly::UserUpdateSubmoduleResponse
+      rpc :UserUpdateSubmodule, ::Gitaly::UserUpdateSubmoduleRequest, ::Gitaly::UserUpdateSubmoduleResponse
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/praefect_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/praefect_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: praefect.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("praefect.proto", :syntax => :proto3) do
     add_message "gitaly.SetReplicationFactorRequest" do
--- ruby/proto/gitaly/praefect_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/praefect_services_pb.rb
@@ -8,19 +8,19 @@ module Gitaly
   module PraefectInfoService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
       self.service_name = 'gitaly.PraefectInfoService'
 
-      rpc :RepositoryReplicas, Gitaly::RepositoryReplicasRequest, Gitaly::RepositoryReplicasResponse
+      rpc :RepositoryReplicas, ::Gitaly::RepositoryReplicasRequest, ::Gitaly::RepositoryReplicasResponse
       # DatalossCheck checks for unavailable repositories.
-      rpc :DatalossCheck, Gitaly::DatalossCheckRequest, Gitaly::DatalossCheckResponse
+      rpc :DatalossCheck, ::Gitaly::DatalossCheckRequest, ::Gitaly::DatalossCheckResponse
       # SetAuthoritativeStorage sets the authoritative storage for a repository on a given virtual storage.
       # This causes the current version of the repository on the authoritative storage to be considered the
       # latest and overwrite any other version on the virtual storage.
-      rpc :SetAuthoritativeStorage, Gitaly::SetAuthoritativeStorageRequest, Gitaly::SetAuthoritativeStorageResponse
+      rpc :SetAuthoritativeStorage, ::Gitaly::SetAuthoritativeStorageRequest, ::Gitaly::SetAuthoritativeStorageResponse
       # SetReplicationFactor assigns or unassigns host nodes from the repository to meet the desired replication factor.
       # SetReplicationFactor returns an error when trying to set a replication factor that exceeds the storage node count
       # in the virtual storage. An error is also returned when trying to set a replication factor below one. The primary node
@@ -29,7 +29,7 @@ module Gitaly
       # This might cause the actual replication factor to be higher than desired if the replication factor is set during an upgrade
       # from a Praefect node that does not yet know about a new node. As assignments of unconfigured storages are ignored, replication
       # factor of repositories assigned to a storage node removed from the cluster is effectively decreased.
-      rpc :SetReplicationFactor, Gitaly::SetReplicationFactorRequest, Gitaly::SetReplicationFactorResponse
+      rpc :SetReplicationFactor, ::Gitaly::SetReplicationFactorRequest, ::Gitaly::SetReplicationFactorResponse
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/remote_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/remote_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: remote.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("remote.proto", :syntax => :proto3) do
     add_message "gitaly.UpdateRemoteMirrorRequest" do
--- ruby/proto/gitaly/remote_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/remote_services_pb.rb
@@ -8,7 +8,7 @@ module Gitaly
   module RemoteService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
@@ -19,14 +19,14 @@ module Gitaly
       # references to the mirror. Created and modified references are updated, removed references are
       # deleted from the mirror. UpdateRemoteMirror updates all tags. Branches are updated if they match
       # the patterns specified in the requests.
-      rpc :UpdateRemoteMirror, stream(Gitaly::UpdateRemoteMirrorRequest), Gitaly::UpdateRemoteMirrorResponse
-      rpc :FindRemoteRepository, Gitaly::FindRemoteRepositoryRequest, Gitaly::FindRemoteRepositoryResponse
+      rpc :UpdateRemoteMirror, stream(::Gitaly::UpdateRemoteMirrorRequest), ::Gitaly::UpdateRemoteMirrorResponse
+      rpc :FindRemoteRepository, ::Gitaly::FindRemoteRepositoryRequest, ::Gitaly::FindRemoteRepositoryResponse
       # FindRemoteRootRef tries to find the root reference of a remote
       # repository. The root reference is the default branch as pointed to by
       # the remotes HEAD reference. Returns an InvalidArgument error if the
       # specified remote does not exist and a NotFound error in case no HEAD
       # branch was found.
-      rpc :FindRemoteRootRef, Gitaly::FindRemoteRootRefRequest, Gitaly::FindRemoteRootRefResponse
+      rpc :FindRemoteRootRef, ::Gitaly::FindRemoteRootRefRequest, ::Gitaly::FindRemoteRootRefResponse
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/repository-service_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/repository-service_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: repository-service.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("repository-service.proto", :syntax => :proto3) do
     add_message "gitaly.RepositoryExistsRequest" do
--- ruby/proto/gitaly/server_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/server_pb.rb
@@ -1,9 +1,9 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: server.proto
 
+require 'lint_pb'
 require 'google/protobuf'
 
-require 'lint_pb'
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("server.proto", :syntax => :proto3) do
     add_message "gitaly.ServerInfoRequest" do
--- ruby/proto/gitaly/server_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/server_services_pb.rb
@@ -8,14 +8,14 @@ module Gitaly
   module ServerService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
       self.service_name = 'gitaly.ServerService'
 
-      rpc :ServerInfo, Gitaly::ServerInfoRequest, Gitaly::ServerInfoResponse
-      rpc :DiskStatistics, Gitaly::DiskStatisticsRequest, Gitaly::DiskStatisticsResponse
+      rpc :ServerInfo, ::Gitaly::ServerInfoRequest, ::Gitaly::ServerInfoResponse
+      rpc :DiskStatistics, ::Gitaly::DiskStatisticsRequest, ::Gitaly::DiskStatisticsResponse
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/shared_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/shared_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: shared.proto
 
-require 'google/protobuf'
-
 require 'google/protobuf/timestamp_pb'
 require 'lint_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("shared.proto", :syntax => :proto3) do
     add_message "gitaly.Repository" do
--- ruby/proto/gitaly/smarthttp_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/smarthttp_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: smarthttp.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("smarthttp.proto", :syntax => :proto3) do
     add_message "gitaly.InfoRefsRequest" do
--- ruby/proto/gitaly/smarthttp_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/smarthttp_services_pb.rb
@@ -8,7 +8,7 @@ module Gitaly
   module SmartHTTPService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
@@ -17,17 +17,17 @@ module Gitaly
       # The response body for GET /info/refs?service=git-upload-pack
       # Will be invoked when the user executes a `git fetch`, meaning the server
       # will upload the packs to that user. The user doesn't upload new objects.
-      rpc :InfoRefsUploadPack, Gitaly::InfoRefsRequest, stream(Gitaly::InfoRefsResponse)
+      rpc :InfoRefsUploadPack, ::Gitaly::InfoRefsRequest, stream(::Gitaly::InfoRefsResponse)
       # The response body for GET /info/refs?service=git-receive-pack
       # Will be invoked when the user executes a `git push`, but only advertises
       # references to the user.
-      rpc :InfoRefsReceivePack, Gitaly::InfoRefsRequest, stream(Gitaly::InfoRefsResponse)
+      rpc :InfoRefsReceivePack, ::Gitaly::InfoRefsRequest, stream(::Gitaly::InfoRefsResponse)
       # Request and response body for POST /upload-pack
-      rpc :PostUploadPack, stream(Gitaly::PostUploadPackRequest), stream(Gitaly::PostUploadPackResponse)
+      rpc :PostUploadPack, stream(::Gitaly::PostUploadPackRequest), stream(::Gitaly::PostUploadPackResponse)
       # Request and response body for POST /upload-pack using sidechannel protocol
-      rpc :PostUploadPackWithSidechannel, Gitaly::PostUploadPackWithSidechannelRequest, Gitaly::PostUploadPackWithSidechannelResponse
+      rpc :PostUploadPackWithSidechannel, ::Gitaly::PostUploadPackWithSidechannelRequest, ::Gitaly::PostUploadPackWithSidechannelResponse
       # Request and response body for POST /receive-pack
-      rpc :PostReceivePack, stream(Gitaly::PostReceivePackRequest), stream(Gitaly::PostReceivePackResponse)
+      rpc :PostReceivePack, stream(::Gitaly::PostReceivePackRequest), stream(::Gitaly::PostReceivePackResponse)
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/ssh_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/ssh_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: ssh.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("ssh.proto", :syntax => :proto3) do
     add_message "gitaly.SSHUploadPackRequest" do
--- ruby/proto/gitaly/ssh_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/ssh_services_pb.rb
@@ -8,18 +8,18 @@ module Gitaly
   module SSHService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
       self.service_name = 'gitaly.SSHService'
 
       # To forward 'git upload-pack' to Gitaly for SSH sessions
-      rpc :SSHUploadPack, stream(Gitaly::SSHUploadPackRequest), stream(Gitaly::SSHUploadPackResponse)
+      rpc :SSHUploadPack, stream(::Gitaly::SSHUploadPackRequest), stream(::Gitaly::SSHUploadPackResponse)
       # To forward 'git receive-pack' to Gitaly for SSH sessions
-      rpc :SSHReceivePack, stream(Gitaly::SSHReceivePackRequest), stream(Gitaly::SSHReceivePackResponse)
+      rpc :SSHReceivePack, stream(::Gitaly::SSHReceivePackRequest), stream(::Gitaly::SSHReceivePackResponse)
       # To forward 'git upload-archive' to Gitaly for SSH sessions
-      rpc :SSHUploadArchive, stream(Gitaly::SSHUploadArchiveRequest), stream(Gitaly::SSHUploadArchiveResponse)
+      rpc :SSHUploadArchive, stream(::Gitaly::SSHUploadArchiveRequest), stream(::Gitaly::SSHUploadArchiveResponse)
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/transaction_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/transaction_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: transaction.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("transaction.proto", :syntax => :proto3) do
     add_message "gitaly.VoteTransactionRequest" do
--- ruby/proto/gitaly/transaction_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/transaction_services_pb.rb
@@ -8,14 +8,14 @@ module Gitaly
   module RefTransaction
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
       self.service_name = 'gitaly.RefTransaction'
 
-      rpc :VoteTransaction, Gitaly::VoteTransactionRequest, Gitaly::VoteTransactionResponse
-      rpc :StopTransaction, Gitaly::StopTransactionRequest, Gitaly::StopTransactionResponse
+      rpc :VoteTransaction, ::Gitaly::VoteTransactionRequest, ::Gitaly::VoteTransactionResponse
+      rpc :StopTransaction, ::Gitaly::StopTransactionRequest, ::Gitaly::StopTransactionResponse
     end
 
     Stub = Service.rpc_stub_class
--- ruby/proto/gitaly/wiki_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/wiki_pb.rb
@@ -1,10 +1,10 @@
 # Generated by the protocol buffer compiler.  DO NOT EDIT!
 # source: wiki.proto
 
-require 'google/protobuf'
-
 require 'lint_pb'
 require 'shared_pb'
+require 'google/protobuf'
+
 Google::Protobuf::DescriptorPool.generated_pool.build do
   add_file("wiki.proto", :syntax => :proto3) do
     add_message "gitaly.WikiCommitDetails" do
--- ruby/proto/gitaly/wiki_services_pb.rb.orig	2021-11-08 11:56:42 UTC
+++ ruby/proto/gitaly/wiki_services_pb.rb
@@ -8,18 +8,18 @@ module Gitaly
   module WikiService
     class Service
 
-      include GRPC::GenericService
+      include ::GRPC::GenericService
 
       self.marshal_class_method = :encode
       self.unmarshal_class_method = :decode
       self.service_name = 'gitaly.WikiService'
 
-      rpc :WikiWritePage, stream(Gitaly::WikiWritePageRequest), Gitaly::WikiWritePageResponse
-      rpc :WikiUpdatePage, stream(Gitaly::WikiUpdatePageRequest), Gitaly::WikiUpdatePageResponse
+      rpc :WikiWritePage, stream(::Gitaly::WikiWritePageRequest), ::Gitaly::WikiWritePageResponse
+      rpc :WikiUpdatePage, stream(::Gitaly::WikiUpdatePageRequest), ::Gitaly::WikiUpdatePageResponse
       # WikiFindPage returns a stream because the page's raw_data field may be arbitrarily large.
-      rpc :WikiFindPage, Gitaly::WikiFindPageRequest, stream(Gitaly::WikiFindPageResponse)
-      rpc :WikiGetAllPages, Gitaly::WikiGetAllPagesRequest, stream(Gitaly::WikiGetAllPagesResponse)
-      rpc :WikiListPages, Gitaly::WikiListPagesRequest, stream(Gitaly::WikiListPagesResponse)
+      rpc :WikiFindPage, ::Gitaly::WikiFindPageRequest, stream(::Gitaly::WikiFindPageResponse)
+      rpc :WikiGetAllPages, ::Gitaly::WikiGetAllPagesRequest, stream(::Gitaly::WikiGetAllPagesResponse)
+      rpc :WikiListPages, ::Gitaly::WikiListPagesRequest, stream(::Gitaly::WikiListPagesResponse)
     end
 
     Stub = Service.rpc_stub_class
