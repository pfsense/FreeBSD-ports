--- ./modules/rc4/rc4c.tcl.orig	2021-10-28 21:08:34.000000000 +0000
+++ ./modules/rc4/rc4c.tcl	2022-05-12 07:00:35.590698000 +0000
@@ -20,6 +20,8 @@
 namespace eval ::rc4 {
 
     critcl::ccode {
+	#include <string.h>
+
         #include <string.h>
 
         typedef struct RC4_CTX {
--- ./modules/md5/md5.c.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/md5/md5.c	2022-05-12 07:00:35.560242000 +0000
@@ -115,7 +115,7 @@
    in the message whose digest is being computed.
  */
 void MD5Update (mdContext, inBuf, inLen)
-register MD5_CTX *mdContext; unsigned char *inBuf;
+register MD5_CTX *mdContext; const unsigned char *inBuf;
 		 unsigned int inLen;
 {
   register int i, ii;
--- ./modules/md5/md5.h.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/md5/md5.h	2022-05-12 07:00:35.560779000 +0000
@@ -59,7 +59,7 @@
 } MD5_CTX;
 
 void MD5Init   (MD5_CTX *mdContext);
-void MD5Update (MD5_CTX *mdContext, unsigned char *buf, unsigned int len);
+void MD5Update (MD5_CTX *mdContext, const unsigned char *buf, unsigned int len);
 void MD5Final  (unsigned char digest[16], MD5_CTX *mdContext);
 void Transform (UINT4 *buf, UINT4 *in);
 
--- ./modules/struct/tree/ms.c.orig	2019-08-23 04:55:09.000000000 +0000
+++ ./modules/struct/tree/ms.c	2022-05-12 07:00:40.010342000 +0000
@@ -312,7 +312,7 @@
 	M_NODES,       M_NUMCHILDREN, M_PARENT,	   M_PREVIOUS, M_RENAME,
 	M_ROOTNAME,    M_SERIALIZE,   M_SET,	   M_SIZE,     M_SPLICE,
 	M_SWAP,	       M_UNSET,	      M_WALK,	   M_WALKPROC
-    };
+    } method;
 
     if (objc < 2) {
 	Tcl_WrongNumArgs (interp, objc, objv, "option ?arg arg ...?");
@@ -326,7 +326,7 @@
      * the requested functionality
      */
 
-    switch (m) {
+    switch (method = m) {
     case M_TASSIGN:	return tm_TASSIGN     (t, interp, objc, objv);
     case M_TSET:	return tm_TSET	      (t, interp, objc, objv);
     case M_ANCESTORS:	return tm_ANCESTORS   (t, interp, objc, objv);
--- ./modules/struct/tree/util.c.orig	2019-08-23 04:55:09.000000000 +0000
+++ ./modules/struct/tree/util.c	2022-05-12 07:00:40.012345000 +0000
@@ -77,7 +77,7 @@
 /* Delete all items in the list.
  */
 
-void*
+void
 nlq_clear (NLQ* q)
 {
     NL* next;
--- ./modules/struct/tree/util.h.orig	2019-08-23 04:55:09.000000000 +0000
+++ ./modules/struct/tree/util.h	2022-05-12 07:00:40.012741000 +0000
@@ -52,7 +52,7 @@
 void  nlq_append (NLQ* q, void* n);
 void  nlq_push   (NLQ* q, void* n);
 void* nlq_pop    (NLQ* q);
-void* nlq_clear  (NLQ* q);
+void  nlq_clear  (NLQ* q);
 
 #endif /* _UTIL_H */
 
--- ./modules/struct/tree/walk.c.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/struct/tree/walk.c	2022-05-12 07:00:40.013310000 +0000
@@ -1,8 +1,9 @@
 
+#include <stdint.h>
 #include <string.h>
-#include "tcl.h"
-#include <t.h>
-#include <util.h>
+#include <tcl.h>
+#include "t.h"
+#include "util.h"
 
 /* .................................................. */
 
--- ./modules/struct/sets/m.c.orig	2019-08-23 04:55:09.000000000 +0000
+++ ./modules/struct/sets/m.c	2022-05-12 07:00:40.005832000 +0000
@@ -80,7 +80,7 @@
 		s_get (interp, val, &vs);
 	    }
 
-	    (void*) Tcl_CreateHashEntry(&vs->el, key, &new);
+	    Tcl_CreateHashEntry(&vs->el, key, &new);
 	    nx = 1;
 	}
 	if (nx) {
--- ./modules/struct/sets/s.c.orig	2019-08-23 04:55:09.000000000 +0000
+++ ./modules/struct/sets/s.c	2022-05-12 07:00:40.006303000 +0000
@@ -293,7 +293,7 @@
 	if (Tcl_FindHashEntry (&b->el, key) != NULL) continue;
 	/* key is in a, not in b <=> in (a-b) */
 
-	(void*) Tcl_CreateHashEntry(&s->el, key, &new);
+	Tcl_CreateHashEntry(&s->el, key, &new);
     }
 
     return s;
@@ -329,7 +329,7 @@
 	if (Tcl_FindHashEntry (&b->el, key) == NULL) continue;
 	/* key is in a, in b <=> in (a*b) */
 
-	(void*) Tcl_CreateHashEntry(&s->el, key, &new);
+	Tcl_CreateHashEntry(&s->el, key, &new);
     }
 
     return s;
@@ -365,7 +365,7 @@
 	    he != NULL;
 	    he = Tcl_NextHashEntry(&hs)) {
 	    key = Tcl_GetHashKey (&b->el, he);
-	    (void*) Tcl_CreateHashEntry(&a->el, key, &new);
+	    Tcl_CreateHashEntry(&a->el, key, &new);
 	    if (new) {nx = 1;}
 	}
     }
@@ -377,7 +377,7 @@
 {
     int new;
 
-    (void*) Tcl_CreateHashEntry(&a->el, item, &new);
+    Tcl_CreateHashEntry(&a->el, item, &new);
 }
 
 void
--- ./modules/struct/graph/ds.h.orig	2019-08-23 04:55:09.000000000 +0000
+++ ./modules/struct/graph/ds.h	2022-05-12 07:00:35.592738000 +0000
@@ -160,7 +160,7 @@
  */
 
 typedef struct GG {
-    long int counter;  /* Graph id generator */
+    size_t   counter;  /* Graph id generator */
     char     buf [50]; /* Buffer for handle construction */
 } GG;
 
--- ./modules/struct/graph/filter.c.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/struct/graph/filter.c	2022-05-12 07:00:35.593586000 +0000
@@ -261,13 +261,12 @@
 	(na->mode == NA_NONE)) {
 	filter_none (interp, gx, &l);
     } else {
-	if (na->mode != NA_NONE) {
-	    if (nodes) {
-		filter_mode_n (na->mode, gx, &l, na->nc, na->nv, g);
-	    } else {
-		filter_mode_a (na->mode, gx, &l, na->nc, na->nv, g);
-	    }
+	if (nodes) {
+	    filter_mode_n (na->mode, gx, &l, na->nc, na->nv, g);
+	} else {
+	    filter_mode_a (na->mode, gx, &l, na->nc, na->nv, g);
 	}
+
 	if (na->key && na->value) {
 	    filter_kv (interp, gx, &l, gf, g, na->key, na->value);
 	} else if (na->key) {
@@ -332,6 +331,7 @@
     case NA_IN:        filter_mode_a_in  (gx, l, nc, nv, g); break;
     case NA_INNER:     filter_mode_a_inn (gx, l, nc, nv, g); break;
     case NA_OUT:       filter_mode_a_out (gx, l, nc, nv, g); break;
+    case NA_NONE:      /* nothing */;
     }
 }
 
@@ -592,6 +592,7 @@
     case NA_IN:        filter_mode_n_in  (gx, l, nc, nv, g); break;
     case NA_INNER:     filter_mode_n_inn (gx, l, nc, nv, g); break;
     case NA_OUT:       filter_mode_n_out (gx, l, nc, nv, g); break;
+    case NA_NONE:      /* nothing */;
     }
 }
 
--- ./modules/struct/graph/graph.c.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/struct/graph/graph.c	2022-05-12 07:00:35.594881000 +0000
@@ -2,12 +2,13 @@
  * (c) Graph functions
  */
 
-#include <arc.h>
-#include <attr.h>
-#include <graph.h>
-#include <node.h>
-#include <objcmd.h>
-#include <util.h>
+#include <stdint.h>
+#include "arc.h"
+#include "attr.h"
+#include "graph.h"
+#include "node.h"
+#include "objcmd.h"
+#include "util.h"
 
 /* .................................................. */
 
--- ./modules/struct/graph/objcmd.c.orig	2019-08-23 04:55:09.000000000 +0000
+++ ./modules/struct/graph/objcmd.c	2022-05-12 07:00:40.002398000 +0000
@@ -40,7 +40,7 @@
 	M_DESTROY, M_GET,     M_GETALL,	   M_KEYEXISTS, M_KEYS, M_LAPPEND,
 	M_NODE,	   M_NODES,   M_SERIALIZE, M_SET,	M_SWAP, M_UNSET,
 	M_WALK
-    };
+    } method;
 
     static CONST char* a_methods [] = {
 	"append",      "attr",   "delete",        "exists",        "flip",
@@ -57,7 +57,7 @@
 	MA_MOVE_SOURCE, MA_MOVE_TARGET, MA_NODES,	  MA_RENAME,    MA_SET,       MA_SETUNWEIGHTED,
 	MA_SETWEIGHT,	MA_SOURCE,      MA_TARGET,        MA_UNSET,     MA_UNSETWEIGHT,
 	MA_WEIGHTS
-    };
+    } a_method;
 
     static CONST char* n_methods [] = {
 	"append",  "attr",     "degree", "delete",    "exists",
@@ -69,7 +69,7 @@
 	MN_APPEND,  MN_ATTR,	 MN_DEGREE, MN_DELETE,	  MN_EXISTS,
 	MN_GET,	    MN_GETALL,	 MN_INSERT, MN_KEYEXISTS, MN_KEYS,
 	MN_LAPPEND, MN_OPPOSITE, MN_RENAME, MN_SET,	  MN_UNSET
-    };
+    } n_method;
 
     if (objc < 2) {
 	Tcl_WrongNumArgs (interp, objc, objv, "option ?arg arg ...?");
@@ -83,7 +83,7 @@
      * the requested functionality
      */
 
-    switch (m) {
+    switch (method = m) {
     case M_GSET:	return gm_GSET	      (g, interp, objc, objv);
     case M_GASSIGN:	return gm_GASSIGN     (g, interp, objc, objv);
     case M_APPEND:	return gm_APPEND      (g, interp, objc, objv);
@@ -95,7 +95,7 @@
 					0, &m) != TCL_OK) {
 	    return TCL_ERROR;
 	}
-	switch (m) {
+	switch (a_method = m) {
 	case MA_APPEND:	       return gm_arc_APPEND     (g, interp, objc, objv);
 	case MA_ATTR:	       return gm_arc_ATTR	(g, interp, objc, objv);
 	case MA_DELETE:	       return gm_arc_DELETE     (g, interp, objc, objv);
@@ -141,7 +141,7 @@
 					0, &m) != TCL_OK) {
 	    return TCL_ERROR;
 	}
-	switch (m) {
+	switch (n_method = m) {
 	case MN_APPEND:	   return gm_node_APPEND    (g, interp, objc, objv);
 	case MN_ATTR:	   return gm_node_ATTR	    (g, interp, objc, objv);
 	case MN_DEGREE:	   return gm_node_DEGREE    (g, interp, objc, objv);
--- ./modules/struct/graph/util.c.orig	2019-08-23 04:55:09.000000000 +0000
+++ ./modules/struct/graph/util.c	2022-05-12 07:00:40.002840000 +0000
@@ -77,7 +77,7 @@
 /* Delete all items in the list.
  */
 
-void*
+void
 g_nlq_clear (NLQ* q)
 {
     NL* next;
--- ./modules/struct/graph/util.h.orig	2019-08-23 04:55:09.000000000 +0000
+++ ./modules/struct/graph/util.h	2022-05-12 07:00:40.003195000 +0000
@@ -53,7 +53,7 @@
 void  g_nlq_append (NLQ* q, void* n);
 void  g_nlq_push   (NLQ* q, void* n);
 void* g_nlq_pop    (NLQ* q);
-void* g_nlq_clear  (NLQ* q);
+void  g_nlq_clear  (NLQ* q);
 
 #endif /* _G_UTIL_H */
 
--- ./modules/struct/graph/walk.c.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/struct/graph/walk.c	2022-05-12 07:00:40.003767000 +0000
@@ -1,9 +1,9 @@
 
-#include "tcl.h"
 #include <string.h>
-#include <graph.h>
-#include <util.h>
-#include <walk.h>
+#include <tcl.h>
+#include "graph.h"
+#include "util.h"
+#include "walk.h"
 
 /* .................................................. */
 
@@ -23,7 +23,7 @@
 static int walk_invoke (Tcl_Interp* interp, GN* n,
 			int cc, Tcl_Obj** ev, Tcl_Obj* action);
 
-static int walk_neighbours (GN* n, Tcl_HashTable* v, int dir,
+static void walk_neighbours (GN* n, Tcl_HashTable* v, int dir,
 			    int* nc, GN*** nv);
 
 /* .................................................. */
@@ -288,7 +288,7 @@
 
 /* .................................................. */
 
-static int
+static void
 walk_neighbours (GN* n, Tcl_HashTable* vn, int dir,
 		 int* nc, GN*** nv)
 {
--- ./modules/struct/queue/ms.c.orig	2019-08-23 04:55:09.000000000 +0000
+++ ./modules/struct/queue/ms.c	2022-05-12 07:00:40.004897000 +0000
@@ -41,7 +41,7 @@
 	M_CLEAR, M_DESTROY, M_GET,
 	M_PEEK,  M_PUT,     M_SIZE,
 	M_UNGET
-    };
+    } method;
 
     if (objc < 2) {
 	Tcl_WrongNumArgs (interp, objc, objv, "option ?arg arg ...?");
@@ -55,7 +55,7 @@
      * the requested functionality
      */
 
-    switch (m) {
+    switch (method = m) {
     case M_CLEAR:	return qum_CLEAR   (q, interp, objc, objv);
     case M_DESTROY:	return qum_DESTROY (q, interp, objc, objv);
     case M_GET:		return qum_PEEK    (q, interp, objc, objv, 1 /* get  */);
--- ./modules/struct/stack/ms.c.orig	2019-08-23 04:55:09.000000000 +0000
+++ ./modules/struct/stack/ms.c	2022-05-12 07:00:40.007279000 +0000
@@ -39,7 +39,7 @@
     enum methods {
 	M_CLEAR, M_DESTROY, M_GET,    M_GETR, M_PEEK, M_PEEKR,
 	M_POP,   M_PUSH,    M_ROTATE, M_SIZE, M_TRIM, M_TRIMV
-    };
+    } method;
 
     if (objc < 2) {
 	Tcl_WrongNumArgs (interp, objc, objv, "option ?arg arg ...?");
@@ -53,7 +53,7 @@
      * the requested functionality
      */
 
-    switch (m) {
+    switch (method = m) {
     case M_CLEAR:	return stm_CLEAR   (s, interp, objc, objv);
     case M_DESTROY:	return stm_DESTROY (s, interp, objc, objv);
     case M_GET:		return stm_GET     (s, interp, objc, objv, 0   ); /* get   */
--- ./modules/struct/queue_c.tcl.orig	2021-10-28 21:08:34.000000000 +0000
+++ ./modules/struct/queue_c.tcl	2022-05-12 07:00:40.004223000 +0000
@@ -35,7 +35,7 @@
 	*/
 
 	typedef struct QDg {
-	    long int counter;
+	    size_t counter;
 	    char buf [50];
 	} QDg;
 
--- ./modules/struct/sets_c.tcl.orig	2021-10-28 20:35:34.000000000 +0000
+++ ./modules/struct/sets_c.tcl	2022-05-12 07:00:40.005270000 +0000
@@ -53,7 +53,7 @@
             S_equal,S_exclude,  S_include,      S_intersect,
             S_intersect3,       S_size, S_subsetof,     S_subtract,
             S_symdiff,  S_union
-        };
+        } method;
 
 	int m;
 
@@ -69,7 +69,7 @@
          * the requested functionality
          */
 
-        switch (m) {
+        switch (method = m) {
             case S_add:        return sm_ADD        (NULL, interp, objc, objv);
             case S_contains:   return sm_CONTAINS   (NULL, interp, objc, objv);
             case S_difference: return sm_DIFFERENCE (NULL, interp, objc, objv);
--- ./modules/struct/stack_c.tcl.orig	2021-10-28 21:08:34.000000000 +0000
+++ ./modules/struct/stack_c.tcl	2022-05-12 07:00:40.006760000 +0000
@@ -40,7 +40,7 @@
 	*/
 
 	typedef struct SDg {
-	    long int counter;
+	    size_t counter;
 	    char buf [50];
 	} SDg;
 
--- ./modules/struct/tree_c.tcl.orig	2021-10-28 21:08:34.000000000 +0000
+++ ./modules/struct/tree_c.tcl	2022-05-12 07:00:40.007725000 +0000
@@ -41,7 +41,7 @@
 	*/
 
 	typedef struct TDg {
-	    long int counter;
+	    size_t   counter;
 	    char buf [50];
 	} TDg;
 
--- ./modules/sha1/sha1c.tcl.orig	2022-05-03 18:53:00.000000000 +0000
+++ ./modules/sha1/sha1c.tcl	2022-05-12 07:00:35.591089000 +0000
@@ -32,8 +32,7 @@
         static void 
         sha1_free_rep(Tcl_Obj* obj)
         {
-            SHA1_CTX* mp = (SHA1_CTX*) obj->internalRep.otherValuePtr;
-            Tcl_Free ((char*)mp);
+            Tcl_Free(obj->internalRep.otherValuePtr);
         }
         
         static void
--- ./modules/md5crypt/md5cryptc.tcl.orig	2021-10-28 21:08:52.000000000 +0000
+++ ./modules/md5crypt/md5cryptc.tcl	2022-05-12 07:00:35.561245000 +0000
@@ -57,8 +57,9 @@
                                const char *salt,
                                const char *magic)
         {
-            static char     passwd[120], *p;
-            static const unsigned char *sp,*ep;
+            static char     passwd[120];
+            char     *p;
+            const unsigned char *sp,*ep;
             unsigned char	final[16];
             int sl,pl,i;
             MD5_CTX	ctx,ctx1;
@@ -113,7 +114,7 @@
             }
             
             /* Now make the output string */
-            snprintf(passwd, sizeof(passwd), "%s%.*s$", (char *)magic,
+            p = passwd + snprintf(passwd, sizeof(passwd), "%s%.*s$", (char *)magic,
                     sl, (const char *)sp);
             
             MD5Final(final,&ctx);
@@ -143,8 +144,6 @@
                 MD5Final(final,&ctx1);
             }
 
-            p = passwd + strlen(passwd);
-            
             l = (final[ 0]<<16) | (final[ 6]<<8) | final[12]; to64(p,l,4); p += 4;
             l = (final[ 1]<<16) | (final[ 7]<<8) | final[13]; to64(p,l,4); p += 4;
             l = (final[ 2]<<16) | (final[ 8]<<8) | final[14]; to64(p,l,4); p += 4;
--- ./modules/pt/rde_critcl/p.c.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/rde_critcl/p.c	2022-05-12 07:00:35.565397000 +0000
@@ -2,9 +2,10 @@
  * (c) PARAM functions
  */
 
-#include <pInt.h> /* Our public and internal APIs */
-#include <util.h> /* Allocation macros */
+#include <stdint.h>
 #include <string.h>
+#include "pInt.h" /* Our public and internal APIs */
+#include "util.h" /* Allocation macros */
 
 /* .................................................. */
 
@@ -132,7 +133,7 @@
     hPtr = Tcl_CreateHashEntry(&p->str, literal, &isnew);
     ASSERT (isnew, "Should have found entry");
 
-    Tcl_SetHashValue (hPtr, p->numstr);
+    Tcl_SetHashValue (hPtr, (intptr_t)p->numstr);
 
     if (p->numstr >= p->maxnum) {
 	long int new;
--- ./modules/pt/rde_critcl/param.c.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/rde_critcl/param.c	2022-05-12 07:00:35.566472000 +0000
@@ -672,7 +672,7 @@
 
     ASSERT_BOUNDS(s,p->numstr);
 
-    rde_stack_push (p->ER->msg, (void*) s);
+    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 }
 
 static void
@@ -822,7 +822,7 @@
     if (!hPtr) { return 0; }
 
     tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
     if (!hPtr) { return 0; }
 
     /*
@@ -863,7 +863,7 @@
      * 2-level hash table keyed by location, and symbol ...
      */
 
-    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 
     if (isnew) {
 	tablePtr = ALLOC (Tcl_HashTable);
@@ -873,7 +873,7 @@
 	tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
     }
 
-    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 
     if (isnew) {
 	/*
@@ -1073,13 +1073,15 @@
 static int
 UniCharIsHexDigit (int character)
 {
-    return (character >= 0) && (character < 0x80) && isxdigit(character);
+    return UniCharIsDecDigit(character) ||
+	(character >= 'a' && character <= 'f') ||
+	(character >= 'A' && character <= 'F');
 }
 
 static int
 UniCharIsDecDigit (int character)
 {
-    return (character >= 0) && (character < 0x80) && isdigit(character);
+    return (character >= '0') && (character <= '9');
 }
 
 /*
--- ./modules/pt/rde_critcl/param.h.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/rde_critcl/param.h	2022-05-12 07:00:35.567038000 +0000
@@ -9,6 +9,7 @@
 #include "tcl.h"
 #include <util.h>  /* Scoping */
 #include <stack.h> /* Stack handling */
+#include <stdint.h> /* intptr_t */
 
 /*
  * The state structure is opaque, its internals are known only to the
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/0_basic_arithmetic.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/0_basic_arithmetic	2022-05-12 07:00:35.568151000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/10_notahead.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/10_notahead	2022-05-12 07:00:35.569227000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/11_epsilon.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/11_epsilon	2022-05-12 07:00:35.570230000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/1_functions.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/1_functions	2022-05-12 07:00:35.571208000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/2_fun_arithmetic.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/2_fun_arithmetic	2022-05-12 07:00:35.572295000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/3_peg_itself.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/3_peg_itself	2022-05-12 07:00:35.574306000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/4_choice.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/4_choice	2022-05-12 07:00:35.575318000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/5_sequence.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/5_sequence	2022-05-12 07:00:35.576307000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/6_optional.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/6_optional	2022-05-12 07:00:35.577302000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/7_kleene.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/7_kleene	2022-05-12 07:00:35.578304000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/8_pkleene.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/8_pkleene	2022-05-12 07:00:35.579292000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-critcl/9_ahead.orig	2021-04-14 16:57:28.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-critcl/9_ahead	2022-05-12 07:00:35.580250000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/0_basic_arithmetic.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/0_basic_arithmetic	2022-05-12 07:00:35.581083000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/10_notahead.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/10_notahead	2022-05-12 07:00:35.581868000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/11_epsilon.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/11_epsilon	2022-05-12 07:00:35.582616000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/1_functions.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/1_functions	2022-05-12 07:00:35.583374000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/2_fun_arithmetic.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/2_fun_arithmetic	2022-05-12 07:00:35.584180000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/3_peg_itself.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/3_peg_itself	2022-05-12 07:00:35.585500000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/4_choice.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/4_choice	2022-05-12 07:00:35.586272000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/5_sequence.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/5_sequence	2022-05-12 07:00:35.587104000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/6_optional.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/6_optional	2022-05-12 07:00:35.587940000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/7_kleene.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/7_kleene	2022-05-12 07:00:35.588702000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/8_pkleene.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/8_pkleene	2022-05-12 07:00:35.589498000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/tests/data/ok/peg_cparam-tea/9_ahead.orig	2019-08-23 04:55:08.000000000 +0000
+++ ./modules/pt/tests/data/ok/peg_cparam-tea/9_ahead	2022-05-12 07:00:35.590270000 +0000
@@ -11,6 +11,7 @@
 * * ** *** ***** ******** ************* *********************/
 	#include <string.h>
 	#include <tcl.h>
+	#include <stdint.h>
 	#include <stdlib.h>
 	#include <ctype.h>
 	#define SCOPE static
@@ -863,7 +864,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -953,7 +954,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void*)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -978,7 +979,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*)(intptr_t)at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -986,7 +987,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void *)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1136,12 +1137,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
--- ./modules/pt/pt_cparam_config_critcl.tcl.orig	2021-10-28 21:09:06.000000000 +0000
+++ ./modules/pt/pt_cparam_config_critcl.tcl	2022-05-12 07:00:35.561832000 +0000
@@ -114,6 +114,8 @@
 	    critcl::ccode {
 		/* -*- c -*- */
 
+		#include <stdint.h>
+		#include <stdlib.h>
 		#include <string.h>
 		#include <ctype.h>  /* is... */
 		#include <stdlib.h> /* qsort */
--- ./modules/pt/pt_cparam_config_tea.tcl.orig	2021-10-28 21:09:06.000000000 +0000
+++ ./modules/pt/pt_cparam_config_tea.tcl	2022-05-12 07:00:35.562375000 +0000
@@ -94,6 +94,7 @@
 	* * ** *** ***** ******** ************* *********************/
 		#include <string.h>
 		#include <tcl.h>
+		#include <stdint.h>
 		#include <stdlib.h>
 		#include <ctype.h>
 		#define SCOPE static
--- ./modules/pt/pt_parse_peg_c.tcl.orig	2021-10-28 21:09:06.000000000 +0000
+++ ./modules/pt/pt_parse_peg_c.tcl	2022-05-12 07:00:35.564420000 +0000
@@ -45,6 +45,8 @@
     critcl::ccode {
 	/* -*- c -*- */
 
+	#include <stdint.h>
+	#include <stdlib.h>
 	#include <string.h>
 	#include <ctype.h>  /* is... */
 	#include <stdlib.h> /* qsort */
@@ -898,7 +900,7 @@
 	    p->ER->loc      = p->CL;
 	    p->ER->msg      = rde_stack_new (NULL);
 	    ASSERT_BOUNDS(s,p->numstr);
-	    rde_stack_push (p->ER->msg, (void*) s);
+	    rde_stack_push (p->ER->msg, (void*)(intptr_t)s);
 	}
 	static void
 	error_state_free (void* esx)
@@ -988,7 +990,7 @@
 	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
 	    if (!hPtr) { return 0; }
 	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
-	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
+	    hPtr = Tcl_FindHashEntry (tablePtr, (void *)(intptr_t)s);
 	    if (!hPtr) { return 0; }
 	    
 	    scs = Tcl_GetHashValue (hPtr);
@@ -1004,7 +1006,7 @@
 	SCOPE void
 	rde_param_i_symbol_save (RDE_PARAM p, long int s)
 	{
-	    long int       at = (long int) rde_stack_top (p->LS);
+	    intptr_t       at = (intptr_t)rde_stack_top (p->LS);
 	    NC_STATE*      scs;
 	    Tcl_HashEntry* hPtr;
 	    Tcl_HashTable* tablePtr;
@@ -1013,7 +1015,7 @@
 	    TRACE (("RDE_PARAM %p",p));
 	    TRACE (("INT       %d",s));
 	    
-	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
+	    hPtr = Tcl_CreateHashEntry (&p->NC, (void*) at, &isnew);
 	    if (isnew) {
 		tablePtr = ALLOC (Tcl_HashTable);
 		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
@@ -1021,7 +1023,7 @@
 	    } else {
 		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
 	    }
-	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
+	    hPtr = Tcl_CreateHashEntry (tablePtr, (void*)(intptr_t)s, &isnew);
 	    if (isnew) {
 		
 		scs = ALLOC (NC_STATE);
@@ -1171,12 +1173,14 @@
 	static int
 	UniCharIsHexDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isxdigit(character);
+	    return UniCharIsDecDigit(character) ||
+		(character >= 'a' && character <= 'f') ||
+		(character >= 'A' && character <= 'F');
 	}
 	static int
 	UniCharIsDecDigit (int character)
 	{
-	    return (character >= 0) && (character < 0x80) && isdigit(character);
+	    return (character >= '0') && (character <= '9');
 	}
 	SCOPE void
 	rde_param_i_value_clear (RDE_PARAM p)
@@ -4729,7 +4733,7 @@
 	/* -*- c -*- */
 
 	typedef struct PARSERg {
-	    long int counter;
+	    size_t   counter;
 	    char     buf [50];
 	} PARSERg;
 
@@ -4757,7 +4761,7 @@
 	    }
 
 	    parserg->counter ++;
-	    sprintf (parserg->buf, "peg%ld", parserg->counter);
+	    sprintf (parserg->buf, "peg%td", parserg->counter);
 	    return parserg->buf;
 #undef  KEY
 	}
--- ./modules/pt/pt_rdengine_c.tcl.orig	2021-10-28 21:09:06.000000000 +0000
+++ ./modules/pt/pt_rdengine_c.tcl	2022-05-12 07:00:35.564911000 +0000
@@ -48,7 +48,7 @@
 	*/
 
 	typedef struct PARAMg {
-	    long int counter;
+	    size_t counter;
 	    char     buf [50];
 	} PARAMg;
 
@@ -76,7 +76,7 @@
 	    }
 	    
 	    paramg->counter ++;
-	    sprintf (paramg->buf, "rde%ld", paramg->counter);
+	    sprintf (paramg->buf, "rde%td", paramg->counter);
 	    return paramg->buf;
 
 #undef  KEY
