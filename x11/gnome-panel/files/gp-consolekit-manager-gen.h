/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GP_CONSOLEKIT_MANAGER_GEN_H__
#define __GP_CONSOLEKIT_MANAGER_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.ConsoleKit.Manager */

#define GP_TYPE_CONSOLE_KIT_MANAGER_GEN (gp_console_kit_manager_gen_get_type ())
#define GP_CONSOLE_KIT_MANAGER_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GP_TYPE_CONSOLE_KIT_MANAGER_GEN, GpConsoleKitManagerGen))
#define GP_IS_CONSOLE_KIT_MANAGER_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GP_TYPE_CONSOLE_KIT_MANAGER_GEN))
#define GP_CONSOLE_KIT_MANAGER_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GP_TYPE_CONSOLE_KIT_MANAGER_GEN, GpConsoleKitManagerGenIface))

struct _GpConsoleKitManagerGen;
typedef struct _GpConsoleKitManagerGen GpConsoleKitManagerGen;
typedef struct _GpConsoleKitManagerGenIface GpConsoleKitManagerGenIface;

struct _GpConsoleKitManagerGenIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_can_hibernate) (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_hybrid_sleep) (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_suspend) (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_hibernate) (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_hybrid_sleep) (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_suspend) (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

};

GType gp_console_kit_manager_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gp_console_kit_manager_gen_interface_info (void);
guint gp_console_kit_manager_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gp_console_kit_manager_gen_complete_suspend (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation);

void gp_console_kit_manager_gen_complete_hibernate (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation);

void gp_console_kit_manager_gen_complete_hybrid_sleep (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation);

void gp_console_kit_manager_gen_complete_can_suspend (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void gp_console_kit_manager_gen_complete_can_hibernate (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void gp_console_kit_manager_gen_complete_can_hybrid_sleep (
    GpConsoleKitManagerGen *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);



/* D-Bus method calls: */
void gp_console_kit_manager_gen_call_suspend (
    GpConsoleKitManagerGen *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gp_console_kit_manager_gen_call_suspend_finish (
    GpConsoleKitManagerGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gp_console_kit_manager_gen_call_suspend_sync (
    GpConsoleKitManagerGen *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void gp_console_kit_manager_gen_call_hibernate (
    GpConsoleKitManagerGen *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gp_console_kit_manager_gen_call_hibernate_finish (
    GpConsoleKitManagerGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gp_console_kit_manager_gen_call_hibernate_sync (
    GpConsoleKitManagerGen *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void gp_console_kit_manager_gen_call_hybrid_sleep (
    GpConsoleKitManagerGen *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gp_console_kit_manager_gen_call_hybrid_sleep_finish (
    GpConsoleKitManagerGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gp_console_kit_manager_gen_call_hybrid_sleep_sync (
    GpConsoleKitManagerGen *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void gp_console_kit_manager_gen_call_can_suspend (
    GpConsoleKitManagerGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gp_console_kit_manager_gen_call_can_suspend_finish (
    GpConsoleKitManagerGen *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean gp_console_kit_manager_gen_call_can_suspend_sync (
    GpConsoleKitManagerGen *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void gp_console_kit_manager_gen_call_can_hibernate (
    GpConsoleKitManagerGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gp_console_kit_manager_gen_call_can_hibernate_finish (
    GpConsoleKitManagerGen *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean gp_console_kit_manager_gen_call_can_hibernate_sync (
    GpConsoleKitManagerGen *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void gp_console_kit_manager_gen_call_can_hybrid_sleep (
    GpConsoleKitManagerGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gp_console_kit_manager_gen_call_can_hybrid_sleep_finish (
    GpConsoleKitManagerGen *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean gp_console_kit_manager_gen_call_can_hybrid_sleep_sync (
    GpConsoleKitManagerGen *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GP_TYPE_CONSOLE_KIT_MANAGER_GEN_PROXY (gp_console_kit_manager_gen_proxy_get_type ())
#define GP_CONSOLE_KIT_MANAGER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GP_TYPE_CONSOLE_KIT_MANAGER_GEN_PROXY, GpConsoleKitManagerGenProxy))
#define GP_CONSOLE_KIT_MANAGER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GP_TYPE_CONSOLE_KIT_MANAGER_GEN_PROXY, GpConsoleKitManagerGenProxyClass))
#define GP_CONSOLE_KIT_MANAGER_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GP_TYPE_CONSOLE_KIT_MANAGER_GEN_PROXY, GpConsoleKitManagerGenProxyClass))
#define GP_IS_CONSOLE_KIT_MANAGER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GP_TYPE_CONSOLE_KIT_MANAGER_GEN_PROXY))
#define GP_IS_CONSOLE_KIT_MANAGER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GP_TYPE_CONSOLE_KIT_MANAGER_GEN_PROXY))

typedef struct _GpConsoleKitManagerGenProxy GpConsoleKitManagerGenProxy;
typedef struct _GpConsoleKitManagerGenProxyClass GpConsoleKitManagerGenProxyClass;
typedef struct _GpConsoleKitManagerGenProxyPrivate GpConsoleKitManagerGenProxyPrivate;

struct _GpConsoleKitManagerGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GpConsoleKitManagerGenProxyPrivate *priv;
};

struct _GpConsoleKitManagerGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gp_console_kit_manager_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GpConsoleKitManagerGenProxy, g_object_unref)
#endif

void gp_console_kit_manager_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GpConsoleKitManagerGen *gp_console_kit_manager_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GpConsoleKitManagerGen *gp_console_kit_manager_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gp_console_kit_manager_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GpConsoleKitManagerGen *gp_console_kit_manager_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GpConsoleKitManagerGen *gp_console_kit_manager_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GP_TYPE_CONSOLE_KIT_MANAGER_GEN_SKELETON (gp_console_kit_manager_gen_skeleton_get_type ())
#define GP_CONSOLE_KIT_MANAGER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GP_TYPE_CONSOLE_KIT_MANAGER_GEN_SKELETON, GpConsoleKitManagerGenSkeleton))
#define GP_CONSOLE_KIT_MANAGER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GP_TYPE_CONSOLE_KIT_MANAGER_GEN_SKELETON, GpConsoleKitManagerGenSkeletonClass))
#define GP_CONSOLE_KIT_MANAGER_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GP_TYPE_CONSOLE_KIT_MANAGER_GEN_SKELETON, GpConsoleKitManagerGenSkeletonClass))
#define GP_IS_CONSOLE_KIT_MANAGER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GP_TYPE_CONSOLE_KIT_MANAGER_GEN_SKELETON))
#define GP_IS_CONSOLE_KIT_MANAGER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GP_TYPE_CONSOLE_KIT_MANAGER_GEN_SKELETON))

typedef struct _GpConsoleKitManagerGenSkeleton GpConsoleKitManagerGenSkeleton;
typedef struct _GpConsoleKitManagerGenSkeletonClass GpConsoleKitManagerGenSkeletonClass;
typedef struct _GpConsoleKitManagerGenSkeletonPrivate GpConsoleKitManagerGenSkeletonPrivate;

struct _GpConsoleKitManagerGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GpConsoleKitManagerGenSkeletonPrivate *priv;
};

struct _GpConsoleKitManagerGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gp_console_kit_manager_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GpConsoleKitManagerGenSkeleton, g_object_unref)
#endif

GpConsoleKitManagerGen *gp_console_kit_manager_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GP_CONSOLEKIT_MANAGER_GEN_H__ */
