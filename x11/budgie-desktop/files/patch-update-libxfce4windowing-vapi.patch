Based on https://github.com/BuddiesOfBudgie/budgie-desktop/pull/722

--- src/daemon/tabswitcher.vala.orig	2025-09-07 12:35:19 UTC
+++ src/daemon/tabswitcher.vala
@@ -12,7 +12,7 @@ using Gtk;
 
 using Gdk;
 using Gtk;
-using libxfce4windowing;
+using Xfw;
 
 namespace Budgie {
 	public const string SHOW_ALL_WINDOWS_KEY = "show-all-windows-tabswitcher";
@@ -47,18 +47,18 @@ namespace Budgie {
 	public class TabSwitcherWidget : Gtk.FlowBoxChild {
 		private Gtk.Image image;
 		private uint64 activation_timestamp;
-		private libxfce4windowing.Application? application;
+		private Xfw.Application? application;
 		private DesktopAppInfo? info;
 		public string id;
 		public string title;
 
-		public unowned libxfce4windowing.Window? window = null;
+		public unowned Xfw.Window? window = null;
 
 		public signal void closed(TabSwitcherWidget widget);
-		public signal void window_activated(libxfce4windowing.Window window);
+		public signal void window_activated(Xfw.Window window);
 		public signal void workspace_changed();
 
-		public TabSwitcherWidget(Budgie.AppSystem app_system, libxfce4windowing.Window? win) {
+		public TabSwitcherWidget(Budgie.AppSystem app_system, Xfw.Window? win) {
 			Object();
 			window = win;
 			ulong uid = (ulong) window.x11_get_xid();
@@ -68,7 +68,7 @@ namespace Budgie {
 			application = win.get_application();
 
 			// Running under X11
-			if (libxfce4windowing.windowing_get() == libxfce4windowing.Windowing.X11) {
+			if (Xfw.windowing_get() == Xfw.Windowing.X11) {
 				info = app_system.query_window_by_xid((ulong)uid);
 			}
 
@@ -82,8 +82,8 @@ namespace Budgie {
 
 			window.state_changed.connect((changed_mask, new_state) => {
 				if (
-					(libxfce4windowing.WindowState.ACTIVE in changed_mask) &&
-					(libxfce4windowing.WindowState.ACTIVE in new_state)
+					(Xfw.WindowState.ACTIVE in changed_mask) &&
+					(Xfw.WindowState.ACTIVE in new_state)
 				) {
 					activation_timestamp = get_time();
 					window_activated(window);
@@ -127,11 +127,11 @@ namespace Budgie {
 		[GtkChild]
 		private unowned Label window_title;
 
-		private libxfce4windowing.Workspace? active_workspace = null;
-		private unowned libxfce4windowing.WorkspaceGroup? workspace_group = null;
+		private Xfw.Workspace? active_workspace = null;
+		private unowned Xfw.WorkspaceGroup? workspace_group = null;
 		private Gdk.Screen? default_screen;
-		private libxfce4windowing.Screen xfce_screen;
-		private unowned libxfce4windowing.WorkspaceManager workspace_manager;
+		private Xfw.Screen xfce_screen;
+		private unowned Xfw.WorkspaceManager workspace_manager;
 		private Budgie.AppSystem? app_system = null;
 
 		private Gdk.Monitor primary_monitor;
@@ -163,7 +163,7 @@ namespace Budgie {
 
 			default_screen = Gdk.Screen.get_default();
 
-			xfce_screen = libxfce4windowing.Screen.get_default();
+			xfce_screen = Xfw.Screen.get_default();
 
 			xfce_screen.get_windows().foreach(add_window);
 			xfce_screen.window_opened.connect(add_window);
@@ -212,7 +212,7 @@ namespace Budgie {
 			window_box.invalidate_filter(); // Re-filter
 		}
 
-		private void add_window(libxfce4windowing.Window window) {
+		private void add_window(Xfw.Window window) {
 			if (window.is_skip_pager() || window.is_skip_tasklist()) return;
 
 			var window_widget = new TabSwitcherWidget(app_system, window);
@@ -333,7 +333,7 @@ namespace Budgie {
 			update_sizing();
 		}
 
-		private void set_window_as_activated(libxfce4windowing.Window window) {
+		private void set_window_as_activated(Xfw.Window window) {
 			string id = ((ulong) window.x11_get_xid()).to_string();
 			unowned List<string> entries = recency.find_custom(id, strcmp);
 			recency.remove_link(entries);
@@ -356,15 +356,15 @@ namespace Budgie {
 			move_switcher();
 		}
 
-		private bool window_on_active_workspace(libxfce4windowing.Window window) {
-			unowned libxfce4windowing.Workspace? win_workspace = window.get_workspace(); // Get workspace
+		private bool window_on_active_workspace(Xfw.Window window) {
+			unowned Xfw.Workspace? win_workspace = window.get_workspace(); // Get workspace
 			if (active_workspace == null || win_workspace == null) return true;
 			return win_workspace.get_id() == active_workspace.get_id();
 		}
 
 		/* Switch focus to the item with the xid */
 		public void focus_item(bool backwards) {
-			unowned libxfce4windowing.Window? active_window = xfce_screen.get_active_window();
+			unowned Xfw.Window? active_window = xfce_screen.get_active_window();
 			TabSwitcherWidget? widget = active_window != null ? ids.get(((ulong) active_window.x11_get_xid()).to_string()) : null;
 
 			// Visible, each input should cycle to previous / next
--- src/panel/applets/show-desktop/ShowDesktopApplet.vala.orig	2025-09-07 12:35:19 UTC
+++ src/panel/applets/show-desktop/ShowDesktopApplet.vala
@@ -18,7 +18,7 @@ public class ShowDesktopApplet : Budgie.Applet {
 public class ShowDesktopApplet : Budgie.Applet {
 	protected Gtk.ToggleButton widget;
 	protected Gtk.Image img;
-	private libxfce4windowing.Screen xfce_screen;
+	private Xfw.Screen xfce_screen;
 
 	public ShowDesktopApplet() {
 		widget = new Gtk.ToggleButton();
@@ -28,7 +28,7 @@ public class ShowDesktopApplet : Budgie.Applet {
 		widget.add(img);
 		widget.set_tooltip_text(_("Toggle the desktop"));
 
-		xfce_screen = libxfce4windowing.Screen.get_default();
+		xfce_screen = Xfw.Screen.get_default();
 
 		xfce_screen.window_opened.connect((window) => {
 			if (window.is_skip_pager() || window.is_skip_tasklist()) return;
@@ -48,7 +48,7 @@ public class ShowDesktopApplet : Budgie.Applet {
 				try {
 					window.set_minimized(!showing_desktop);
 				} catch (Error e) {
-					// Note: This is intentionally set to debug instead of warning because libxfce4windowing will create noise otherwise
+					// Note: This is intentionally set to debug instead of warning because Xfw will create noise otherwise
 					// Unminimize operations can end up being noisy when they fail due to the window not yet reporting the capability to support CAN_MINIMIZE
 					// https://gitlab.xfce.org/xfce/libxfce4windowing/-/blob/main/libxfce4windowing/xfw-window-x11.c#L363
 					debug("Failed to change state of window \"%s\": %s", window.get_name(), e.message);
--- src/panel/applets/workspaces/WindowIcon.vala.orig	2025-09-07 12:35:19 UTC
+++ src/panel/applets/workspaces/WindowIcon.vala
@@ -13,9 +13,9 @@ namespace Workspaces {
 	public const int WORKSPACE_ICON_SIZE = 16;
 
 	public class WindowIcon : Gtk.Button {
-		private libxfce4windowing.Window window;
+		private Xfw.Window window;
 
-		public WindowIcon(libxfce4windowing.Window window) {
+		public WindowIcon(Xfw.Window window) {
 			this.window = window;
 
 			this.set_relief(Gtk.ReliefStyle.NONE);
--- src/panel/applets/workspaces/WorkspaceItem.vala.orig	2025-09-07 12:35:19 UTC
+++ src/panel/applets/workspaces/WorkspaceItem.vala
@@ -15,7 +15,7 @@ namespace Workspaces {
 	};
 
 	public class WorkspaceItem : Gtk.EventBox {
-		private libxfce4windowing.Workspace workspace;
+		private Xfw.Workspace workspace;
 		private Budgie.Popover popover;
 		private Gtk.Stack popover_stack;
 		private Gtk.FlowBox rest_of_the_icons;
@@ -25,7 +25,7 @@ namespace Workspaces {
 		private Gtk.Allocation real_alloc;
 		private float size_multiplier;
 
-		public WorkspaceItem(libxfce4windowing.Workspace space, float multiplier) {
+		public WorkspaceItem(Xfw.Workspace space, float multiplier) {
 			this.get_style_context().add_class("workspace-item");
 			this.workspace = space;
 			this.size_multiplier = multiplier;
@@ -178,7 +178,7 @@ namespace Workspaces {
 
 			if (data != null) {
 				try {
-					foreach (libxfce4windowing.Window window in WorkspacesApplet.xfce_screen.get_windows()) {
+					foreach (Xfw.Window window in WorkspacesApplet.xfce_screen.get_windows()) {
 						if (window.x11_get_xid() == *data) {
 							window.move_to_workspace(this.workspace);
 							dnd_success = true;
@@ -193,7 +193,7 @@ namespace Workspaces {
 			Gtk.drag_finish(context, dnd_success, true, time);
 		}
 
-		public void update_windows(List<weak libxfce4windowing.Window> window_list) {
+		public void update_windows(List<weak Xfw.Window> window_list) {
 			int num_columns = (real_alloc.width - 4) / 20;
 			int num_rows = (real_alloc.height - 4) / 20;
 
@@ -322,7 +322,7 @@ namespace Workspaces {
 			real_alloc.height = (int) (height * 2 * size_multiplier);
 		}
 
-		public libxfce4windowing.Workspace get_workspace() {
+		public Xfw.Workspace get_workspace() {
 			return workspace;
 		}
 	}
--- src/panel/applets/workspaces/WorkspacesApplet.vala.orig	2025-09-07 12:35:19 UTC
+++ src/panel/applets/workspaces/WorkspacesApplet.vala
@@ -57,7 +57,7 @@ namespace Workspaces {
 		private int size_change = 0;
 		private bool updating = false;
 		private ulong[] connections = {};
-		private HashTable<unowned libxfce4windowing.Window, ulong> window_connections;
+		private HashTable<unowned Xfw.Window, ulong> window_connections;
 		private List<int> dynamically_created_workspaces;
 		private Settings settings;
 		private AddButtonVisibility button_visibility = AddButtonVisibility.ALWAYS;
@@ -68,9 +68,9 @@ namespace Workspaces {
 		public static Budgie.PanelPosition panel_position = Budgie.PanelPosition.BOTTOM;
 		public static int panel_size = 0;
 		public static unowned Budgie.PopoverManager? manager = null;
-		public static libxfce4windowing.Screen xfce_screen;
-		public static libxfce4windowing.WorkspaceManager workspace_manager;
-		public static libxfce4windowing.WorkspaceGroup workspace_group;
+		public static Xfw.Screen xfce_screen;
+		public static Xfw.WorkspaceManager workspace_manager;
+		public static Xfw.WorkspaceGroup workspace_group;
 		public static bool dragging = false;
 
 		private int64 last_scroll_time = 0;
@@ -92,13 +92,13 @@ namespace Workspaces {
 			settings = this.get_applet_settings(uuid);
 			settings.changed.connect(on_settings_change);
 
-			xfce_screen = libxfce4windowing.Screen.get_default();
+			xfce_screen = Xfw.Screen.get_default();
 			workspace_manager = xfce_screen.get_workspace_manager();
 
 			workspace_group = workspace_manager.list_workspace_groups().nth_data(0);
 
 			dynamically_created_workspaces = new List<int>();
-			window_connections = new HashTable<unowned libxfce4windowing.Window, ulong>(str_hash, str_equal);
+			window_connections = new HashTable<unowned Xfw.Window, ulong>(str_hash, str_equal);
 
 			Bus.watch_name(BusType.SESSION, "org.budgie_desktop.BudgieWM", BusNameWatcherFlags.NONE,
 				has_wm, lost_wm);
@@ -205,9 +205,9 @@ namespace Workspaces {
 					return Gdk.EVENT_STOP;
 				}
 
-				unowned libxfce4windowing.Workspace current = workspace_group.get_active_workspace();
-				unowned libxfce4windowing.Workspace? next = current.get_neighbor(
-					(down) ? libxfce4windowing.Direction.RIGHT : libxfce4windowing.Direction.DOWN
+				unowned Xfw.Workspace current = workspace_group.get_active_workspace();
+				unowned Xfw.Workspace? next = current.get_neighbor(
+					(down) ? Xfw.Direction.RIGHT : Xfw.Direction.DOWN
 				);
 
 				if (next != null) {
@@ -243,12 +243,12 @@ namespace Workspaces {
 		}
 
 		private void populate_workspaces() {
-			foreach (libxfce4windowing.Workspace workspace in workspace_group.list_workspaces()) {
+			foreach (Xfw.Workspace workspace in workspace_group.list_workspaces()) {
 				workspace_added(workspace);
 			}
 			this.connect_signals();
 			this.queue_resize();
-			foreach (libxfce4windowing.Window window in xfce_screen.get_windows()) {
+			foreach (Xfw.Window window in xfce_screen.get_windows()) {
 				window_opened(window);
 			}
 		}
@@ -303,7 +303,7 @@ namespace Workspaces {
 			});
 		}
 
-		private void workspace_added(libxfce4windowing.Workspace space) {
+		private void workspace_added(Xfw.Workspace space) {
 			WorkspaceItem item = new WorkspaceItem(space, item_size_multiplier);
 			var _workspace = workspace_group.get_active_workspace();
 			if (_workspace != null && _workspace == space) {
@@ -325,7 +325,7 @@ namespace Workspaces {
 			}
 		}
 
-		private void workspace_removed(libxfce4windowing.Workspace space) {
+		private void workspace_removed(Xfw.Workspace space) {
 			foreach (var widget in workspaces_layout.get_children()) {
 				Gtk.Revealer revealer = widget as Gtk.Revealer;
 				WorkspaceItem item = revealer.get_child() as WorkspaceItem;
@@ -343,8 +343,8 @@ namespace Workspaces {
 			add_button_revealer.set_reveal_child(true);
 		}
 
-		private void window_opened(libxfce4windowing.Window window) {
-			if (window.get_window_type() != libxfce4windowing.WindowType.NORMAL) {
+		private void window_opened(Xfw.Window window) {
+			if (window.get_window_type() != Xfw.WindowType.NORMAL) {
 				return;
 			}
 
@@ -359,7 +359,7 @@ namespace Workspaces {
 			window_connections.set(window, conn);
 		}
 
-		private void window_closed(libxfce4windowing.Window window) {
+		private void window_closed(Xfw.Window window) {
 			if (window_connections.contains(window)) {
 				ulong conn = window_connections.get(window);
 				if (SignalHandler.is_connected(window, conn)) {
@@ -401,8 +401,8 @@ namespace Workspaces {
 				return;
 			}
 
-			libxfce4windowing.Window? window = null;
-			foreach (libxfce4windowing.Window win in xfce_screen.get_windows()) {
+			Xfw.Window? window = null;
+			foreach (Xfw.Window win in xfce_screen.get_windows()) {
 				if (win.x11_get_xid() == *data) {
 					window = win;
 					break;
@@ -420,7 +420,7 @@ namespace Workspaces {
 				if (index != -1) { // Successfully added workspace
 					dynamically_created_workspaces.append(index);
 					Timeout.add(50, () => {
-						libxfce4windowing.Workspace? workspace = get_workspace_by_index(index);
+						Xfw.Workspace? workspace = get_workspace_by_index(index);
 						try {
 							if (workspace != null) window.move_to_workspace(workspace);
 						} catch (Error e) {
@@ -525,11 +525,11 @@ namespace Workspaces {
 			foreach (Gtk.Widget widget in workspaces_layout.get_children()) {
 				Gtk.Revealer revealer = widget as Gtk.Revealer;
 				WorkspaceItem item = revealer.get_child() as WorkspaceItem;
-				List<unowned libxfce4windowing.Window> windows = xfce_screen.get_windows_stacked().copy();
+				List<unowned Xfw.Window> windows = xfce_screen.get_windows_stacked().copy();
 				windows.reverse();
-				List<unowned libxfce4windowing.Window> window_list = new List<unowned libxfce4windowing.Window>();
+				List<unowned Xfw.Window> window_list = new List<unowned Xfw.Window>();
 				windows.foreach((window) => {
-					if (window.get_workspace() == item.get_workspace() && !window.is_skip_tasklist() && !window.is_skip_pager() && window.get_window_type() == libxfce4windowing.WindowType.NORMAL) {
+					if (window.get_workspace() == item.get_workspace() && !window.is_skip_tasklist() && !window.is_skip_pager() && window.get_window_type() == Xfw.WindowType.NORMAL) {
 						window_list.append(window);
 					}
 				});
@@ -570,8 +570,8 @@ namespace Workspaces {
 			}
 		}
 
-		private libxfce4windowing.Workspace? get_workspace_by_index(uint num) {
-			unowned GLib.List<libxfce4windowing.Workspace>? workspaces = workspace_group.list_workspaces();
+		private Xfw.Workspace? get_workspace_by_index(uint num) {
+			unowned GLib.List<Xfw.Workspace>? workspaces = workspace_group.list_workspaces();
 			return workspaces.nth_data(num);
 		}
 	}
--- vapi/libxfce4windowing-0.vapi.orig	2025-09-07 12:35:19 UTC
+++ vapi/libxfce4windowing-0.vapi
@@ -1,8 +1,8 @@
 /* libxfce4windowing-0.vapi generated by vapigen, do not modify. */
 
-[CCode (cprefix = "libxfce4windowing", gir_namespace = "Libxfce4windowing", gir_version = "0.0", lower_case_cprefix = "libxfce4windowing_")]
-namespace libxfce4windowing {
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwApplication", type_id = "xfw_application_get_type ()")]
+[CCode (cprefix = "Xfw", gir_namespace = "Libxfce4windowing", gir_version = "0.0", lower_case_cprefix = "libxfce4windowing_")]
+namespace Xfw {
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", type_id = "xfw_application_get_type ()")]
 	public abstract class Application : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Application ();
@@ -15,13 +15,13 @@ namespace libxfce4windowing {
 		[CCode (cname = "xfw_application_get_icon")]
 		public unowned Gdk.Pixbuf? get_icon (int size, int scale);
 		[CCode (cname = "xfw_application_get_instance")]
-		public unowned libxfce4windowing.ApplicationInstance? get_instance (libxfce4windowing.Window window);
+		public unowned Xfw.ApplicationInstance? get_instance (Xfw.Window window);
 		[CCode (cname = "xfw_application_get_instances")]
-		public unowned GLib.List<libxfce4windowing.ApplicationInstance>? get_instances ();
+		public unowned GLib.List<Xfw.ApplicationInstance>? get_instances ();
 		[CCode (cname = "xfw_application_get_name")]
 		public unowned string get_name ();
 		[CCode (cname = "xfw_application_get_windows")]
-		public unowned GLib.List<libxfce4windowing.Window> get_windows ();
+		public unowned GLib.List<Xfw.Window> get_windows ();
 		[CCode (cname = "xfw_application_icon_is_fallback")]
 		[Version (since = "4.19.1")]
 		public bool icon_is_fallback ();
@@ -31,14 +31,14 @@ namespace libxfce4windowing {
 		[NoAccessorMethod]
 		public GLib.Icon gicon { owned get; }
 		[NoAccessorMethod]
-		public void* instances { get; }
+		public GLib.List<Xfw.ApplicationInstance> instances { owned get; }
 		[NoAccessorMethod]
 		public string name { owned get; }
 		[NoAccessorMethod]
-		public void* windows { get; }
+		public GLib.List<Xfw.Window> windows { owned get; }
 		public signal void icon_changed ();
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwApplicationInstance", has_type_id = false)]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", has_type_id = false)]
 	[Compact]
 	public class ApplicationInstance {
 		[CCode (cname = "xfw_application_instance_get_name")]
@@ -49,9 +49,9 @@ namespace libxfce4windowing {
 		public int get_pid ();
 		[CCode (cname = "xfw_application_instance_get_windows")]
 		[Version (since = "4.19.1")]
-		public unowned GLib.List<libxfce4windowing.Window> get_windows ();
+		public unowned GLib.List<Xfw.Window> get_windows ();
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwMonitor", type_id = "xfw_monitor_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", type_id = "xfw_monitor_get_type ()")]
 	public abstract class Monitor : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Monitor ();
@@ -96,10 +96,10 @@ namespace libxfce4windowing {
 		public unowned string? get_serial ();
 		[CCode (cname = "xfw_monitor_get_subpixel")]
 		[Version (since = "4.19.4")]
-		public libxfce4windowing.MonitorSubpixel get_subpixel ();
+		public Xfw.MonitorSubpixel get_subpixel ();
 		[CCode (cname = "xfw_monitor_get_transform")]
 		[Version (since = "4.19.4")]
-		public libxfce4windowing.MonitorTransform get_transform ();
+		public Xfw.MonitorTransform get_transform ();
 		[CCode (cname = "xfw_monitor_get_workarea")]
 		[Version (since = "4.19.4")]
 		public Gdk.Rectangle get_workarea ();
@@ -146,64 +146,64 @@ namespace libxfce4windowing {
 		public string serial { owned get; }
 		[NoAccessorMethod]
 		[Version (since = "4.19.4")]
-		public libxfce4windowing.MonitorSubpixel subpixel { get; }
+		public Xfw.MonitorSubpixel subpixel { get; }
 		[NoAccessorMethod]
-		public libxfce4windowing.MonitorTransform transform { get; }
+		public Xfw.MonitorTransform transform { get; }
 		[NoAccessorMethod]
 		[Version (since = "4.19.4")]
 		public uint width_mm { get; }
 		[NoAccessorMethod]
 		public Gdk.Rectangle workarea { owned get; }
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwScreen", type_id = "xfw_screen_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", type_id = "xfw_screen_get_type ()")]
 	public abstract class Screen : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Screen ();
 		[CCode (cname = "xfw_screen_get_active_window")]
-		public unowned libxfce4windowing.Window? get_active_window ();
+		public unowned Xfw.Window? get_active_window ();
 		[CCode (cname = "xfw_screen_get_default")]
-		public static libxfce4windowing.Screen get_default ();
+		public static Xfw.Screen get_default ();
 		[CCode (cname = "xfw_screen_get_monitors")]
 		[Version (since = "4.19.4")]
-		public unowned GLib.List<libxfce4windowing.Monitor>? get_monitors ();
+		public unowned GLib.List<Xfw.Monitor>? get_monitors ();
 		[CCode (cname = "xfw_screen_get_primary_monitor")]
 		[Version (since = "4.19.4")]
-		public unowned libxfce4windowing.Monitor? get_primary_monitor ();
+		public unowned Xfw.Monitor? get_primary_monitor ();
 		[CCode (cname = "xfw_screen_get_seats")]
-		public unowned GLib.List<libxfce4windowing.Seat>? get_seats ();
+		public unowned GLib.List<Xfw.Seat>? get_seats ();
 		[CCode (cname = "xfw_screen_get_show_desktop")]
 		public bool get_show_desktop ();
 		[CCode (cname = "xfw_screen_get_windows")]
-		public unowned GLib.List<libxfce4windowing.Window>? get_windows ();
+		public unowned GLib.List<Xfw.Window>? get_windows ();
 		[CCode (cname = "xfw_screen_get_windows_stacked")]
-		public unowned GLib.List<libxfce4windowing.Window>? get_windows_stacked ();
+		public unowned GLib.List<Xfw.Window>? get_windows_stacked ();
 		[CCode (cname = "xfw_screen_get_workspace_manager")]
-		public unowned libxfce4windowing.WorkspaceManager get_workspace_manager ();
+		public unowned Xfw.WorkspaceManager get_workspace_manager ();
 		[CCode (cname = "xfw_screen_set_show_desktop")]
 		public void set_show_desktop (bool show);
 		[NoAccessorMethod]
-		public libxfce4windowing.Window active_window { owned get; }
+		public Xfw.Window active_window { owned get; }
 		[NoAccessorMethod]
 		public Gdk.Screen gdk_screen { owned get; construct; }
 		[NoAccessorMethod]
 		public bool show_desktop { get; set; }
 		[NoAccessorMethod]
-		public libxfce4windowing.WorkspaceManager workspace_manager { owned get; }
-		public signal void active_window_changed (libxfce4windowing.Window window);
+		public Xfw.WorkspaceManager workspace_manager { owned get; }
+		public signal void active_window_changed (Xfw.Window window);
 		[Version (since = "4.19.4")]
-		public signal void monitor_added (libxfce4windowing.Monitor monitor);
+		public signal void monitor_added (Xfw.Monitor monitor);
 		[Version (since = "4.19.4")]
-		public signal void monitor_removed (libxfce4windowing.Monitor monitor);
+		public signal void monitor_removed (Xfw.Monitor monitor);
 		[Version (since = "4.19.4")]
 		public signal void monitors_changed ();
-		public signal void seat_added (libxfce4windowing.Seat seat);
-		public signal void seat_removed (libxfce4windowing.Seat seat);
-		public signal void window_closed (libxfce4windowing.Window window);
+		public signal void seat_added (Xfw.Seat seat);
+		public signal void seat_removed (Xfw.Seat seat);
+		public signal void window_closed (Xfw.Window window);
 		public signal void window_manager_changed ();
-		public signal void window_opened (libxfce4windowing.Window window);
+		public signal void window_opened (Xfw.Window window);
 		public signal void window_stacking_changed ();
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwSeat", type_id = "xfw_seat_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", type_id = "xfw_seat_get_type ()")]
 	public class Seat : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Seat ();
@@ -212,18 +212,18 @@ namespace libxfce4windowing {
 		[NoAccessorMethod]
 		public string name { owned get; construct; }
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindow", type_id = "xfw_window_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", type_id = "xfw_window_get_type ()")]
 	public abstract class Window : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Window ();
 		[CCode (cname = "xfw_window_activate")]
-		public bool activate (libxfce4windowing.Seat? seat, uint64 event_timestamp) throws GLib.Error;
+		public bool activate (Xfw.Seat seat, uint64 event_timestamp) throws GLib.Error;
 		[CCode (cname = "xfw_window_close")]
 		public bool close (uint64 event_timestamp) throws GLib.Error;
 		[CCode (cname = "xfw_window_get_application")]
-		public unowned libxfce4windowing.Application get_application ();
+		public unowned Xfw.Application get_application ();
 		[CCode (cname = "xfw_window_get_capabilities")]
-		public libxfce4windowing.WindowCapabilities get_capabilities ();
+		public Xfw.WindowCapabilities get_capabilities ();
 		[CCode (array_length = false, array_null_terminated = true, cname = "xfw_window_get_class_ids")]
 		[Version (since = "4.19.3")]
 		public unowned string[] get_class_ids ();
@@ -235,17 +235,17 @@ namespace libxfce4windowing {
 		[CCode (cname = "xfw_window_get_icon")]
 		public unowned Gdk.Pixbuf? get_icon (int size, int scale);
 		[CCode (cname = "xfw_window_get_monitors")]
-		public unowned GLib.List<libxfce4windowing.Monitor>? get_monitors ();
+		public unowned GLib.List<Xfw.Monitor>? get_monitors ();
 		[CCode (cname = "xfw_window_get_name")]
 		public unowned string? get_name ();
 		[CCode (cname = "xfw_window_get_screen")]
-		public unowned libxfce4windowing.Screen get_screen ();
+		public unowned Xfw.Screen get_screen ();
 		[CCode (cname = "xfw_window_get_state")]
-		public libxfce4windowing.WindowState get_state ();
+		public Xfw.WindowState get_state ();
 		[CCode (cname = "xfw_window_get_window_type")]
-		public libxfce4windowing.WindowType get_window_type ();
+		public Xfw.WindowType get_window_type ();
 		[CCode (cname = "xfw_window_get_workspace")]
-		public unowned libxfce4windowing.Workspace? get_workspace ();
+		public unowned Xfw.Workspace? get_workspace ();
 		[CCode (cname = "xfw_window_icon_is_fallback")]
 		[Version (since = "4.19.1")]
 		public bool icon_is_fallback ();
@@ -258,13 +258,13 @@ namespace libxfce4windowing {
 		[CCode (cname = "xfw_window_is_fullscreen")]
 		public bool is_fullscreen ();
 		[CCode (cname = "xfw_window_is_in_viewport")]
-		public bool is_in_viewport (libxfce4windowing.Workspace workspace);
+		public bool is_in_viewport (Xfw.Workspace workspace);
 		[CCode (cname = "xfw_window_is_maximized")]
 		public bool is_maximized ();
 		[CCode (cname = "xfw_window_is_minimized")]
 		public bool is_minimized ();
 		[CCode (cname = "xfw_window_is_on_workspace")]
-		public bool is_on_workspace (libxfce4windowing.Workspace workspace);
+		public bool is_on_workspace (Xfw.Workspace workspace);
 		[CCode (cname = "xfw_window_is_pinned")]
 		public bool is_pinned ();
 		[CCode (cname = "xfw_window_is_shaded")]
@@ -276,7 +276,7 @@ namespace libxfce4windowing {
 		[CCode (cname = "xfw_window_is_urgent")]
 		public bool is_urgent ();
 		[CCode (cname = "xfw_window_move_to_workspace")]
-		public bool move_to_workspace (libxfce4windowing.Workspace workspace) throws GLib.Error;
+		public bool move_to_workspace (Xfw.Workspace workspace) throws GLib.Error;
 		[CCode (cname = "xfw_window_set_above")]
 		public bool set_above (bool is_above) throws GLib.Error;
 		[CCode (cname = "xfw_window_set_below")]
@@ -304,11 +304,12 @@ namespace libxfce4windowing {
 		[CCode (cname = "xfw_window_start_resize")]
 		public bool start_resize () throws GLib.Error;
 		[CCode (cname = "xfw_window_x11_get_xid")]
+		[Version (since = "4.19.3")]
 		public X.Window x11_get_xid ();
 		[NoAccessorMethod]
-		public libxfce4windowing.Application application { owned get; }
+		public Xfw.Application application { owned get; }
 		[NoAccessorMethod]
-		public libxfce4windowing.WindowCapabilities capabilities { get; }
+		public Xfw.WindowCapabilities capabilities { get; }
 		[CCode (array_length = false, array_null_terminated = true)]
 		[NoAccessorMethod]
 		[Version (since = "4.19.3")]
@@ -316,48 +317,48 @@ namespace libxfce4windowing {
 		[NoAccessorMethod]
 		public GLib.Icon gicon { owned get; }
 		[NoAccessorMethod]
-		public void* monitors { get; }
+		public GLib.List<Xfw.Monitor> monitors { owned get; }
 		[NoAccessorMethod]
 		public string name { owned get; }
 		[NoAccessorMethod]
-		public libxfce4windowing.Screen screen { owned get; construct; }
+		public Xfw.Screen screen { owned get; construct; }
 		[NoAccessorMethod]
-		public libxfce4windowing.WindowState state { get; }
+		public Xfw.WindowState state { get; }
 		[NoAccessorMethod]
-		public libxfce4windowing.WindowType type { get; }
+		public Xfw.WindowType type { get; }
 		[NoAccessorMethod]
-		public libxfce4windowing.Workspace workspace { owned get; }
-		public signal void capabilities_changed (libxfce4windowing.WindowCapabilities changed_mask, libxfce4windowing.WindowCapabilities new_state);
+		public Xfw.Workspace workspace { owned get; }
+		public signal void capabilities_changed (Xfw.WindowCapabilities changed_mask, Xfw.WindowCapabilities new_state);
 		[Version (since = "4.19.3")]
 		public signal void class_changed ();
 		public signal void closed ();
 		public signal void geometry_changed ();
 		public signal void icon_changed ();
 		public signal void name_changed ();
-		public signal void state_changed (libxfce4windowing.WindowState changed_mask, libxfce4windowing.WindowState new_state);
-		public signal void type_changed (libxfce4windowing.WindowType old_type);
+		public signal void state_changed (Xfw.WindowState changed_mask, Xfw.WindowState new_state);
+		public signal void type_changed (Xfw.WindowType old_type);
 		public signal void workspace_changed ();
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceGroupInterface", has_type_id = false)]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", has_type_id = false)]
 	[Compact]
 	public class WorkspaceGroupInterface {
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceInterface", has_type_id = false)]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", has_type_id = false)]
 	[Compact]
 	public class WorkspaceInterface {
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceManagerInterface", has_type_id = false)]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", has_type_id = false)]
 	[Compact]
 	public class WorkspaceManagerInterface {
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspace", type_id = "xfw_workspace_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", type_id = "xfw_workspace_get_type ()")]
 	public interface Workspace : GLib.Object {
 		[CCode (cname = "xfw_workspace_activate")]
 		public bool activate () throws GLib.Error;
 		[CCode (cname = "xfw_workspace_assign_to_workspace_group")]
-		public bool assign_to_workspace_group (libxfce4windowing.WorkspaceGroup group) throws GLib.Error;
+		public bool assign_to_workspace_group (Xfw.WorkspaceGroup group) throws GLib.Error;
 		[CCode (cname = "xfw_workspace_get_capabilities")]
-		public libxfce4windowing.WorkspaceCapabilities get_capabilities ();
+		public Xfw.WorkspaceCapabilities get_capabilities ();
 		[CCode (cname = "xfw_workspace_get_geometry")]
 		public unowned Gdk.Rectangle? get_geometry ();
 		[CCode (cname = "xfw_workspace_get_id")]
@@ -369,19 +370,19 @@ namespace libxfce4windowing {
 		[CCode (cname = "xfw_workspace_get_name")]
 		public unowned string get_name ();
 		[CCode (cname = "xfw_workspace_get_neighbor")]
-		public unowned libxfce4windowing.Workspace? get_neighbor (libxfce4windowing.Direction direction);
+		public unowned Xfw.Workspace? get_neighbor (Xfw.Direction direction);
 		[CCode (cname = "xfw_workspace_get_number")]
 		public uint get_number ();
 		[CCode (cname = "xfw_workspace_get_state")]
-		public libxfce4windowing.WorkspaceState get_state ();
+		public Xfw.WorkspaceState get_state ();
 		[CCode (cname = "xfw_workspace_get_workspace_group")]
-		public unowned libxfce4windowing.WorkspaceGroup? get_workspace_group ();
+		public unowned Xfw.WorkspaceGroup? get_workspace_group ();
 		[CCode (cname = "xfw_workspace_remove")]
 		public bool remove () throws GLib.Error;
 		[NoAccessorMethod]
-		public abstract libxfce4windowing.WorkspaceCapabilities capabilities { get; set construct; }
+		public abstract Xfw.WorkspaceCapabilities capabilities { get; set construct; }
 		[NoAccessorMethod]
-		public abstract libxfce4windowing.WorkspaceGroup group { owned get; }
+		public abstract Xfw.WorkspaceGroup group { owned get; }
 		[NoAccessorMethod]
 		public abstract string id { owned get; }
 		[NoAccessorMethod]
@@ -393,78 +394,78 @@ namespace libxfce4windowing {
 		[NoAccessorMethod]
 		public abstract uint number { get; construct; }
 		[NoAccessorMethod]
-		public abstract libxfce4windowing.WorkspaceState state { get; set construct; }
-		public signal void capabilities_changed (libxfce4windowing.WorkspaceCapabilities changed_mask, libxfce4windowing.WorkspaceCapabilities new_capabilities);
-		public signal void group_changed (libxfce4windowing.WorkspaceGroup previous_group);
+		public abstract Xfw.WorkspaceState state { get; set construct; }
+		public signal void capabilities_changed (Xfw.WorkspaceCapabilities changed_mask, Xfw.WorkspaceCapabilities new_capabilities);
+		public signal void group_changed (Xfw.WorkspaceGroup previous_group);
 		public signal void name_changed ();
-		public signal void state_changed (libxfce4windowing.WorkspaceState changed_mask, libxfce4windowing.WorkspaceState new_state);
+		public signal void state_changed (Xfw.WorkspaceState changed_mask, Xfw.WorkspaceState new_state);
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceGroup", type_id = "xfw_workspace_group_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", type_id = "xfw_workspace_group_get_type ()")]
 	public interface WorkspaceGroup : GLib.Object {
 		[CCode (cname = "xfw_workspace_group_create_workspace")]
 		public bool create_workspace (string name) throws GLib.Error;
 		[CCode (cname = "xfw_workspace_group_get_active_workspace")]
-		public unowned libxfce4windowing.Workspace? get_active_workspace ();
+		public unowned Xfw.Workspace? get_active_workspace ();
 		[CCode (cname = "xfw_workspace_group_get_capabilities")]
-		public libxfce4windowing.WorkspaceGroupCapabilities get_capabilities ();
+		public Xfw.WorkspaceGroupCapabilities get_capabilities ();
 		[CCode (cname = "xfw_workspace_group_get_monitors")]
-		public unowned GLib.List<libxfce4windowing.Monitor>? get_monitors ();
+		public unowned GLib.List<Xfw.Monitor>? get_monitors ();
 		[CCode (cname = "xfw_workspace_group_get_workspace_count")]
 		public uint get_workspace_count ();
 		[CCode (cname = "xfw_workspace_group_get_workspace_manager")]
-		public unowned libxfce4windowing.WorkspaceManager get_workspace_manager ();
+		public unowned Xfw.WorkspaceManager get_workspace_manager ();
 		[CCode (cname = "xfw_workspace_group_list_workspaces")]
-		public unowned GLib.List<libxfce4windowing.Workspace>? list_workspaces ();
+		public unowned GLib.List<Xfw.Workspace>? list_workspaces ();
 		[CCode (cname = "xfw_workspace_group_move_viewport")]
 		public bool move_viewport (int x, int y) throws GLib.Error;
 		[CCode (cname = "xfw_workspace_group_set_layout")]
 		public bool set_layout (int rows, int columns) throws GLib.Error;
 		[NoAccessorMethod]
-		public abstract libxfce4windowing.Workspace active_workspace { owned get; }
+		public abstract Xfw.Workspace active_workspace { owned get; }
 		[NoAccessorMethod]
-		public abstract void* monitors { get; }
+		public abstract GLib.List<Xfw.Monitor> monitors { owned get; }
 		[NoAccessorMethod]
-		public abstract libxfce4windowing.Screen screen { owned get; construct; }
+		public abstract Xfw.Screen screen { owned get; construct; }
 		[NoAccessorMethod]
-		public abstract libxfce4windowing.WorkspaceManager workspace_manager { owned get; construct; }
+		public abstract Xfw.WorkspaceManager workspace_manager { owned get; construct; }
 		[NoAccessorMethod]
-		public abstract void* workspaces { get; }
-		public signal void active_workspace_changed (libxfce4windowing.Workspace? previously_active_workspace);
-		public signal void capabilities_changed (libxfce4windowing.WorkspaceGroupCapabilities changed_mask, libxfce4windowing.WorkspaceGroupCapabilities new_capabilities);
-		public signal void monitor_added (libxfce4windowing.Monitor monitor);
-		public signal void monitor_removed (libxfce4windowing.Monitor monitor);
+		public abstract GLib.List<Xfw.Workspace> workspaces { owned get; }
+		public signal void active_workspace_changed (Xfw.Workspace? previously_active_workspace);
+		public signal void capabilities_changed (Xfw.WorkspaceGroupCapabilities changed_mask, Xfw.WorkspaceGroupCapabilities new_capabilities);
+		public signal void monitor_added (Xfw.Monitor monitor);
+		public signal void monitor_removed (Xfw.Monitor monitor);
 		public signal void monitors_changed ();
 		public signal void viewports_changed ();
-		public signal void workspace_added (libxfce4windowing.Workspace workspace);
-		public signal void workspace_removed (libxfce4windowing.Workspace workspace);
+		public signal void workspace_added (Xfw.Workspace workspace);
+		public signal void workspace_removed (Xfw.Workspace workspace);
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceManager", type_id = "xfw_workspace_manager_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", type_id = "xfw_workspace_manager_get_type ()")]
 	public interface WorkspaceManager : GLib.Object {
 		[CCode (cname = "xfw_workspace_manager_list_workspace_groups")]
-		public unowned GLib.List<libxfce4windowing.WorkspaceGroup>? list_workspace_groups ();
+		public unowned GLib.List<Xfw.WorkspaceGroup>? list_workspace_groups ();
 		[CCode (cname = "xfw_workspace_manager_list_workspaces")]
-		public unowned GLib.List<libxfce4windowing.Workspace>? list_workspaces ();
+		public unowned GLib.List<Xfw.Workspace>? list_workspaces ();
 		[NoAccessorMethod]
-		public abstract libxfce4windowing.Screen screen { owned get; construct; }
-		public signal void workspace_created (libxfce4windowing.Workspace workspace);
-		public signal void workspace_destroyed (libxfce4windowing.Workspace workspace);
-		public signal void workspace_group_created (libxfce4windowing.WorkspaceGroup group);
-		public signal void workspace_group_destroyed (libxfce4windowing.WorkspaceGroup group);
+		public abstract Xfw.Screen screen { owned get; construct; }
+		public signal void workspace_created (Xfw.Workspace workspace);
+		public signal void workspace_destroyed (Xfw.Workspace workspace);
+		public signal void workspace_group_created (Xfw.WorkspaceGroup group);
+		public signal void workspace_group_destroyed (Xfw.WorkspaceGroup group);
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwClientType", cprefix = "XFW_CLIENT_TYPE_", has_type_id = false)]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_CLIENT_TYPE_", has_type_id = false)]
 	[Version (since = "4.19.3")]
 	public enum ClientType {
 		APPLICATION,
 		PAGER
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwDirection", cprefix = "XFW_DIRECTION_", type_id = "xfw_direction_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_DIRECTION_", type_id = "xfw_direction_get_type ()")]
 	public enum Direction {
 		UP,
 		DOWN,
 		LEFT,
 		RIGHT
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwMonitorSubpixel", cprefix = "XFW_MONITOR_SUBPIXEL_", type_id = "xfw_monitor_subpixel_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_MONITOR_SUBPIXEL_", type_id = "xfw_monitor_subpixel_get_type ()")]
 	[Version (since = "4.19.4")]
 	public enum MonitorSubpixel {
 		UNKNOWN,
@@ -474,7 +475,7 @@ namespace libxfce4windowing {
 		VRGB,
 		VBGR
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwMonitorTransform", cprefix = "XFW_MONITOR_TRANSFORM_", type_id = "xfw_monitor_transform_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_MONITOR_TRANSFORM_", type_id = "xfw_monitor_transform_get_type ()")]
 	[Version (since = "4.19.4")]
 	public enum MonitorTransform {
 		NORMAL,
@@ -486,7 +487,7 @@ namespace libxfce4windowing {
 		FLIPPED_180,
 		FLIPPED_270
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindowCapabilities", cprefix = "XFW_WINDOW_CAPABILITIES_", type_id = "xfw_window_capabilities_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_WINDOW_CAPABILITIES_", type_id = "xfw_window_capabilities_get_type ()")]
 	[Flags]
 	public enum WindowCapabilities {
 		NONE,
@@ -506,7 +507,7 @@ namespace libxfce4windowing {
 		CAN_UNPLACE_BELOW,
 		CAN_CHANGE_WORKSPACE
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindowState", cprefix = "XFW_WINDOW_STATE_", type_id = "xfw_window_state_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_WINDOW_STATE_", type_id = "xfw_window_state_get_type ()")]
 	[Flags]
 	public enum WindowState {
 		NONE,
@@ -522,7 +523,7 @@ namespace libxfce4windowing {
 		BELOW,
 		URGENT
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindowType", cprefix = "XFW_WINDOW_TYPE_", type_id = "xfw_window_type_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_WINDOW_TYPE_", type_id = "xfw_window_type_get_type ()")]
 	public enum WindowType {
 		NORMAL,
 		DESKTOP,
@@ -533,20 +534,20 @@ namespace libxfce4windowing {
 		UTILITY,
 		SPLASHSCREEN
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindowing", cprefix = "XFW_WINDOWING_", has_type_id = false)]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_WINDOWING_", has_type_id = false)]
 	public enum Windowing {
 		UNKNOWN,
 		X11,
 		WAYLAND
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceCapabilities", cprefix = "XFW_WORKSPACE_CAPABILITIES_", type_id = "xfw_workspace_capabilities_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_WORKSPACE_CAPABILITIES_", type_id = "xfw_workspace_capabilities_get_type ()")]
 	[Flags]
 	public enum WorkspaceCapabilities {
 		NONE,
 		ACTIVATE,
 		REMOVE
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceGroupCapabilities", cprefix = "XFW_WORKSPACE_GROUP_CAPABILITIES_", type_id = "xfw_workspace_group_capabilities_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_WORKSPACE_GROUP_CAPABILITIES_", type_id = "xfw_workspace_group_capabilities_get_type ()")]
 	[Flags]
 	public enum WorkspaceGroupCapabilities {
 		NONE,
@@ -554,7 +555,7 @@ namespace libxfce4windowing {
 		MOVE_VIEWPORT,
 		SET_LAYOUT
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceState", cprefix = "XFW_WORKSPACE_STATE_", type_id = "xfw_workspace_state_get_type ()")]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_WORKSPACE_STATE_", type_id = "xfw_workspace_state_get_type ()")]
 	[Flags]
 	public enum WorkspaceState {
 		NONE,
@@ -563,7 +564,7 @@ namespace libxfce4windowing {
 		HIDDEN,
 		VIRTUAL
 	}
-	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwError", cprefix = "XFW_ERROR_", has_type_id = false)]
+	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cprefix = "XFW_ERROR_", has_type_id = false)]
 	public errordomain Error {
 		UNSUPPORTED,
 		INTERNAL
@@ -580,7 +581,7 @@ namespace libxfce4windowing {
 	public static GLib.Quark error_quark ();
 	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "xfw_set_client_type")]
 	[Version (since = "4.19.3")]
-	public static void set_client_type (libxfce4windowing.ClientType client_type);
+	public static void set_client_type (Xfw.ClientType client_type);
 	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "xfw_windowing_get")]
-	public static libxfce4windowing.Windowing windowing_get ();
+	public static Xfw.Windowing windowing_get ();
 }
