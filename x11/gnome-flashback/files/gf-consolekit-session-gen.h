/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GF_CONSOLEKIT_SESSION_GEN_H__
#define __GF_CONSOLEKIT_SESSION_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.ConsoleKit.Session */

#define GF_TYPE_CONSOLE_KIT_SESSION_GEN (gf_console_kit_session_gen_get_type ())
#define GF_CONSOLE_KIT_SESSION_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_CONSOLE_KIT_SESSION_GEN, GfConsoleKitSessionGen))
#define GF_IS_CONSOLE_KIT_SESSION_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_CONSOLE_KIT_SESSION_GEN))
#define GF_CONSOLE_KIT_SESSION_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GF_TYPE_CONSOLE_KIT_SESSION_GEN, GfConsoleKitSessionGenIface))

struct _GfConsoleKitSessionGen;
typedef struct _GfConsoleKitSessionGen GfConsoleKitSessionGen;
typedef struct _GfConsoleKitSessionGenIface GfConsoleKitSessionGenIface;

struct _GfConsoleKitSessionGenIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_set_locked_hint) (
    GfConsoleKitSessionGen *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean  (*get_active) (GfConsoleKitSessionGen *object);

  gboolean  (*get_locked_hint) (GfConsoleKitSessionGen *object);

  void (*lock) (
    GfConsoleKitSessionGen *object);

  void (*unlock) (
    GfConsoleKitSessionGen *object);

};

GType gf_console_kit_session_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gf_console_kit_session_gen_interface_info (void);
guint gf_console_kit_session_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gf_console_kit_session_gen_complete_set_locked_hint (
    GfConsoleKitSessionGen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gf_console_kit_session_gen_emit_lock (
    GfConsoleKitSessionGen *object);

void gf_console_kit_session_gen_emit_unlock (
    GfConsoleKitSessionGen *object);



/* D-Bus method calls: */
void gf_console_kit_session_gen_call_set_locked_hint (
    GfConsoleKitSessionGen *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gf_console_kit_session_gen_call_set_locked_hint_finish (
    GfConsoleKitSessionGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gf_console_kit_session_gen_call_set_locked_hint_sync (
    GfConsoleKitSessionGen *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean gf_console_kit_session_gen_get_active (GfConsoleKitSessionGen *object);
void gf_console_kit_session_gen_set_active (GfConsoleKitSessionGen *object, gboolean value);

gboolean gf_console_kit_session_gen_get_locked_hint (GfConsoleKitSessionGen *object);
void gf_console_kit_session_gen_set_locked_hint (GfConsoleKitSessionGen *object, gboolean value);


/* ---- */

#define GF_TYPE_CONSOLE_KIT_SESSION_GEN_PROXY (gf_console_kit_session_gen_proxy_get_type ())
#define GF_CONSOLE_KIT_SESSION_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_CONSOLE_KIT_SESSION_GEN_PROXY, GfConsoleKitSessionGenProxy))
#define GF_CONSOLE_KIT_SESSION_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_CONSOLE_KIT_SESSION_GEN_PROXY, GfConsoleKitSessionGenProxyClass))
#define GF_CONSOLE_KIT_SESSION_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_CONSOLE_KIT_SESSION_GEN_PROXY, GfConsoleKitSessionGenProxyClass))
#define GF_IS_CONSOLE_KIT_SESSION_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_CONSOLE_KIT_SESSION_GEN_PROXY))
#define GF_IS_CONSOLE_KIT_SESSION_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_CONSOLE_KIT_SESSION_GEN_PROXY))

typedef struct _GfConsoleKitSessionGenProxy GfConsoleKitSessionGenProxy;
typedef struct _GfConsoleKitSessionGenProxyClass GfConsoleKitSessionGenProxyClass;
typedef struct _GfConsoleKitSessionGenProxyPrivate GfConsoleKitSessionGenProxyPrivate;

struct _GfConsoleKitSessionGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GfConsoleKitSessionGenProxyPrivate *priv;
};

struct _GfConsoleKitSessionGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gf_console_kit_session_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfConsoleKitSessionGenProxy, g_object_unref)
#endif

void gf_console_kit_session_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfConsoleKitSessionGen *gf_console_kit_session_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GfConsoleKitSessionGen *gf_console_kit_session_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gf_console_kit_session_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GfConsoleKitSessionGen *gf_console_kit_session_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GfConsoleKitSessionGen *gf_console_kit_session_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GF_TYPE_CONSOLE_KIT_SESSION_GEN_SKELETON (gf_console_kit_session_gen_skeleton_get_type ())
#define GF_CONSOLE_KIT_SESSION_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GF_TYPE_CONSOLE_KIT_SESSION_GEN_SKELETON, GfConsoleKitSessionGenSkeleton))
#define GF_CONSOLE_KIT_SESSION_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GF_TYPE_CONSOLE_KIT_SESSION_GEN_SKELETON, GfConsoleKitSessionGenSkeletonClass))
#define GF_CONSOLE_KIT_SESSION_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GF_TYPE_CONSOLE_KIT_SESSION_GEN_SKELETON, GfConsoleKitSessionGenSkeletonClass))
#define GF_IS_CONSOLE_KIT_SESSION_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GF_TYPE_CONSOLE_KIT_SESSION_GEN_SKELETON))
#define GF_IS_CONSOLE_KIT_SESSION_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GF_TYPE_CONSOLE_KIT_SESSION_GEN_SKELETON))

typedef struct _GfConsoleKitSessionGenSkeleton GfConsoleKitSessionGenSkeleton;
typedef struct _GfConsoleKitSessionGenSkeletonClass GfConsoleKitSessionGenSkeletonClass;
typedef struct _GfConsoleKitSessionGenSkeletonPrivate GfConsoleKitSessionGenSkeletonPrivate;

struct _GfConsoleKitSessionGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GfConsoleKitSessionGenSkeletonPrivate *priv;
};

struct _GfConsoleKitSessionGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gf_console_kit_session_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GfConsoleKitSessionGenSkeleton, g_object_unref)
#endif

GfConsoleKitSessionGen *gf_console_kit_session_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GF_CONSOLEKIT_SESSION_GEN_H__ */
