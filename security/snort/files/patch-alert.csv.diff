diff -ruN ./snort-2.9.16.orig/src/output-plugins/spo_csv.c ./snort-2.9.16/src/output-plugins/spo_csv.c
--- ./snort-2.9.16.orig/src/output-plugins/spo_csv.c	2020-04-08 07:45:15.000000000 -0400
+++ ./src/output-plugins/spo_csv.c	2020-04-23 15:12:22.000000000 -0400
@@ -66,10 +66,11 @@
 
 #include "snort.h"
 
+#include "active.h"
 #include "sfutil/sf_textlog.h"
 #include "log_text.h"
 
-#define DEFAULT_CSV "timestamp,sig_generator,sig_id,sig_rev,msg,proto,src,srcport,dst,dstport,ethsrc,ethdst,ethlen,tcpflags,tcpseq,tcpack,tcpln,tcpwindow,ttl,tos,id,dgmlen,iplen,icmptype,icmpcode,icmpid,icmpseq"
+#define DEFAULT_CSV "timestamp,sig_generator,sig_id,sig_rev,msg,proto,src,srcport,dst,dstport,ethsrc,ethdst,ethlen,tcpflags,tcpseq,tcpack,tcpln,tcpwindow,ttl,tos,id,dgmlen,iplen,icmptype,icmpcode,icmpid,icmpseq,classification,priority,action,disposition"
 
 #define DEFAULT_FILE  "alert.csv"
 #define DEFAULT_LIMIT (128*M_BYTES)
@@ -90,6 +91,12 @@
     AlertCSVConfig *config;
 } AlertCSVData;
 
+/* Global variable used by Log output and other functions */
+extern OptTreeNode *otn_tmp;
+ 
+/* Used to translate rule action keyword enum to string */
+static const char* s_dispos[] = { "Allow", "CDrop", "WDrop", "Drop", "FDrop" };
+static const char* s_rule_actions[] = { "none", "alert", "drop", "log", "pass", "reject", "sdrop" };
 
 /* list of function prototypes for this preprocessor */
 static void AlertCSVInit(struct _SnortConfig *, char *);
@@ -497,6 +504,39 @@
             {
                 CreateTCPFlagString(p, tcpFlags);
                 TextLog_Print(log, "%s", tcpFlags);
+            }
+        }
+        else if (!strcasecmp("classification",type))
+        {
+            if (otn_tmp != NULL)
+            {
+                if ((otn_tmp->sigInfo.classType != NULL) && (otn_tmp->sigInfo.classType->name != NULL))
+                    TextLog_Print(log, "%s", otn_tmp->sigInfo.classType->name);
+            }
+        }
+        else if (!strcasecmp("priority",type))
+        {
+            if (otn_tmp != NULL)
+                TextLog_Print(log, "%d", otn_tmp->sigInfo.priority);
+        }
+        else if (!strcasecmp("action",type))
+        {
+            if (otn_tmp != NULL)
+            {
+                RuleTreeNode *rtn;
+                if ((rtn = getRuntimeRtnFromOtn(otn_tmp)) != NULL)
+                    TextLog_Print(log, "%s", s_rule_actions[rtn->type]);
+            }
+        }
+        else if (!strcasecmp("disposition",type))
+        {
+            tActiveDrop dispos = Active_GetDisposition();
+            if (p != NULL && dispos >= ACTIVE_ALLOW)
+            {
+                if (dispos > ACTIVE_DROP)
+                    dispos = ACTIVE_DROP;
+
+                TextLog_Print(log, "%s", s_dispos[dispos]);
             }
         }
 
