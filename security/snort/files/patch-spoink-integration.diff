diff -urN snort-2.9.9.0.orig/src/output-plugins/Makefile.am snort-2.9.9.0/src/output-plugins/Makefile.am
--- snort-2.9.9.0.orig/src/output-plugins/Makefile.am	2016-06-07 03:47:49.000000000 -0400
+++ ./src/output-plugins/Makefile.am	2017-08-17 00:08:13.000000000 -0400
@@ -13,7 +13,8 @@
 spo_unified2.c spo_unified2.h \
 spo_log_ascii.c spo_log_ascii.h \
 spo_alert_sf_socket.h spo_alert_sf_socket.c \
-spo_alert_test.c spo_alert_test.h
+spo_alert_test.c spo_alert_test.h \
+spo_pf.h spo_pf.c
 
 if BUILD_BUFFER_DUMP
 libspo_a_SOURCES += \
diff -urN snort-2.9.9.0.orig/src/output-plugins/Makefile.in ./src/output-plugins/Makefile.in
--- snort-2.9.9.0.orig/src/output-plugins/Makefile.in	2016-11-29 01:12:26.000000000 -0500
+++ ./src/output-plugins/Makefile.in	2017-08-17 00:08:13.000000000 -0400
@@ -106,7 +106,8 @@
 	spo_log_tcpdump.c spo_log_tcpdump.h spo_unified2.c \
 	spo_unified2.h spo_log_ascii.c spo_log_ascii.h \
 	spo_alert_sf_socket.h spo_alert_sf_socket.c spo_alert_test.c \
-	spo_alert_test.h spo_log_buffer_dump.c spo_log_buffer_dump.h
+	spo_alert_test.h spo_log_buffer_dump.c spo_log_buffer_dump.h \
+	spo_pf.h spo_pf.c
 @BUILD_BUFFER_DUMP_TRUE@am__objects_1 = spo_log_buffer_dump.$(OBJEXT)
 am_libspo_a_OBJECTS = spo_alert_fast.$(OBJEXT) \
 	spo_alert_full.$(OBJEXT) spo_alert_syslog.$(OBJEXT) \
@@ -114,6 +115,7 @@
 	spo_log_null.$(OBJEXT) spo_log_tcpdump.$(OBJEXT) \
 	spo_unified2.$(OBJEXT) spo_log_ascii.$(OBJEXT) \
 	spo_alert_sf_socket.$(OBJEXT) spo_alert_test.$(OBJEXT) \
+	spo_pf.$(OBJEXT) \
 	$(am__objects_1)
 libspo_a_OBJECTS = $(am_libspo_a_OBJECTS)
 AM_V_P = $(am__v_P_@AM_V@)
@@ -322,6 +324,7 @@
 	spo_log_tcpdump.h spo_unified2.c spo_unified2.h \
 	spo_log_ascii.c spo_log_ascii.h spo_alert_sf_socket.h \
 	spo_alert_sf_socket.c spo_alert_test.c spo_alert_test.h \
+	spo_pf.c spo_pf.h \
 	$(am__append_1)
 all: all-am
 
diff -urN snort-2.9.9.0.orig/src/output-plugins/spo_pf.c ./src/output-plugins/spo_pf.c
--- snort-2.9.9.0.orig/src/output-plugins/spo_pf.c	1969-12-31 19:00:00.000000000 -0500
+++ ./src/output-plugins/spo_pf.c	2017-08-21 18:28:36.000000000 -0400
@@ -0,0 +1,764 @@
+/*
+* Copyright (c) 2017  Bill Meeks
+* Copyright (c) 2012  Ermal Luci
+* Copyright (c) 2006  Antonio Benojar <zz.stalker@gmail.com>
+* Copyright (c) 2005  Antonio Benojar <zz.stalker@gmail.com>
+*
+* Copyright (c) 2003, 2004 Armin Wolfermann:
+* 
+* s2c_pf_block and s2c_pf_unblock functions are based 
+* on Armin's Wolfermann pftabled-1.03 functions.
+*
+* All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions
+* are met:
+*
+* 1. Redistributions of source code must retain the above copyright
+*    notice, this list of conditions and the following disclaimer.
+*
+* 2. Redistributions in binary form must reproduce the above copyright
+*    notice, this list of conditions and the following disclaimer in the
+*    documentation and/or other materials provided with the distribution.
+*
+* THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
+* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+* IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "event.h"
+#include "decode.h"
+#include "plugbase.h"
+#include "spo_plugbase.h"
+#include "parser.h"
+#include "util.h"
+#include "log.h"
+#include "mstring.h"
+
+#include "snort.h"
+
+#include "spo_pf.h"
+
+#ifdef HAVE_STRINGS_H
+#include <strings.h>
+#endif
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <arpa/inet.h>
+#include <errno.h>
+                        
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#include <sys/socket.h>
+#include <sys/stat.h>
+#include <sys/sysctl.h>
+#include <sys/queue.h>
+#include <ctype.h>
+#include <fcntl.h>
+#include <net/if.h>
+#include <net/pfvar.h>
+#include <net/route.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <err.h>
+#include <unistd.h>
+#include <regex.h>
+#include <ifaddrs.h>
+#include <pthread.h>
+
+#define PFDEVICE        "/dev/pf"
+
+enum spblock { SPOINK_BLOCK_SRC, SPOINK_BLOCK_DST, SPOINK_BLOCK_BOTH };
+
+#define WLMAX   4096
+#define MAX_RTMSG_SIZE 2048
+
+struct ipwlist {
+  sfcidr_t waddr;
+  LIST_ENTRY(ipwlist) elem;
+};
+
+LIST_HEAD(wlist_head, ipwlist);
+
+struct iflist {
+  sfaddr_t ifaddr;
+  LIST_ENTRY(iflist) elem;
+};
+
+LIST_HEAD(iflist_head, iflist);
+
+typedef struct _SpoAlertPfData {
+    char *wlfile; 
+    char *pftable; 
+    int fd;
+    int kill;
+    enum spblock block;
+    struct wlist_head head;
+    struct iflist_head iflhead;
+} SpoAlertPfData;
+
+// Used to lock Interface List while it is being updated
+pthread_mutex_t s2c_mutex_lock;
+
+// Used for Interface IP change monitoring thread
+pthread_t s2c_ifmon_thread;
+int s2c_ifmon_thread_created = 0;
+
+void AlertPfInit(struct _SnortConfig *, char *);
+static SpoAlertPfData *ParseAlertPfArgs(char *);
+void AlertPf(Packet *, const char *, void *, Event *);
+void AlertPfCleanExit(int, void *);
+void AlertPfRestart(struct _SnortConfig *, int, void *);
+void *s2c_monitor_iface_changes(void *);
+
+static int s2c_parse_ifam_address(char *, sfaddr_t *, int);
+static void s2c_iflist_maint(sfaddr_t *, struct iflist_head *, u_char);
+static int s2c_pf_init(void);
+static int s2c_pf_block(SpoAlertPfData *, sfaddr_t *);
+static int s2c_pf_intbl(int, char *, int);
+static int s2c_parse_line(char *, FILE*);
+static int s2c_parse_load_wl(FILE*, struct wlist_head*, int);
+static int s2c_parse_search_wl(sfaddr_t *, struct wlist_head, struct iflist_head);
+static int s2c_parse_free_wl(struct wlist_head*);
+static int s2c_init_iface_list(struct iflist_head*);
+static int s2c_free_iface_list(struct iflist_head*);
+ 
+void AlertPfSetup(void)
+{
+    RegisterOutputPlugin("alert_pf", OUTPUT_TYPE_FLAG__ALERT, AlertPfInit);
+    
+    DEBUG_WRAP(DebugMessage(DEBUG_INIT,"Output plugin: AlertPf is setup...\n"););
+}
+
+void AlertPfInit(struct _SnortConfig *sc, char *args)
+{
+    SpoAlertPfData *data;
+    DEBUG_WRAP(DebugMessage(DEBUG_INIT, "Output: AlertPf Initialized\n"););
+    
+    if (pthread_mutex_init(&s2c_mutex_lock, NULL) != 0)
+        FatalError("Threading mutex init failed.  Snort needs to be compiled with '--enable-pthread'.\n");
+  
+    data = ParseAlertPfArgs(args);
+    		
+    DEBUG_WRAP(DebugMessage(DEBUG_INIT,"Linking AlertPf functions to call lists...\n"););
+
+    AddFuncToOutputList(sc, AlertPf, OUTPUT_TYPE__ALERT, data);
+    AddFuncToCleanExitList(AlertPfCleanExit, data);
+#ifdef SNORT_RELOAD
+    AddFuncToReloadList(AlertPfRestart, data);
+#endif
+
+}
+
+void AlertPf(Packet *p, const char *msg, void *arg, Event *event)
+{
+    SpoAlertPfData *data = (SpoAlertPfData *)arg;
+    sfaddr_t *ip;
+    
+    // Must create the interface IP change monitoring thread here instead
+    // of in the AlertPfInit() function because that function is called
+    // before Snort daemonizes.  After daemonizing, any previous threads
+    // would be lost.  Only attempt to create the interface monitoring 
+    // thread once.
+    if (!s2c_ifmon_thread_created) {
+        s2c_init_iface_list(&data->iflhead);
+        if (pthread_create(&s2c_ifmon_thread, NULL, s2c_monitor_iface_changes, &data->iflhead))
+	    ErrorMessage("Failed to create Interface IP Address change monitoring thread for 'alert_pf' output plugin.\n");
+        s2c_ifmon_thread_created = -1;
+    }
+
+    DEBUG_WRAP(DebugMessage(DEBUG_LOG, "spoink block'n!!\n"););
+
+	// Test for valid IP header in packet and
+	// ignore packets with no valid IP information
+	// since we need IP addresses to block.
+	if (!IsIP(p))
+		return;
+
+    switch (data->block) {
+    case SPOINK_BLOCK_DST:
+	ip = GET_DST_IP(p);
+	break;
+    case SPOINK_BLOCK_BOTH:
+	ip = GET_DST_IP(p);
+	if (!s2c_parse_search_wl(ip, data->head, data->iflhead))
+		s2c_pf_block(data, ip);
+	/* CONTINUE */
+    case SPOINK_BLOCK_SRC:
+    default:
+	ip = GET_SRC_IP(p);
+	break;
+    }
+    if (s2c_parse_search_wl(ip, data->head, data->iflhead))
+	return;
+
+    s2c_pf_block(data, ip);
+
+    return;
+}
+
+void *
+s2c_monitor_iface_changes(void *args)
+{
+	int sock = -1;
+	int fib;
+	size_t fib_len = sizeof(fib);
+	ssize_t len;
+	char msg[MAX_RTMSG_SIZE];
+	char ifname[IFNAMSIZ];
+	sfaddr_t addr;
+	struct rt_msghdr *rtm;
+	struct ifa_msghdr *ifam;
+
+	struct iflist_head *head = args;
+
+	sock = socket(PF_ROUTE, SOCK_RAW, 0);
+	if (sock == -1) {
+		ErrorMessage("Failed to create socket(PF_ROUTE): %s.  Dynamic IP changes will not be monitored!\n", strerror(errno));
+		return (NULL);
+	}
+
+	if (sysctlbyname("net.my_fibnum", &fib, &fib_len, NULL, 0) < 0)
+	{  
+		WarningMessage("spo_pf -> Failed to obtain active route table FIB so using all FIBs by default.\n");
+		fib = RT_ALL_FIBS;
+	}
+
+	setsockopt(sock, SOL_SOCKET, SO_SETFIB, (void *)&fib, sizeof(fib));
+
+	// Loop forever receiving and handling kernel RTM messages
+	for (;;) {
+
+		len = read(sock, &msg, sizeof(msg));
+		if (len == -1)
+			continue;
+
+		rtm = (struct rt_msghdr *)msg;
+		if (rtm->rtm_version != RTM_VERSION)
+			continue;
+
+		ifam = (struct ifa_msghdr *)msg;
+
+		switch (rtm->rtm_type) {
+			case RTM_NEWADDR:
+			case RTM_DELADDR:
+				// Make sure all address info we need is present in the message
+				if (ifam->ifam_addrs != 0xb4)
+					continue;
+				break;
+
+			default:
+				continue;
+		}
+
+		// First check that we have a non-zero subnet mask indicating an actual IP address
+		if (!s2c_parse_ifam_address((char *)(ifam + 1), &addr, ifam->ifam_msglen))
+			continue;
+
+		// Get the address that is changing (should be third sockaddr structure in msg)
+		char *aux = (char *)(ifam + 1);
+		int len = ifam->ifam_msglen;
+		aux += SA_SIZE(aux);
+		len -= SA_SIZE(aux);
+		aux += SA_SIZE(aux);
+		len -= SA_SIZE(aux);
+
+		// Make sure we have a valid non-zero IP address in that sockaddr structure
+		if (!s2c_parse_ifam_address(aux, &addr, len))
+			continue;
+
+		// OK, now either delete it from or add it to the interface IP list
+		LogMessage("spo_pf -> Received notification of IP address change on interface %s.", if_indextoname(ifam->ifam_index, ifname));
+		s2c_iflist_maint(&addr, head, ifam->ifam_type);
+	}
+
+	return (NULL);
+}
+
+static int
+s2c_parse_ifam_address(char *cp, sfaddr_t *ip, int len)
+{
+	struct sockaddr *sa;
+
+	if (cp == NULL)
+		return 0;
+
+	sa = (struct sockaddr *)cp;
+
+	if (len == 0 || len < SA_SIZE(sa) || sa->sa_len == 0)
+		return 0;
+
+	switch (sa->sa_family) {
+		case AF_INET:
+			if (((struct sockaddr_in *)(void *)sa)->sin_addr.s_addr == INADDR_ANY)
+				return 0;
+			ip->family = AF_INET;
+			memcpy(sfaddr_get_ip4_ptr(ip), &((struct sockaddr_in *)(void *)sa)->sin_addr.s_addr, sizeof(in_addr_t));
+			return 1;
+
+		case AF_INET6:
+			if (IN6_IS_ADDR_UNSPECIFIED(&((struct sockaddr_in6 *)(void *)sa)->sin6_addr))
+				return 0;
+			ip->family = AF_INET6;
+			memcpy(sfaddr_get_ip6_ptr(ip), &((struct sockaddr_in6 *)(void *)sa)->sin6_addr.s6_addr, sizeof(struct in6_addr));
+			return 1;
+
+		default:
+			break;
+	}
+	return 0;
+}
+
+static void
+s2c_iflist_maint(sfaddr_t *ip, struct iflist_head *head, u_char action) {
+
+	struct iflist *aux1, *aux2;	
+
+	// Validate passed pointers
+	if (ip == NULL || head == NULL)
+		return;
+
+	switch (action) {
+		case RTM_NEWADDR:
+			// Check if new address already in list
+			LIST_FOREACH(aux1, head, elem) {
+				if (sfip_fast_equals_raw(&aux1->ifaddr, ip))
+					return;
+			}
+
+			// Not already in list, so add it
+			pthread_mutex_lock(&s2c_mutex_lock);
+			struct iflist *ifl = SnortAlloc(sizeof(struct iflist));
+			if (ifl == NULL) {
+				ErrorMessage("spo_pf -> s2c_iflist_maint() could not allocate memory for new Interface IP List entry.\n");
+				break;
+			}
+			memcpy(&(ifl->ifaddr), ip, sizeof(sfaddr_t));
+			LIST_INSERT_HEAD(head, ifl, elem);
+			LogMessage("spo_pf -> added address %s to automatic interface IP Pass List.\n", sfip_to_str(ip));
+			break;
+
+		case RTM_DELADDR:
+			// If list is empty, just exit
+			if (LIST_EMPTY(head))
+				return;
+
+			pthread_mutex_lock(&s2c_mutex_lock);
+
+			// Delete the passed IP address only if it is in our IP List
+			LIST_FOREACH_SAFE(aux1, head, elem, aux2) {
+				if (sfip_fast_equals_raw(&aux1->ifaddr, ip)) {
+					LIST_REMOVE(aux1, elem);
+					free(aux1);
+					LogMessage("spo_pf -> deleted address %s from automatic IP Pass List.\n", sfip_to_str(ip));
+					break;
+				}
+			}
+			break;
+
+		default:
+			ErrorMessage("spo_pf -> s2c_iflist_maint() received unrecognized action parameter.\n");
+			return;
+	}
+
+	pthread_mutex_unlock(&s2c_mutex_lock);
+}
+
+static SpoAlertPfData *
+ParseAlertPfArgs(char *args)
+{
+    char **toks;
+    int num_toks;
+    SpoAlertPfData *data;
+    FILE *wl;
+    
+    int res = 0;
+    
+    data = (SpoAlertPfData *)SnortAlloc(sizeof(SpoAlertPfData));
+    
+    if(args == NULL) 
+	FatalError("Unable to load alert_pf args: %s\n", strerror(errno));    
+
+    data->fd = s2c_pf_init();
+    if (data->fd == -1)
+	FatalError("s2c_pf_init() => no pf device\n");
+    
+    DEBUG_WRAP(DebugMessage(DEBUG_LOG,"ParseAlertPfArgs: %s\n", args););
+
+    toks = mSplit(args, ",", 4, &num_toks, 0);
+    
+    if(num_toks <= 1) 
+	FatalError("snort.conf => You must supply TWO arguments for the pf plugin...: %s\n", strerror(errno));
+
+    if(strstr(toks[0], "..") != NULL) 
+	FatalError("snort.conf => File definition contains \"..\".  Do not do that!\n");
+
+    data->wlfile = strdup(toks[0]);
+    wl = fopen(data->wlfile, "r");
+    if (wl == NULL)
+	FatalError("snort.conf => Unable to open whitelist file: %s\n", strerror(errno));
+    res = s2c_parse_load_wl(wl, &data->head, 0);
+    if (res == -1)
+	FatalError("snort.conf => Unable to load whitelist: %s\n", strerror(errno)); 
+    fclose(wl);
+
+    if (toks[1] == NULL)
+     	FatalError("snort.conf => No pf table defined %s\n", strerror(errno));                
+    else
+     	data->pftable = strdup(toks[1]);
+
+    if (s2c_pf_intbl(data->fd, data->pftable, 0) == 0)
+    	FatalError("pf.conf => Table %s does not exist in packet filter: %s\n", data->pftable, strerror(errno));	
+
+    if (toks[2] == NULL)
+	data->block = SPOINK_BLOCK_SRC;
+    else if (!strncmp("src", toks[2], strlen("src")))
+     	data->block = SPOINK_BLOCK_SRC;
+    else if (!strncmp("dst", toks[2], strlen("dst")))
+     	data->block = SPOINK_BLOCK_DST;
+    else if (!strncmp("both", toks[2], strlen("both")))
+     	data->block = SPOINK_BLOCK_BOTH;
+    else
+     	data->block = SPOINK_BLOCK_SRC;
+
+    if (toks[3] == NULL)
+     	data->kill = 0;
+    else if (!strncmp("kill", toks[3], strlen("kill")))
+	data->kill = 1;
+    else
+     	data->kill = 0;
+
+    return data;
+}
+
+void AlertPfCleanExit(int signal, void *arg)
+{
+    SpoAlertPfData *data = (SpoAlertPfData *)arg;
+    DEBUG_WRAP(DebugMessage(DEBUG_LOG,"AlertPfCleanExit\n"););
+ 
+    s2c_parse_free_wl(&data->head);
+    s2c_free_iface_list(&data->iflhead);
+    pthread_mutex_destroy(&s2c_mutex_lock);
+    close(data->fd);
+
+    if(data->pftable != NULL)
+	free(data->pftable);
+    if(data->wlfile != NULL)
+	free(data->wlfile);
+    free(data);
+}
+
+void AlertPfRestart(struct _SnortConfig *sc, int signal, void *arg)
+{
+    SpoAlertPfData *data = (SpoAlertPfData *)arg;
+    FILE *wl; int res;
+
+    DEBUG_WRAP(DebugMessage(DEBUG_LOG,"AlertPfRestart\n"););
+    
+    s2c_parse_free_wl(&data->head);
+    s2c_free_iface_list(&data->iflhead);
+    if (data->wlfile == NULL)
+	FatalError("Missing whitelist file from arguments");
+    wl = fopen(data->wlfile, "r");
+    if (wl == NULL)
+	FatalError("snort.conf => Unable to open whitelist file: %s\n", strerror(errno));
+    res = s2c_parse_load_wl(wl, &data->head, 0);
+    if (res == -1)
+    	FatalError("snort.conf => Unable to load whitelist: %s\n", strerror(errno)); 
+    fclose(wl);
+    s2c_init_iface_list(&data->iflhead);
+}
+
+static int
+s2c_pf_init(void)
+{
+	return(open(PFDEVICE, O_RDWR));
+}
+
+static int
+s2c_pf_block(SpoAlertPfData *data, sfaddr_t *net_addr) 
+{ 
+	struct pfioc_table io; 
+    	struct pfr_table table; 
+      	struct pfr_addr addr; 
+
+	if (data->fd < 0)
+		data->fd = s2c_pf_init();
+	if (data->fd == -1) {
+		ErrorMessage("s2c_pf_init() => no pf device\n");
+		return -1;
+	}
+
+        memset(&io,    0x00, sizeof(struct pfioc_table)); 
+        memset(&table, 0x00, sizeof(struct pfr_table)); 
+        memset(&addr,  0x00, sizeof(struct pfr_addr)); 
+            
+        strlcpy(table.pfrt_name, data->pftable, PF_TABLE_NAME_SIZE); 
+        
+        net_addr->family == AF_INET ? memcpy(&addr.pfra_ip4addr.s_addr, sfaddr_get_ip4_ptr(net_addr), sizeof(in_addr_t)) : memcpy(&addr.pfra_ip6addr, sfaddr_get_ip6_ptr(net_addr), sizeof(struct in6_addr));
+
+        addr.pfra_af  = net_addr->family; 
+        addr.pfra_net = net_addr->family == AF_INET ? 32 : 128;; 
+
+        io.pfrio_table  = table; 
+        io.pfrio_buffer = &addr; 
+        io.pfrio_esize  = sizeof(addr); 
+        io.pfrio_size   = 1; 
+        
+        if (ioctl(data->fd, DIOCRADDADDRS, &io))
+		ErrorMessage("s2c_pf_block() => ioctl() DIOCRADDADDRS: %s\n", strerror(errno));
+ 
+	if (data->kill) {
+		struct pfioc_state_kill psk;
+
+		memset(&psk, 0, sizeof(psk));
+		memset(&psk.psk_src.addr.v.a.mask, 0xff, sizeof(psk.psk_src.addr.v.a.mask));
+		psk.psk_af = net_addr->family;
+		if (psk.psk_af == AF_INET)
+			memcpy(&psk.psk_src.addr.v.a.addr.v4.s_addr, sfaddr_get_ip4_ptr(net_addr), sizeof(in_addr_t));
+		else if (psk.psk_af == AF_INET6)
+			memcpy(&psk.psk_src.addr.v.a.addr.v6, sfaddr_get_ip6_ptr(net_addr), sizeof(struct in6_addr));
+		else
+			return (-1);
+
+		/* XXX: Should ignore? */
+		ioctl(data->fd, DIOCKILLSTATES, &psk);
+
+		memset(&psk, 0, sizeof(psk));
+		memset(&psk.psk_dst.addr.v.a.mask, 0xff, sizeof(psk.psk_dst.addr.v.a.mask));
+		psk.psk_af = net_addr->family;
+		if (psk.psk_af == AF_INET)
+			memcpy(&psk.psk_dst.addr.v.a.addr.v4.s_addr, sfaddr_get_ip4_ptr(net_addr), sizeof(in_addr_t));
+		else if (psk.psk_af == AF_INET6)
+			memcpy(&psk.psk_dst.addr.v.a.addr.v6, sfaddr_get_ip6_ptr(net_addr), sizeof(struct in6_addr));
+		else
+			return (-1);
+
+		/* XXX: Should ignore? */
+		ioctl(data->fd, DIOCKILLSTATES, &psk);
+
+	}
+        return(0); 
+}
+
+static int
+s2c_pf_intbl(int dev, char * tablename, int debug)
+{
+	int i;
+	struct pfioc_table io;
+	struct pfr_table *table_aux = NULL;
+
+	memset(&io, 0x00, sizeof(struct pfioc_table));
+	
+	io.pfrio_buffer = table_aux;
+	io.pfrio_esize  = sizeof(struct pfr_table);
+	io.pfrio_size   = 0;
+	
+	if(ioctl(dev, DIOCRGETTABLES, &io))  
+		FatalError("s2c_pf_intbl() => ioctl() DIOCRGETTABLES: %s\n", strerror(errno));
+	
+	table_aux = (struct pfr_table*)malloc(sizeof(struct pfr_table)*io.pfrio_size);
+	
+	if (table_aux == NULL) 
+		FatalError("s2c_pf_intbl() => malloc(): %s\n", strerror(errno));
+	
+	io.pfrio_buffer = table_aux;
+	io.pfrio_esize = sizeof(struct pfr_table);
+	
+	if(ioctl(dev, DIOCRGETTABLES, &io)) 
+		FatalError("s2c_pf_intbl() => ioctl() DIOCRGETTABLES: %s\n", strerror(errno));
+
+	for(i=0; i< io.pfrio_size; i++) {
+		if (!strcmp(table_aux[i].pfrt_name, tablename))
+			return 1;	
+	}
+	
+	return 0;
+}
+
+static int
+s2c_parse_line(char buf[WLMAX], FILE* wfile)
+{
+	static char     next_ch = '\n';
+        int             i = 0;
+
+	if (feof(wfile))
+	        return (0);
+
+	do {
+		next_ch = fgetc(wfile);
+		if (i < WLMAX)
+	        	buf[i++] = next_ch;
+	} while (!feof(wfile) && next_ch != '\n');
+	if (i >= WLMAX)
+		return (-1);
+
+	buf[--i] = '\0';
+
+	return (1);
+}
+
+static int
+s2c_parse_load_wl(FILE *wfile, struct wlist_head *head, int debug)
+{
+	struct ipwlist *ipw = NULL;
+	struct flock lock;
+	char cad[WLMAX];
+	int ret;
+
+	if (wfile == NULL)
+		FatalError("s2c_parse_load_wl() => Unable to open whitelist file: %s\n", strerror(errno));
+
+	memset(&lock, 0x00, sizeof(struct flock));
+	lock.l_type = F_RDLCK;
+	fcntl(fileno(wfile), F_SETLKW, &lock);
+
+	LIST_INIT(head);
+
+	memset(cad, 0, WLMAX);
+	while((ret = s2c_parse_line(cad, wfile)) != 0) {
+		if (ret == 1) {
+			ipw = malloc(sizeof(struct ipwlist));
+			if (ipw == NULL) {
+				ErrorMessage("Could not allocate memory");
+				continue;
+			}
+			if (sfip_pton(cad, &ipw->waddr) != SFIP_SUCCESS) {
+				ErrorMessage("Non ip(%s) parameter passed with white list, skipping...", cad);
+				free(ipw);
+				continue;
+			} // else
+				//printf("IP(%s) parsed succesfuly", cad);
+
+			LIST_INSERT_HEAD(head, ipw, elem);		
+		} else 
+			ErrorMessage("Errors with line(%s) passed with white list, skipping...", cad);
+	}
+
+	lock.l_type = F_UNLCK;
+	fcntl(fileno(wfile), F_SETLKW, &lock);
+
+	return (0);
+}
+
+static int
+s2c_parse_search_wl(sfaddr_t *ip, struct wlist_head wl, struct iflist_head ifl)
+{
+	struct iflist *aux1;	
+	struct ipwlist *aux2;	
+
+	// Check and do not block firewall interface IP addresses
+	LIST_FOREACH(aux1, &ifl, elem) {
+		if (sfip_fast_equals_raw(&aux1->ifaddr, ip))
+			return 1;
+	}
+
+	// Now check the user-supplied PASS LIST (whitelist) IP addresses
+	LIST_FOREACH(aux2, &wl, elem) {
+		if (sfip_contains(&aux2->waddr, ip) == SFIP_CONTAINS)
+			return 1;
+	}
+
+	return (0);
+}
+
+static int
+s2c_parse_free_wl(struct wlist_head *wl)
+{
+	struct ipwlist *aux, *aux2;
+	for(aux = LIST_FIRST(wl); aux != NULL; aux = aux2) {
+		aux2 = LIST_NEXT(aux, elem);
+		LIST_REMOVE(aux, elem);		
+		free(aux);
+	}
+	if (LIST_EMPTY(wl)) { 
+		return (1);
+	} else { 
+		ErrorMessage("s2c_parse_free_wl() => Unable to free whitelist: %s\n", strerror(errno));
+		return (0);
+	}
+}
+
+static int
+s2c_init_iface_list(struct iflist_head *head)
+{
+	struct iflist *ifl = NULL;
+	struct ifaddrs *ifap, *ifa;
+	sfaddr_t addr;
+
+	LIST_INIT(head);
+
+	if (getifaddrs(&ifap) == 0) {
+		pthread_mutex_lock(&s2c_mutex_lock);
+		for (ifa = ifap; ifa != NULL; ifa = ifa->ifa_next) {
+			if (ifa->ifa_addr) {
+				switch (ifa->ifa_addr->sa_family) {
+					case AF_INET:
+						addr.family = AF_INET;
+						memcpy(sfaddr_get_ip4_ptr(&addr), &((struct sockaddr_in *)ifa->ifa_addr)->sin_addr.s_addr, sizeof(in_addr_t));
+						LogMessage("spo_pf -> adding firewall interface %s IPv4 address %s to automatic interface IP Pass List.\n", ifa->ifa_name, sfip_to_str(&addr));
+						break;
+
+					case AF_INET6:
+						addr.family = AF_INET6;
+						memcpy(sfaddr_get_ip6_ptr(&addr), &((struct sockaddr_in6 *)ifa->ifa_addr)->sin6_addr.s6_addr, sizeof(struct in6_addr));
+						LogMessage("spo_pf -> adding firewall interface %s IPv6 address %s to automatic interface IP Pass List.\n", ifa->ifa_name, sfip_to_str(&addr));
+						break;
+
+					default:
+						continue;
+				}
+
+				// Get here only for IPv4 or IPv6 addresses, so store in list
+				ifl = SnortAlloc(sizeof(struct iflist));
+				if (ifl == NULL) {
+					ErrorMessage("Could not allocate memory for Interface List entry.\n");
+					continue;
+				}
+				memcpy(&(ifl->ifaddr), &addr, sizeof(sfaddr_t));
+				LIST_INSERT_HEAD(head, ifl, elem);		
+			}
+		}
+		pthread_mutex_unlock(&s2c_mutex_lock);
+		freeifaddrs(ifap);
+	}
+	else {
+		WarningMessage("Warning -- Failed to get list of firewall interface addresses for auto-whitelisting.\n");
+		return -1;
+	}
+
+	return 0;
+}
+
+static int
+s2c_free_iface_list(struct iflist_head *head)
+{
+	struct iflist *aux, *aux2;
+	pthread_mutex_lock(&s2c_mutex_lock);
+	for(aux = LIST_FIRST(head); aux != NULL; aux = aux2) {
+		aux2 = LIST_NEXT(aux, elem);
+		LIST_REMOVE(aux, elem);		
+		free(aux);
+	}
+	pthread_mutex_unlock(&s2c_mutex_lock);
+	if (LIST_EMPTY(head)) { 
+		return (1);
+	} else { 
+		ErrorMessage("s2c_free_iface_list() => Unable to free interface list: %s\n", strerror(errno));
+		return (0);
+	}
+}
+
diff -urN snort-2.9.9.0.orig/src/output-plugins/spo_pf.h ./src/output-plugins/spo_pf.h
--- snort-2.9.9.0.orig/src/output-plugins/spo_pf.h	1969-12-31 19:00:00.000000000 -0500
+++ ./src/output-plugins/spo_pf.h	2017-08-17 17:37:44.000000000 -0400
@@ -0,0 +1,42 @@
+/*
+* Copyright (c) 2017  Bill Meeks
+* Copyright (c) 2012  Ermal Luci
+* Copyright (c) 2006  Antonio Benojar <zz.stalker@gmail.com>
+* Copyright (c) 2005  Antonio Benojar <zz.stalker@gmail.com>
+*
+* Copyright (c) 2003, 2004 Armin Wolfermann:
+* 
+* s2c_pf_block and s2c_pf_unblock functions are based 
+* on Armin's Wolfermann pftabled-1.03 functions.
+*
+* All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions
+* are met:
+*
+* 1. Redistributions of source code must retain the above copyright
+*    notice, this list of conditions and the following disclaimer.
+*
+* 2. Redistributions in binary form must reproduce the above copyright
+*    notice, this list of conditions and the following disclaimer in the
+*    documentation and/or other materials provided with the distribution.
+*
+* THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
+* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+* IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+#ifndef __SPO_PF_H__
+#define __SPO_PF_H__
+
+void AlertPfSetup(void);
+
+#endif 
diff -urN snort-2.9.9.0.orig/src/plugbase.c ./src/plugbase.c
--- snort-2.9.9.0.orig/src/plugbase.c	2016-06-07 03:47:47.000000000 -0400
+++ ./src/plugbase.c	2017-08-17 00:08:13.000000000 -0400
@@ -123,6 +123,7 @@
 #include "output-plugins/spo_csv.h"
 #include "output-plugins/spo_log_null.h"
 #include "output-plugins/spo_log_ascii.h"
+#include "output-plugins/spo_pf.h"
 #include "output-plugins/spo_unified2.h"
 
 #ifdef DUMP_BUFFER
@@ -1585,6 +1586,7 @@
     LogTcpdumpSetup();
     AlertFastSetup();
     AlertFullSetup();
+    AlertPfSetup();
 #ifndef WIN32
     /* Win32 doesn't support AF_UNIX sockets */
     AlertUnixSockSetup();
