--- src/libcharon/plugins/kernel_pfkey/kernel_pfkey_ipsec.c.orig	2018-01-09 09:39:07 UTC
+++ src/libcharon/plugins/kernel_pfkey/kernel_pfkey_ipsec.c
@@ -530,8 +530,8 @@ static policy_entry_t *create_policy_entry(traffic_sel
 	uint16_t port;
 	uint8_t proto;
 
-	src_ts->to_subnet(src_ts, &policy->src.net, &policy->src.mask);
-	dst_ts->to_subnet(dst_ts, &policy->dst.net, &policy->dst.mask);
+	src_ts->to_subnetnat(src_ts, &policy->src.net, &policy->src.mask, dir);
+	dst_ts->to_subnetnat(dst_ts, &policy->dst.net, &policy->dst.mask, dir);
 
 	/* src or dest proto may be "any" (0), use more restrictive one */
 	proto = max(src_ts->get_protocol(src_ts), dst_ts->get_protocol(dst_ts));
--- src/libcharon/plugins/stroke/stroke_config.c.orig	2018-02-15 14:10:14 UTC
+++ src/libcharon/plugins/stroke/stroke_config.c
@@ -978,6 +978,7 @@ static void add_ts(private_stroke_config_t *this,
 {
 	traffic_selector_t *ts;
 	bool ts_added = FALSE;
+	char *subnet, *pos;
 
 	if (end->subnets)
 	{
@@ -1011,8 +1012,23 @@ static void add_ts(private_stroke_config_t *this,
 			}
 			else
 			{
+				pos = strchr(subnet, '|');
+				if (pos)
+					*(pos++) = '\0';
+
 				ts = traffic_selector_create_from_cidr(subnet, proto,
 													   from_port, to_port);
+
+				/* Deal with a specified NAT address as part of config as address|NATaddress */
+				if (pos) {
+					traffic_selector_t *tmpts;
+
+					tmpts = traffic_selector_add_nat_from_subnet(ts, pos);
+					if (tmpts == NULL) {
+						DBG1(DBG_CFG, "invalid NAT subnet: %s, skipped", pos);
+						ts->destroy(ts);
+					}
+				}
 			}
 			if (ts)
 			{
@@ -1028,9 +1044,25 @@ static void add_ts(private_stroke_config_t *this,
 	}
 	if (!ts_added)
 	{
+		pos = strchr(end->address, '|');
+		if (pos)
+			*(pos++) = '\0';
+
 		ts = traffic_selector_create_dynamic(end->protocol,
 											 end->from_port, end->to_port);
-		child_cfg->add_traffic_selector(child_cfg, local, ts);
+
+		/* Deal with a specified NAT address as part of config as address|NATaddress */
+		if (pos) {
+			traffic_selector_t *tmpts;
+
+			tmpts = traffic_selector_add_nat_from_subnet(ts, pos);
+			if (tmpts == NULL) {
+				DBG1(DBG_CFG, "invalid NAT subnet: %s, skipped", pos);
+				ts->destroy(ts);
+			} else
+				child_cfg->add_traffic_selector(child_cfg, local, ts);
+		} else
+			child_cfg->add_traffic_selector(child_cfg, local, ts);
 	}
 }
 
--- src/libcharon/plugins/vici/vici_config.c.orig	2019-12-05 02:24:57 UTC
+++ src/libcharon/plugins/vici/vici_config.c
@@ -751,7 +752,22 @@ CALLBACK(parse_ts, bool,
 	}
 	else
 	{
+		protoport = strchr(buf, '|');
+		if (protoport)
+			*(protoport++) = '\0';
+
 		ts = traffic_selector_create_from_cidr(buf, proto, from, to);
+
+		/* Deal with a specified NAT address as part of config as address|NATaddress */
+		if (protoport) {
+			traffic_selector_t *tmpts;
+
+			tmpts = traffic_selector_add_nat_from_subnet(ts, protoport);
+			if (tmpts == NULL) {
+				DBG1(DBG_CFG, "invalid NAT subnet: %s, skipped", protoport);
+				ts->destroy(ts);
+			}
+		}
 	}
 	if (!ts)
 	{
--- src/libstrongswan/selectors/traffic_selector.c.orig	2017-08-27 17:45:53 UTC
+++ src/libstrongswan/selectors/traffic_selector.c
@@ -80,6 +80,21 @@ struct private_traffic_selector_t {
 	char to[IPV6_LEN];
 
 	/**
+	 * subnet size in CIDR notation, 255 means a non-subnet address range
+	 */
+	uint8_t natnetbits;
+
+	/**
+	 * begin of address range, network order
+	 */
+	char natfrom[IPV6_LEN];
+
+	/**
+	 * end of address range, network order
+	 */
+	char natto[IPV6_LEN];
+
+	/**
 	 * begin of port range
 	 */
 	uint16_t from_port;
@@ -93,6 +108,29 @@ struct private_traffic_selector_t {
 /**
  * calculate the "to"-address for the "from" address and a subnet size
  */
+static void calc_natrange(private_traffic_selector_t *this, uint8_t netbits)
+{
+	size_t len;
+	int bytes, bits;
+	uint8_t mask;
+
+	this->natnetbits = netbits;
+
+	len   = TS_IP_LEN(this);
+	bytes = (netbits + 7)/8;
+	bits  = (bytes * 8) - netbits;
+	mask  = bits ? (1 << bits) - 1 : 0;
+
+	memcpy(this->natto, this->natfrom, bytes);
+	memset(this->natfrom + bytes, 0x00, len - bytes);
+	memset(this->natto   + bytes, 0xff, len - bytes);
+	this->natfrom[bytes-1] &= ~mask;
+	this->natto[bytes-1]   |=  mask;
+}
+
+/**
+ * calculate the "to"-address for the "from" address and a subnet size
+ */
 static void calc_range(private_traffic_selector_t *this, uint8_t netbits)
 {
 	size_t len;
@@ -116,6 +154,53 @@ static void calc_range(private_traffic_selector_t *thi
 /**
  * calculate the subnet size from the "to" and "from" addresses
  */
+static uint8_t calc_natnetbits(private_traffic_selector_t *this)
+{
+	int byte, bit;
+	uint8_t netbits;
+	size_t size = TS_IP_LEN(this);
+	bool prefix = TRUE;
+
+	/* a perfect match results in a single address with a /32 or /128 netmask */
+	netbits = (size * 8);
+	this->natnetbits = netbits;
+
+	/* go through all bits of the addresses, beginning in the front.
+	 * as long as they are equal, the subnet gets larger
+	 */
+	for (byte = 0; byte < size; byte++)
+	{
+		for (bit = 7; bit >= 0; bit--)
+		{
+			uint8_t bitmask = 1 << bit;
+
+			if (prefix)
+			{
+				if ((bitmask & this->natfrom[byte]) != (bitmask & this->natto[byte]))
+				{
+					/* store the common prefix which might be a true subnet */
+					netbits = (7 - bit) + (byte * 8);
+					this->natnetbits = netbits;
+					prefix = FALSE;
+				}
+			}
+			else
+			{
+				if ((bitmask & this->natfrom[byte]) || !(bitmask & this->natto[byte]))
+				{
+					this->natnetbits = NON_SUBNET_ADDRESS_RANGE;
+					return netbits;  /* return a pseudo subnet */
+
+				}
+			}
+		}
+	}
+	return netbits;  /* return a true subnet */
+}
+
+/**
+ * calculate the subnet size from the "to" and "from" addresses
+ */
 static uint8_t calc_netbits(private_traffic_selector_t *this)
 {
 	int byte, bit;
@@ -207,8 +292,8 @@ int traffic_selector_printf_hook(printf_hook_data_t *d
 	private_traffic_selector_t *this = *((private_traffic_selector_t**)(args[0]));
 	linked_list_t *list = *((linked_list_t**)(args[0]));
 	enumerator_t *enumerator;
-	char from_str[INET6_ADDRSTRLEN] = "";
-	char to_str[INET6_ADDRSTRLEN] = "";
+	char from_str[INET6_ADDRSTRLEN] = "", natfrom_str[INET6_ADDRSTRLEN] = "";
+	char to_str[INET6_ADDRSTRLEN] = "", natto_str[INET6_ADDRSTRLEN] = "";
 	char *serv_proto = NULL, *sep = "";
 	bool has_proto, has_ports;
 	size_t written = 0, len;
@@ -244,26 +329,34 @@ int traffic_selector_printf_hook(printf_hook_data_t *d
 		if (this->type == TS_IPV4_ADDR_RANGE)
 		{
 			inet_ntop(AF_INET, &this->from, from_str, sizeof(from_str));
+			if (this->natnetbits)
+				inet_ntop(AF_INET, &this->natfrom, natfrom_str, sizeof(natfrom_str));
 		}
 		else
 		{
 			inet_ntop(AF_INET6, &this->from, from_str, sizeof(from_str));
+			if (this->natnetbits)
+				inet_ntop(AF_INET6, &this->natfrom, natfrom_str, sizeof(natfrom_str));
 		}
 		if (this->netbits == NON_SUBNET_ADDRESS_RANGE)
 		{
 			if (this->type == TS_IPV4_ADDR_RANGE)
 			{
 				inet_ntop(AF_INET, &this->to, to_str, sizeof(to_str));
+				if (this->natnetbits)
+					inet_ntop(AF_INET, &this->natto, natto_str, sizeof(natto_str));
 			}
 			else
 			{
 				inet_ntop(AF_INET6, &this->to, to_str, sizeof(to_str));
+				if (this->natnetbits)
+					inet_ntop(AF_INET6, &this->natto, natto_str, sizeof(natto_str));
 			}
-			written += print_in_hook(data, "%s..%s", from_str, to_str);
+			written += print_in_hook(data, "%s|%s..%s|%s", from_str, natfrom_str, to_str, natto_str);
 		}
 		else
 		{
-			written += print_in_hook(data, "%s/%d", from_str, this->netbits);
+			written += print_in_hook(data, "%s/%d|%s/%d", from_str, this->netbits, natfrom_str, this->natnetbits);
 		}
 	}
 
@@ -423,6 +516,12 @@ METHOD(traffic_selector_t, get_subset, traffic_selecto
 	memcpy(subset->from, from, size);
 	memcpy(subset->to, to, size);
 	calc_netbits(subset);
+	if (this->natnetbits) {
+		subset->natnetbits = this->natnetbits;
+		memcpy(subset->natfrom, this->natfrom, size);
+		memcpy(subset->natto, this->natto, size);
+		calc_natnetbits(subset);
+	}
 
 	return &subset->public;
 }
@@ -619,6 +718,58 @@ METHOD(traffic_selector_t, to_subnet, bool,
 	return this->netbits != NON_SUBNET_ADDRESS_RANGE;
 }
 
+METHOD(traffic_selector_t, to_subnetnat, bool,
+	private_traffic_selector_t *this, host_t **net, uint8_t *mask, policy_dir_t dir)
+{
+	if (this->natnetbits && dir == POLICY_OUT) {
+		/* there is no way to do this cleanly, as the address range may
+		 * be anything else but a subnet. We use from_addr as subnet
+		 * and try to calculate a usable subnet mask.
+		 */
+		int family, non_zero_bytes;
+		uint16_t port = 0;
+		chunk_t net_chunk;
+
+		*mask = (this->natnetbits == NON_SUBNET_ADDRESS_RANGE) ? calc_natnetbits(this)
+											: this->natnetbits;
+
+		switch (this->type)
+		{
+			case TS_IPV4_ADDR_RANGE:
+				family = AF_INET;
+				net_chunk.len = IPV4_LEN;
+				break;
+			case TS_IPV6_ADDR_RANGE:
+				family = AF_INET6;
+				net_chunk.len = IPV6_LEN;
+				break;
+			default:
+				/* unreachable */
+				return FALSE;
+		}
+
+		net_chunk.ptr = malloc(net_chunk.len);
+		memset(net_chunk.ptr, 0x00, net_chunk.len);
+		if (*mask)
+		{
+			non_zero_bytes = (*mask + 7) / 8;
+			memcpy(net_chunk.ptr, this->natfrom, non_zero_bytes);
+			net_chunk.ptr[non_zero_bytes-1] &= 0xFF << (8 * non_zero_bytes - *mask);
+		}
+
+		if (this->to_port == this->from_port)
+		{
+			port = this->to_port;
+		}
+
+		*net = host_create_from_chunk(family, net_chunk, port);
+		chunk_free(&net_chunk);
+
+		return this->natnetbits != NON_SUBNET_ADDRESS_RANGE;
+	} else
+		return this->public.to_subnet((traffic_selector_t *)this, net, mask);
+}
+
 METHOD(traffic_selector_t, clone_, traffic_selector_t*,
 	private_traffic_selector_t *this)
 {
@@ -628,10 +779,13 @@ METHOD(traffic_selector_t, clone_, traffic_selector_t*
 	clone = traffic_selector_create(this->protocol, this->type,
 									this->from_port, this->to_port);
 	clone->netbits = this->netbits;
+	clone->natnetbits = this->natnetbits;
 	clone->dynamic = this->dynamic;
 
 	memcpy(clone->from, this->from, len);
 	memcpy(clone->to, this->to, len);
+	memcpy(clone->natfrom, this->natfrom, len);
+	memcpy(clone->natto, this->natto, len);
 	return &clone->public;
 }
 
@@ -801,6 +955,54 @@ traffic_selector_t *traffic_selector_create_from_subne
 	return &this->public;
 }
 
+
+traffic_selector_t *traffic_selector_add_nat_from_subnet(traffic_selector_t *this, char *string)
+{
+	private_traffic_selector_t *ts = (private_traffic_selector_t *)this;
+	chunk_t from;
+	host_t *net;
+	int bits;
+
+	/* Just as safety belt */
+	if (ts == NULL)
+		return NULL;
+
+	net = host_create_from_subnet(string, &bits);
+	if (!net)
+		return NULL;
+
+	/* Error checking */
+	switch (net->get_family(net))
+	{
+		case AF_INET:
+#if 0
+			if (ts->type != TS_IPV4_ADDR_RANGE) {
+				net->destroy(net);
+				return NULL;
+			}
+			break;
+#endif
+		case AF_INET6:
+#if 0
+			if (ts->type != TS_IPV6_ADDR_RANGE) {
+				net->destroy(net);
+				return NULL;
+			}
+#endif
+			break;
+		default:
+			net->destroy(net);
+			return NULL;
+	}
+	from = net->get_address(net);
+	memcpy(ts->natfrom, from.ptr, from.len);
+	bits = min(bits, ts->type == TS_IPV4_ADDR_RANGE ? 32 : 128);
+	calc_natrange(ts, bits);
+	net->destroy(net);
+
+	return &ts->public;
+}
+
 /*
  * see header
  */
@@ -902,6 +1104,7 @@ static private_traffic_selector_t *traffic_selector_cr
 			.includes = _includes,
 			.set_address = _set_address,
 			.to_subnet = _to_subnet,
+			.to_subnetnat = _to_subnetnat,
 			.clone = _clone_,
 			.hash = _hash,
 			.destroy = _destroy,
--- src/libstrongswan/selectors/traffic_selector.h.orig	2017-03-19 18:27:23 UTC
+++ src/libstrongswan/selectors/traffic_selector.h
@@ -28,6 +28,7 @@ typedef struct traffic_selector_t traffic_selector_t;
 
 #include <library.h>
 #include <networking/host.h>
+#include <ipsec/ipsec_types.h>
 
 /**
  * Traffic selector types.
@@ -229,6 +230,7 @@ struct traffic_selector_t {
 	 * @return			TRUE if traffic selector matches exactly to the subnet
 	 */
 	bool (*to_subnet)(traffic_selector_t *this, host_t **net, uint8_t *mask);
+	bool (*to_subnetnat) (traffic_selector_t *this, host_t **net, uint8_t *mask, policy_dir_t dir);
 
 	/**
 	 * Create a hash value for the traffic selector.
@@ -382,6 +384,8 @@ traffic_selector_t *traffic_selector_create_from_rfc37
 traffic_selector_t *traffic_selector_create_from_subnet(
 							host_t *net, uint8_t netbits, uint8_t protocol,
 							uint16_t from_port, uint16_t to_port);
+
+traffic_selector_t *traffic_selector_add_nat_from_subnet(traffic_selector_t *, char *);
 
 /**
  * Create a traffic selector for host-to-host cases.
