--- src/3rdparty/chromium/base/strings/safe_sprintf_unittest.cc.orig	2018-11-13 18:25:11 UTC
+++ src/3rdparty/chromium/base/strings/safe_sprintf_unittest.cc
@@ -730,6 +730,7 @@ TEST(SafeSPrintfTest, EmbeddedNul) {
 }
 
 TEST(SafeSPrintfTest, EmitNULL) {
+/* Avoid compiler error: http://pastebin.com/1edWUE84
   char buf[40];
 #if defined(__GNUC__)
 #pragma GCC diagnostic push
@@ -741,6 +742,7 @@ TEST(SafeSPrintfTest, EmitNULL) {
   EXPECT_EQ("0x0", std::string(buf));
   EXPECT_EQ(6, SafeSPrintf(buf, "%s", NULL));
   EXPECT_EQ("<NULL>", std::string(buf));
+*/
 #if defined(__GCC__)
 #pragma GCC diagnostic pop
 #endif
--- src/3rdparty/chromium/base/threading/thread_local_storage_unittest.cc.orig	2018-11-13 18:25:11 UTC
+++ src/3rdparty/chromium/base/threading/thread_local_storage_unittest.cc
@@ -86,7 +86,7 @@ class ThreadLocalStorageRunner : public DelegateSimple
 void ThreadLocalStorageCleanup(void *value) {
   int *ptr = reinterpret_cast<int*>(value);
   // Destructors should never be called with a NULL.
-  ASSERT_NE(reinterpret_cast<int*>(NULL), ptr);
+  ASSERT_NE(static_cast<int*>(NULL), ptr);
   if (*ptr == kFinalTlsValue)
     return;  // We've been called enough times.
   ASSERT_LT(kFinalTlsValue, *ptr);
--- src/3rdparty/chromium/media/audio/audio_output_proxy_unittest.cc.orig	2018-11-13 18:25:11 UTC
+++ src/3rdparty/chromium/media/audio/audio_output_proxy_unittest.cc
@@ -410,7 +410,7 @@ class AudioOutputProxyTest : public testing::Test {
     // |stream| is closed at this point. Start() should reopen it again.
     EXPECT_CALL(manager(), MakeAudioOutputStream(_, _, _))
         .Times(2)
-        .WillRepeatedly(Return(reinterpret_cast<AudioOutputStream*>(NULL)));
+        .WillRepeatedly(Return(static_cast<AudioOutputStream*>(NULL)));
 
     EXPECT_CALL(callback_, OnError()).Times(2);
 
