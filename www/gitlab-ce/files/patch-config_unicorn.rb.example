--- config/unicorn.rb.example.orig	2020-02-21 15:14:12 UTC
+++ config/unicorn.rb.example
@@ -33,12 +33,12 @@ worker_processes 3
 
 # Help ensure your application will always spawn in the symlinked
 # "current" directory that Capistrano sets up.
-working_directory "/home/git/gitlab" # available in 0.94.0+
+working_directory "%%PREFIX%%/www/gitlab-ce" # available in 0.94.0+
 
 # Listen on both a Unix domain socket and a TCP port.
 # If you are load-balancing multiple Unicorn masters, lower the backlog
 # setting to e.g. 64 for faster failover.
-listen "/home/git/gitlab/tmp/sockets/gitlab.socket", :backlog => 1024
+listen "%%PREFIX%%/www/gitlab-ce/tmp/sockets/gitlab.socket", :backlog => 1024
 listen "127.0.0.1:8080", :tcp_nopush => true
 
 # nuke workers after 30 seconds instead of 60 seconds (the default)
@@ -59,13 +59,13 @@ listen "127.0.0.1:8080", :tcp_nopush => true
 timeout 60
 
 # feel free to point this anywhere accessible on the filesystem
-pid "/home/git/gitlab/tmp/pids/unicorn.pid"
+pid "%%PREFIX%%/www/gitlab-ce/tmp/pids/unicorn.pid"
 
 # By default, the Unicorn logger will write to stderr.
 # Additionally, some applications/frameworks log to stderr or stdout,
 # so prevent them from going to /dev/null when daemonized here:
-stderr_path "/home/git/gitlab/log/unicorn.stderr.log"
-stdout_path "/home/git/gitlab/log/unicorn.stdout.log"
+stderr_path "%%PREFIX%%/www/gitlab-ce/log/unicorn.stderr.log"
+stdout_path "%%PREFIX%%/www/gitlab-ce/log/unicorn.stdout.log"
 
 # Save memory by sharing the application code among multiple Unicorn workers
 # with "preload_app true". See:
@@ -81,8 +81,8 @@ preload_app true
 # fast LAN.
 check_client_connection false
 
-require_relative "/home/git/gitlab/lib/gitlab/cluster/lifecycle_events"
-require_relative "/home/git/gitlab/lib/gitlab/log_timestamp_formatter.rb"
+require_relative "%%PREFIX%%/www/gitlab-ce/lib/gitlab/cluster/lifecycle_events"
+require_relative "%%PREFIX%%/www/gitlab-ce/lib/gitlab/log_timestamp_formatter.rb"
 
 before_exec do |server|
   # Signal application hooks that we're about to restart
