commit ec31e574ed81
Author: Petr Sumbera <petr.sumbera@oracle.com>
Date:   Mon Jun 26 06:54:12 2017 -0700

    Bug 1376268 - Fix Spidermonkey build with no jit backend; r=bbouvier
    
    MozReview-Commit-ID: DgANwcf8oUh
    
    --HG--
    extra : amend_source : 1c3efbe975e93ee996e6b84d3fc073781740156d
---
 js/src/jit/ExecutableAllocator.h      | 2 +-
 js/src/jit/none/MacroAssembler-none.h | 8 ++++----
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git js/src/jit/ExecutableAllocator.h js/src/jit/ExecutableAllocator.h
index 570a25ff0dc3..d106b31ba906 100644
--- js/src/jit/ExecutableAllocator.h
+++ js/src/jit/ExecutableAllocator.h
@@ -219,7 +219,7 @@ class ExecutableAllocator
 
     static void poisonCode(JSRuntime* rt, JitPoisonRangeVector& ranges);
 
-#if defined(JS_CODEGEN_X86) || defined(JS_CODEGEN_X64) || defined(JS_SIMULATOR_ARM64)
+#if defined(JS_CODEGEN_X86) || defined(JS_CODEGEN_X64) || defined(JS_SIMULATOR_ARM64) || defined(JS_CODEGEN_NONE)
     static void cacheFlush(void*, size_t)
     {
     }
diff --git js/src/jit/none/MacroAssembler-none.h js/src/jit/none/MacroAssembler-none.h
index 9a40ec8a8f64..71ddca8b9f1c 100644
--- js/src/jit/none/MacroAssembler-none.h
+++ js/src/jit/none/MacroAssembler-none.h
@@ -48,7 +48,7 @@ static constexpr Register WasmIonExitRegE1 { Registers::invalid_reg };
 
 static constexpr Register WasmIonExitRegReturnData { Registers::invalid_reg };
 static constexpr Register WasmIonExitRegReturnType { Registers::invalid_reg };
-static constexpr Register WasmIonExitTlsReg = { Registers::invalid_reg };
+static constexpr Register WasmIonExitTlsReg { Registers::invalid_reg };
 static constexpr Register WasmIonExitRegD0 { Registers::invalid_reg };
 static constexpr Register WasmIonExitRegD1 { Registers::invalid_reg };
 static constexpr Register WasmIonExitRegD2 { Registers::invalid_reg };
@@ -153,6 +153,8 @@ class Assembler : public AssemblerShared
 
     static uintptr_t GetPointer(uint8_t*) { MOZ_CRASH(); }
 
+    static bool HasRoundInstruction(RoundingMode) { return false; }
+
     void verifyHeapAccessDisassembly(uint32_t begin, uint32_t end,
                                      const Disassembler::HeapAccess& heapAccess)
     {
@@ -196,9 +198,7 @@ class MacroAssemblerNone : public Assembler
     static bool SupportsSimd() { return false; }
     static bool SupportsUnalignedAccesses() { return false; }
 
-    static bool HasRoundInstruction(RoundingMode) { return false; }
-
-    void executableCopy(void*, bool) { MOZ_CRASH(); }
+    void executableCopy(void*, bool = true) { MOZ_CRASH(); }
     void copyJumpRelocationTable(uint8_t*) { MOZ_CRASH(); }
     void copyDataRelocationTable(uint8_t*) { MOZ_CRASH(); }
     void copyPreBarrierTable(uint8_t*) { MOZ_CRASH(); }
