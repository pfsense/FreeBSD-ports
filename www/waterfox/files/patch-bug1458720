commit ba437f08694c
Author: David Keeler <dkeeler@mozilla.com>
Date:   Wed May 2 16:42:51 2018 -0700

    Bug 1458720 - Make RunOnAllContentParents runnable from any thread. r=Ehsan, r=jcj, a=RyanVM
    
    In bug 1215723 RunOnAllContentParents was added to the DataStorage
    implementation so we could make more security state information available in
    child processes. It uses IPC APIs, which in general are not thread-safe. We need
    to make sure that these APIs are only accessed on the main thread, which means
    we have to copy any necessary data, create a runnable, and send it to the main
    thread to do the actual work. Note that the IPC APIs are async, so this dispatch
    can be async as well.
    
    MozReview-Commit-ID: HwkgSX1iORU
    
    --HG--
    extra : source : 38e60f49b316258b72f8453387049c16d2005867
---
 security/manager/ssl/DataStorage.cpp | 34 +++++++++++++++++++++++-----------
 1 file changed, 23 insertions(+), 11 deletions(-)

diff --git security/manager/ssl/DataStorage.cpp security/manager/ssl/DataStorage.cpp
index e93f7f50a0b39..00e43f298aae3 100644
--- security/manager/ssl/DataStorage.cpp
+++ security/manager/ssl/DataStorage.cpp
@@ -707,6 +707,8 @@ DataStorage::MaybeEvictOneEntry(DataStorageType aType,
   }
 }
 
+// NB: Because this may cross a thread boundary, any variables captured by the
+// Functor must be captured by copy and not by reference.
 template <class Functor>
 static
 void
@@ -716,11 +718,16 @@ RunOnAllContentParents(Functor func)
     return;
   }
   using dom::ContentParent;
-  nsTArray<ContentParent*> parents;
-  ContentParent::GetAll(parents);
-  for (auto& parent: parents) {
-    func(parent);
-  }
+
+  nsCOMPtr<nsIRunnable> r = NS_NewRunnableFunction("RunOnAllContentParents",
+  [func] () {
+    nsTArray<ContentParent*> parents;
+    ContentParent::GetAll(parents);
+    for (auto& parent: parents) {
+      func(parent);
+    }
+  });
+  MOZ_ALWAYS_SUCCEEDS(NS_DispatchToMainThread(r));
 }
 
 nsresult
@@ -749,12 +756,14 @@ DataStorage::Put(const nsCString& aKey, const nsCString& aValue,
     return rv;
   }
 
-  RunOnAllContentParents([&](dom::ContentParent* aParent) {
+  nsString filename(mFilename);
+  RunOnAllContentParents(
+  [aKey, aValue, aType, filename] (dom::ContentParent* aParent) {
     DataStorageItem item;
     item.key() = aKey;
     item.value() = aValue;
     item.type() = aType;
-    Unused << aParent->SendDataStoragePut(mFilename, item);
+    Unused << aParent->SendDataStoragePut(filename, item);
   });
 
   return NS_OK;
@@ -788,8 +797,10 @@ DataStorage::Remove(const nsCString& aKey, DataStorageType aType)
     Unused << AsyncSetTimer(lock);
   }
 
-  RunOnAllContentParents([&](dom::ContentParent* aParent) {
-    Unused << aParent->SendDataStorageRemove(mFilename, aKey, aType);
+  nsString filename(mFilename);
+  RunOnAllContentParents(
+  [filename, aKey, aType] (dom::ContentParent* aParent) {
+    Unused << aParent->SendDataStorageRemove(filename, aKey, aType);
   });
 }
 
@@ -914,8 +925,9 @@ DataStorage::Clear()
     }
   }
 
-  RunOnAllContentParents([&](dom::ContentParent* aParent) {
-    Unused << aParent->SendDataStorageClear(mFilename);
+  nsString filename(mFilename);
+  RunOnAllContentParents([filename] (dom::ContentParent* aParent) {
+    Unused << aParent->SendDataStorageClear(filename);
   });
 
   return NS_OK;
