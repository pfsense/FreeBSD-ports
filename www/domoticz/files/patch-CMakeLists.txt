--- CMakeLists.txt.orig	2025-10-13 11:42:57.000000000 +0200
+++ CMakeLists.txt	2025-10-23 12:10:14.143268000 +0200
@@ -417,7 +417,6 @@
 
 # Target
 set(
-domoticztester_SRCS
 main/stdafx.cpp
 main/Helper.cpp
 main/CmdLine.cpp
@@ -434,9 +433,6 @@
 
 #main/IFTTT.cpp
 
-add_executable(domoticztester ${domoticztester_SRCS})
-set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
-
 #
 # LUA
 #
@@ -535,7 +531,6 @@
 
 # explicitly say that the executable depends on the revisiontag
 add_dependencies(domoticz revisiontag)
-add_dependencies(domoticztester revisiontag)
 
 TEST_BIG_ENDIAN(BIGENDIAN)
 IF(${BIGENDIAN})
@@ -555,7 +550,6 @@
   set(JSONCPP_WITH_PKGCONFIG_SUPPORT OFF CACHE BOOL "Enable jsoncpp pkgconfig support" FORCE)
   add_subdirectory (extern/jsoncpp EXCLUDE_FROM_ALL)
   target_link_libraries(domoticz jsoncpp_static)
-  target_link_libraries(domoticztester jsoncpp_static)
   INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/extern/jsoncpp/include)
 ELSE(USE_BUILTIN_JSONCPP)
   find_package(PkgConfig)
@@ -565,9 +559,6 @@
     target_include_directories(domoticz PRIVATE ${JSONCPP_INCLUDE_DIRS})
     target_link_directories(domoticz PRIVATE ${JSONCPP_LIBRARY_DIRS})
     target_link_libraries(domoticz ${JSONCPP_LIBRARIES})
-    target_include_directories(domoticztester PRIVATE ${JSONCPP_INCLUDE_DIRS})
-    target_link_directories(domoticztester PRIVATE ${JSONCPP_LIBRARY_DIRS})
-    target_link_libraries(domoticztester ${JSONCPP_LIBRARIES})
   ELSE(JSONCPP_FOUND)
     MESSAGE(FATAL_ERROR "JSONCPP not found on your system! try 'sudo apt-get install jsoncpp-dev'")
   ENDIF(JSONCPP_FOUND)
@@ -580,7 +571,6 @@
   option(DOCUMENTATION "Build documentation?" OFF)
   add_subdirectory (extern/mosquitto EXCLUDE_FROM_ALL)
   target_link_libraries(domoticz libmosquitto_static)
-  target_link_libraries(domoticztester libmosquitto_static)
   INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/extern/mosquitto/include)
   INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/extern/mosquitto/lib)
 ELSE(USE_BUILTIN_MQTT)
@@ -599,7 +589,6 @@
   MESSAGE(STATUS "Using builtin SQLite library")
   add_subdirectory (extern/sqlite-amalgamation EXCLUDE_FROM_ALL)
   target_link_libraries(domoticz SQLite3)
-  target_link_libraries(domoticztester SQLite3)
   INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/extern/sqlite-amalgamation)
 ELSE(USE_BUILTIN_SQLITE)
   find_package(SQLite3)
@@ -608,7 +597,6 @@
     MESSAGE(STATUS "SQLite includes found at: ${SQLite3_INCLUDE_DIRS}")
     INCLUDE_DIRECTORIES(${SQLite3_INCLUDE_DIRS})
     target_link_libraries(domoticz ${SQLite3_LIBRARIES})
-    target_link_libraries(domoticztester ${SQLite3_LIBRARIES})
   ELSE(SQLite3_FOUND)
     MESSAGE(FATAL_ERROR "SQLite3 not found on your system! try 'sudo apt-get install libsqlite3-dev'")
   ENDIF(SQLite3_FOUND)
@@ -618,7 +606,6 @@
 IF(USE_BUILTIN_MINIZIP)
   add_subdirectory (extern/minizip EXCLUDE_FROM_ALL)
   target_link_libraries(domoticz minizip)
-  target_link_libraries(domoticztester minizip)
   INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/extern/minizip)
 ELSE(USE_BUILTIN_MINIZIP)
   find_package(PkgConfig)
@@ -628,9 +615,6 @@
     target_include_directories(domoticz PRIVATE ${MINIZIP_INCLUDE_DIRS})
     target_link_directories(domoticz PRIVATE ${MINIZIP_LIBRARY_DIRS})
     target_link_libraries(domoticz ${MINIZIP_LIBRARIES})
-    target_include_directories(domoticztester PRIVATE ${MINIZIP_INCLUDE_DIRS})
-    target_link_directories(domoticztester PRIVATE ${MINIZIP_LIBRARY_DIRS})
-    target_link_libraries(domoticztester ${MINIZIP_LIBRARIES})
   ELSE(MINIZIP_FOUND)
     MESSAGE(FATAL_ERROR "MINIZIP not found on your system! try 'sudo apt-get install minizip-dev'")
   ENDIF(MINIZIP_FOUND)
@@ -658,7 +642,6 @@
   find_library(MD_LIBRARY NAMES md)
   IF(MD_LIBRARY)
     target_link_libraries(domoticz ${MD_LIBRARY})
-    target_link_libraries(domoticztester ${MD_LIBRARY})
   ENDIF(MD_LIBRARY)
 ELSE()
   message(STATUS "OPENSSL library found at: ${OPENSSL_LIBRARIES}")
@@ -666,7 +649,6 @@
   add_definitions(-DWITH_TLS)
   include_directories(${OPENSSL_INCLUDE_DIR})
   target_link_libraries(domoticz ${OPENSSL_LIBRARIES})
-  target_link_libraries(domoticztester ${OPENSSL_LIBRARIES})
 ENDIF()
 
 #
@@ -804,7 +786,6 @@
 endif()
 
 target_link_libraries(domoticz ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} ${MINIZIP_LIBRARIES} ${RESOLV_LIBRARIES} ${CURL_LIBRARIES} pthread ${MQTT_LIBRARIES} ${LUA_LIBRARIES} ${CMAKE_DL_LIBS} ${TELLDUS_LIBRARIES})
-target_link_libraries(domoticztester ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} ${MINIZIP_LIBRARIES} ${RESOLV_LIBRARIES} ${CURL_LIBRARIES} pthread ${MQTT_LIBRARIES} ${LUA_LIBRARIES} ${CMAKE_DL_LIBS} ${TELLDUS_LIBRARIES})
 
 IF(EXECINFO_LIBRARIES)
   target_link_libraries(domoticz ${EXECINFO_LIBRARIES})
@@ -813,13 +794,11 @@
 find_library(LIBRT rt)
 if(LIBRT)
   target_link_libraries(domoticz -lrt)
-  target_link_libraries(domoticztester -lrt)
 endif()
 
 IF(USE_PRECOMPILED_HEADER)
   message(STATUS "Using precompiled headers")
   target_precompile_headers(domoticz PRIVATE "main/stdafx.h")
-  target_precompile_headers(domoticztester PRIVATE "main/stdafx.h")
 ENDIF(USE_PRECOMPILED_HEADER)
 
 IF(CMAKE_COMPILER_IS_GNUCXX)
