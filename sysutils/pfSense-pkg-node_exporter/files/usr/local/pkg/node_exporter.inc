<?php
/*
 * node_exporter.inc
 *
 * part of pfSense (https://www.pfsense.org)
 * Copyright (c) 2009-2020 Rubicon Communications, LLC (Netgate)
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require_once("config.inc");
require_once("functions.inc");
require_once("util.inc");
require_once("service-utils.inc");

const NODE_EXPORTER_CONFIG_FILE = "/usr/local/etc/rc.conf.d/node_exporter";
const NODE_EXPORTER_RCFILE = "/usr/local/etc/rc.d/node_exporter.sh";
const NODE_EXPORTER_SHARE_DIR = "/usr/local/share/pfSense-pkg-node_exporter";
const NODE_EXPORTER_RCFILE_UPSTREAM = NODE_EXPORTER_SHARE_DIR . "/node_exporter.sh";
const NODE_EXPORTER_DEFAULT_COLLECTORS = "boottime,cpu,exec,filesystem,loadavg,meminfo,netdev,textfile,time";
const NODE_EXPORTER_TEXTFILE_CRONTASK = "/usr/bin/nice -n20 /usr/local/bin/python2.7 ".NODE_EXPORTER_SHARE_DIR."/interface-collector.py";

function node_exporter_write_config($node_exporter_config) {
	$txt = "# This file is generated by the pfSense node_exporter package.\n";
	$txt .= "# Do not edit this file, it will be overwritten automatically.\n";
	$txt .= "\n";
	$txt .= "node_exporter_enable=\"YES\"\n"; // If it had been NO, this function isn't called, so fine to hardcode

	$listen_addr = get_interface_ip($node_exporter_config["listen_iface"]);
	$listen_port = $node_exporter_config["listen_port"] ?: "9100";
	$txt .= "node_exporter_listen_address=\"{$listen_addr}:{$listen_port}\"\n";

	$collectorTxt = "";
	foreach (explode(",", $node_exporter_config["collectors"]) as $collector) {
		$collectorTxt .= " --collector.".$collector;
	}

	$txt .= "node_exporter_args=\"{$collectorTxt} {$node_exporter_config['extra_flags']}\"\n";

	if (!file_put_contents(NODE_EXPORTER_CONFIG_FILE, $txt)) {
		log_error("ERROR: Could not open {" . NODE_EXPORTER_CONFIG_FILE . "} for writing");
		exit;
	}
}
function node_exporter_sync_config() {
	global $config;
	if (is_service_running('node_exporter')) {
		log_error("Stopping service node_exporter");
		stop_service('node_exporter');
	}

	$node_exporter_config = &$config['installedpackages']['nodeexporter']['config'][0];
	if ($node_exporter_config['enable'] !== 'on') {
		unlink_if_exists(NODE_EXPORTER_RCFILE);
		return;
	}
	/* Write the config file */
	node_exporter_write_config($node_exporter_config);

	/* Copy the rc script from the upstream one we bundle */
	if (!copy(NODE_EXPORTER_RCFILE_UPSTREAM, NODE_EXPORTER_RCFILE)) {
		log_error("ERROR: Could not copy {" . NODE_EXPORTER_RCFILE_UPSTREAM . "} to {" . NODE_EXPORTER_RCFILE . "}");
		exit;
	}
	if (!chmod(NODE_EXPORTER_RCFILE, 0755)) {
		log_error("ERROR: Could not set permissions on {" . NODE_EXPORTER_RCFILE . "}");
		exit;
	}

	if (platform_booting()) {
		return;
	}
	log_error("Starting service node_exporter");
	start_service('node_exporter');
}

function node_exporter_install_command() {
	global $config;

	// If instaing for the first time, set up the default config
	$node_exporter_config = &$config['installedpackages']['nodeexporter']['config'][0];
	if (!is_array($node_exporter_config)) {
		$node_exporter_config = [
			"collectors" => NODE_EXPORTER_DEFAULT_COLLECTORS,
			"listen_port" => "9100",
			"extra_flags" => "--log.level=warn",
		];
	}

	// Set up textfile cron job
	install_cron_job(NODE_EXPORTER_TEXTFILE_CRONTASK, true, "*");

	node_exporter_sync_config();
}

function node_exporter_deinstall_command() {
	if (is_service_running('node_exporter')) {
		log_error("Stopping service node_exporter");
		stop_service('node_exporter');
	}
	unlink_if_exists(NODE_EXPORTER_RCFILE);
	unlink_if_exists(NODE_EXPORTER_CONFIG_FILE);

	// Set up textfile cron job
	install_cron_job(NODE_EXPORTER_TEXTFILE_CRONTASK, false);
}

function node_exporter_validate_form($post, &$input_errors) {
	if (empty($post['listen_iface'])) {
		$input_errors[] = gettext('You must select an interface to listen to');
	}

	if (!is_port($post['listen_port'])) {
		$input_errors[] = gettext('You must enter a valid port number in the \'Listen Port\' field');
	}
}

?>
