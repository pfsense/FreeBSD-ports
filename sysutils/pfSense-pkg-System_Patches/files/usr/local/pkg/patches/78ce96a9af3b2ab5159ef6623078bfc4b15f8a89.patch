diff --git a/src/etc/inc/openvpn.inc b/src/etc/inc/openvpn.inc
index 6f0acf936c..7ae0d72d6d 100644
--- a/src/etc/inc/openvpn.inc
+++ b/src/etc/inc/openvpn.inc
@@ -1327,8 +1327,12 @@ function openvpn_reconfigure($mode, $settings) {
 	/* Data encryption cipher support.
 	 * If it is not set, assume enabled since that is OpenVPN's default.
 	 * Note that diabling this is now deprecated and will be removed in a future version of OpenVPN */
-	if ($settings['ncp_enable'] == "disabled") {
-		$conf .= "ncp-disable\n";
+	if (($settings['ncp_enable'] == "disabled") ||
+	    ($settings['mode'] == "p2p_shared_key")) {
+		if ($settings['mode'] != "p2p_shared_key") {
+			/* Do not include this option for shared key as it is redundant. */
+			$conf .= "ncp-disable\n";
+		}
 		$conf .= "cipher {$fbcipher}\n";
 	} else {
 		$conf .= "data-ciphers " . str_replace(',', ':', openvpn_build_data_cipher_list($settings['data_ciphers'], $fbcipher)) . "\n";
diff --git a/src/usr/local/www/vpn_openvpn_client.php b/src/usr/local/www/vpn_openvpn_client.php
index 8ae6c2e4a0..f1c7167796 100644
--- a/src/usr/local/www/vpn_openvpn_client.php
+++ b/src/usr/local/www/vpn_openvpn_client.php
@@ -48,6 +48,9 @@ $a_cert = &$config['cert'];
 init_config_arr(array('crl'));
 $a_crl = &$config['crl'];
 
+$proxy_auth_types = array('none' => gettext('none'), 'basic' => gettext('basic'), 'ntlm' => gettext('ntlm'));
+$certlist = openvpn_build_cert_list(true);
+
 if (isset($_REQUEST['id']) && is_numericint($_REQUEST['id'])) {
 	$id = $_REQUEST['id'];
 }
@@ -227,6 +230,25 @@ if ($_POST['save']) {
 		$pconfig['custom_options'] = $a_client[$id]['custom_options'];
 	}
 
+	if (!empty($pconfig['mode']) &&
+	    !array_key_exists($pconfig['mode'], $openvpn_client_modes)) {
+		$input_errors[] = gettext("The selected mode is not valid.");
+	}
+
+	if (!empty($pconfig['dev_mode']) &&
+	    !array_key_exists($pconfig['dev_mode'], $openvpn_dev_mode)) {
+		$input_errors[] = gettext("The selected Device Mode is not valid.");
+	}
+	if (!empty($pconfig['protocol']) &&
+	    !array_key_exists($pconfig['protocol'], $openvpn_prots)) {
+		$input_errors[] = gettext("The selected Protocol is not valid.");
+	}
+
+	if (!empty($pconfig['interface']) &&
+	    !array_key_exists($pconfig['interface'], openvpn_build_if_list())) {
+		$input_errors[] = gettext("The selected Interface is not valid.");
+	}
+
 	$cipher_validation_list = array_keys(openvpn_get_cipherlist());
 	if (!in_array($pconfig['data_ciphers_fallback'], $cipher_validation_list)) {
 		$input_errors[] = gettext("The selected Fallback Data Encryption Algorithm is not valid.");
@@ -237,6 +259,17 @@ if ($_POST['save']) {
 		$input_errors[] = gettext("Too many Data Encryption Algorithms have been selected.");
 	}
 
+	if (!empty($pconfig['data_ciphers']) && is_array($pconfig['data_ciphers'])) {
+		foreach ($pconfig['data_ciphers'] as $dc) {
+			if (!in_array(trim($dc), $cipher_validation_list)) {
+				$input_errors[] = gettext("One or more of the selected Data Encryption Algorithms is not valid.");
+			}
+		}
+	} else {
+		/* If data_ciphers is not empty and also not an array, it can't be valid. */
+		$input_errors[] = gettext("The Data Encryption Algorithm list is not valid.");
+	}
+
 	list($iv_iface, $iv_ip) = explode ("|", $pconfig['interface']);
 	if (is_ipaddrv4($iv_ip) && (stristr($pconfig['protocol'], "6") !== false)) {
 		$input_errors[] = gettext("Protocol and IP address families do not match. An IPv6 protocol and an IPv4 IP address cannot be selected.");
@@ -256,8 +289,42 @@ if ($_POST['save']) {
 		}
 	}
 
+	if (!empty($pconfig['digest']) &&
+	    !array_key_exists($pconfig['digest'], openvpn_get_digestlist())) {
+		$input_errors[] = gettext("The selected Auth Digest Algorithm is not valid.");
+	}
+
+	if (!empty($pconfig['engine']) &&
+	    !array_key_exists($pconfig['engine'], openvpn_get_engines())) {
+		$input_errors[] = gettext("The selected Hardware Crypto engine is not valid.");
+	}
+
+	if (!empty($pconfig['allow_compression']) &&
+	    !array_key_exists($pconfig['allow_compression'], $openvpn_allow_compression)) {
+		$input_errors[] = gettext("The selected Allow Compression value is not valid.");
+	}
+
+	if (!empty($pconfig['compression']) &&
+	    !array_key_exists($pconfig['compression'], $openvpn_compression_modes)) {
+		$input_errors[] = gettext("The selected Compression is not valid.");
+	}
+
 	if ($pconfig['mode'] != "p2p_shared_key") {
 		$tls_mode = true;
+		if (!empty($pconfig['caref']) &&
+		    !array_key_exists($pconfig['caref'], cert_build_list('ca', 'OpenVPN'))) {
+			$input_errors[] = gettext("The selected Peer Certificate Authority is not valid.");
+		}
+
+		if (!empty($pconfig['crlref']) &&
+		    !array_key_exists($pconfig['crlref'], openvpn_build_crl_list())) {
+			$input_errors[] = gettext("The selected Peer Certificate Revocation List is not valid.");
+		}
+
+		if (!empty($pconfig['certref']) &&
+		    !array_key_exists($pconfig['certref'], $certlist['server'])) {
+			$input_errors[] = gettext("The selected Client Certificate is not valid.");
+		}
 	} else {
 		$tls_mode = false;
 	}
@@ -288,6 +355,10 @@ if ($_POST['save']) {
 	}
 
 	if ($pconfig['proxy_addr']) {
+		if (!empty($pconfig['proxy_authtype']) &&
+		    !array_key_exists($pconfig['proxy_authtype'], $proxy_auth_types)) {
+			$input_errors[] = gettext("The selected Proxy Authentication Type is not valid.");
+		}
 
 		if ($result = openvpn_validate_host($pconfig['proxy_addr'], 'Proxy host or address')) {
 			$input_errors[] = $result;
@@ -357,6 +428,11 @@ if ($_POST['save']) {
 		if (!in_array($pconfig['tls_type'], array_keys($openvpn_tls_modes))) {
 			$input_errors[] = gettext("The field 'TLS Key Usage Mode' is not valid");
 		}
+
+		if (!empty($pconfig['tlsauth_keydir']) &&
+		    !array_key_exists($pconfig['tlsauth_keydir'], openvpn_get_keydirlist())) {
+			$input_errors[] = gettext("The selected TLS Key Direction is not valid.");
+		}
 	}
 
 	if (($pconfig['mode'] == "p2p_shared_key") && strstr($pconfig['data_ciphers_fallback'], "GCM")) {
@@ -365,13 +441,6 @@ if ($_POST['save']) {
 
 	/* If we are not in shared key mode, then we need the CA/Cert. */
 	if ($pconfig['mode'] != "p2p_shared_key") {
-		if (($pconfig['ncp_enable'] != "disabled") && !empty($pconfig['data_ciphers']) && is_array($pconfig['data_ciphers'])) {
-			foreach ($pconfig['data_ciphers'] as $dc) {
-				if (!in_array(trim($dc), $cipher_validation_list)) {
-					$input_errors[] = gettext("One or more of the selected Data Encryption Algorithms is not valid.");
-				}
-			}
-		}
 		$reqdfields = explode(" ", "caref");
 		$reqdfieldsn = array(gettext("Certificate Authority"));
 	} elseif (!$pconfig['autokey_enable']) {
@@ -440,6 +509,11 @@ if ($_POST['save']) {
 		$input_errors[] = gettext("The supplied Inactive Seconds value is invalid.");
 	}
 
+	if (!empty($pconfig['verbosity_level']) &&
+	    !array_key_exists($pconfig['verbosity_level'], $openvpn_verbosity_level)) {
+		$input_errors[] = gettext("The selected Verbosity Level is not valid.");
+	}
+
 	if (!$input_errors) {
 
 		$client = array();
@@ -674,7 +748,7 @@ if ($act=="new" || $act=="edit"):
 		'proxy_authtype',
 		'Proxy Authentication',
 		$pconfig['proxy_authtype'],
-		array('none' => gettext('none'), 'basic' => gettext('basic'), 'ntlm' => gettext('ntlm'))
+		$proxy_auth_types
 		))->setHelp("The type of authentication used by the proxy server.");
 
 	$section->addInput(new Form_Input(
@@ -819,13 +893,11 @@ if ($act=="new" || $act=="edit"):
 		$pconfig['shared_key']
 	))->setHelp('Paste the shared key here');
 
-	$cl = openvpn_build_cert_list(true);
-
 	$section->addInput(new Form_Select(
 		'certref',
 		'Client Certificate',
 		$pconfig['certref'],
-		$cl['server']
+		$certlist['server']
 		));
 
 	$section->addInput(new Form_Checkbox(
@@ -861,7 +933,8 @@ if ($act=="new" || $act=="edit"):
 	  ->setAttribute('size', '10')
 	  ->setHelp('Allowed Data Encryption Algorithms. Click an algorithm name to remove it from the list');
 
-	$group->setHelp('The order of the selected Data Encryption Algorithms is respected by OpenVPN.%1$s%2$s%3$s',
+	$group->setHelp('The order of the selected Data Encryption Algorithms is respected by OpenVPN. ' .
+					'This list is ignored in Shared Key mode.%1$s%2$s%3$s',
 					'<div class="infoblock">',
 					sprint_info_box(
 						gettext('For backward compatibility, when an older peer connects that does not support dynamic negotiation, OpenVPN will use the Fallback Data Encryption Algorithm ' .
@@ -876,7 +949,7 @@ if ($act=="new" || $act=="edit"):
 		$pconfig['data_ciphers_fallback'],
 		openvpn_get_cipherlist()
 		))->setHelp('The Fallback Data Encryption Algorithm used for data channel packets when communicating with ' .
-				'clients that do not support data encryption algorithm negotiation. ' .
+				'clients that do not support data encryption algorithm negotiation (e.g. Shared Key). ' .
 				'This algorithm is automatically included in the Data Encryption Algorithms list.');
 
 	$section->addInput(new Form_Select(
@@ -1209,7 +1282,8 @@ else:
 	$i = 0;
 	foreach ($a_client as $client):
 		$server = "{$client['server_addr']}:{$client['server_port']}";
-		$dc = openvpn_build_data_cipher_list($client['data_ciphers'], $client['data_ciphers_fallback'], ($client['ncp_enable'] != "disabled"));
+		$ncp = (($client['mode'] != "p2p_shared_key") && ($client['ncp_enable'] != 'disabled'));
+		$dc = openvpn_build_data_cipher_list($client['data_ciphers'], $client['data_ciphers_fallback'], $ncp);
 		$dca = explode(',', $dc);
 		if (count($dca) > 5) {
 			$dca = array_slice($dca, 0, 5);
diff --git a/src/usr/local/www/vpn_openvpn_csc.php b/src/usr/local/www/vpn_openvpn_csc.php
index 979eada5ce..0e32eefb27 100644
--- a/src/usr/local/www/vpn_openvpn_csc.php
+++ b/src/usr/local/www/vpn_openvpn_csc.php
@@ -5,7 +5,7 @@
  * part of pfSense (https://www.pfsense.org)
  * Copyright (c) 2004-2013 BSD Perimeter
  * Copyright (c) 2013-2016 Electric Sheep Fencing
- * Copyright (c) 2014-2021 Rubicon Communications, LLC (Netgate)
+ * Copyright (c) 2014-2022 Rubicon Communications, LLC (Netgate)
  * Copyright (c) 2008 Shrew Soft Inc.
  * All rights reserved.
  *
@@ -38,6 +38,14 @@ global $openvpn_tls_server_modes;
 
 init_config_arr(array('openvpn', 'openvpn-csc'));
 $a_csc = &$config['openvpn']['openvpn-csc'];
+init_config_arr(array('openvpn', 'openvpn-server'));
+
+$serveroptionlist = array();
+foreach ($config['openvpn']['openvpn-server'] as $serversettings) {
+	if (in_array($serversettings['mode'], $openvpn_tls_server_modes)) {
+		$serveroptionlist[$serversettings['vpnid']] = sprintf(gettext("OpenVPN Server %d: %s"), $serversettings['vpnid'], $serversettings['description']);
+	}
+}
 
 if (isset($_REQUEST['id']) && is_numericint($_REQUEST['id'])) {
 	$id = $_REQUEST['id'];
@@ -151,26 +159,39 @@ if ($_POST['save']) {
 		$pconfig['custom_options'] = $a_csc[$id]['custom_options'];
 	}
 
-	if ($result = openvpn_validate_cidr($pconfig['tunnel_network'], 'IPv4 Tunnel Network')) {
-		$input_errors[] = $result;
+	if (!empty($pconfig['server_list'])) {
+		if (is_array($pconfig['server_list'])) {
+			foreach ($pconfig['server_list'] as $server) {
+				if (!array_key_exists(trim($server), $serveroptionlist)) {
+					$input_errors[] = gettext("The server list contains an invalid entry.");
+				}
+			}
+		} else {
+			$input_errors[] = gettext("The server list is invalid");
+		}
 	}
-	if ($result = openvpn_validate_cidr($pconfig['tunnel_networkv6'], 'IPv6 Tunnel Network', false, "ipv6")) {
-		$input_errors[] = $result;
+
+	if (!empty($pconfig['tunnel_network']) && !openvpn_validate_tunnel_network($pconfig['tunnel_network'], 'ipv4')) {
+		$input_errors[] = gettext("The field 'IPv4 Tunnel Network' must contain a valid IPv4 subnet with CIDR mask or an alias with a single IPv4 subnet with CIDR mask.");
+	}
+
+	if (!empty($pconfig['tunnel_networkv6']) && !openvpn_validate_tunnel_network($pconfig['tunnel_networkv6'], 'ipv6')) {
+		$input_errors[] = gettext("The field 'IPv6 Tunnel Network' must contain a valid IPv6 prefix or an alias with a single IPv6 prefix.");
 	}
 
-	if ($result = openvpn_validate_cidr($pconfig['local_network'], 'IPv4 Local Network', true, "ipv4")) {
+	if ($result = openvpn_validate_cidr($pconfig['local_network'], 'IPv4 Local Network', true, "ipv4", true)) {
 		$input_errors[] = $result;
 	}
 
-	if ($result = openvpn_validate_cidr($pconfig['local_networkv6'], 'IPv6 Local Network', true, "ipv6")) {
+	if ($result = openvpn_validate_cidr($pconfig['local_networkv6'], 'IPv6 Local Network', true, "ipv6", true)) {
 		$input_errors[] = $result;
 	}
 
-	if ($result = openvpn_validate_cidr($pconfig['remote_network'], 'IPv4 Remote Network', true, "ipv4")) {
+	if ($result = openvpn_validate_cidr($pconfig['remote_network'], 'IPv4 Remote Network', true, "ipv4", true)) {
 		$input_errors[] = $result;
 	}
 
-	if ($result = openvpn_validate_cidr($pconfig['remote_networkv6'], 'IPv6 Remote Network', true, "ipv6")) {
+	if ($result = openvpn_validate_cidr($pconfig['remote_networkv6'], 'IPv6 Remote Network', true, "ipv6", true)) {
 		$input_errors[] = $result;
 	}
 
@@ -218,6 +239,11 @@ if ($_POST['save']) {
 				$input_errors[] = gettext("The field 'NetBIOS Data Distribution Server #1' must contain a valid IP address");
 			}
 		}
+
+		if (!empty($pconfig['netbios_ntype']) &&
+		    !array_key_exists($pconfig['netbios_ntype'], $netbios_nodetypes)) {
+			$input_errors[] = gettext("The selected NetBIOS Node Type is not valid.");
+		}
 	}
 
 	$reqdfields[] = 'common_name';
@@ -333,6 +359,24 @@ if ($act == "new" || $act == "edit"):
 
 	$section = new Form_Section('General Information');
 
+	$section->addInput(new Form_Input(
+		'description',
+		'Description',
+		'text',
+		$pconfig['description']
+	))->setHelp('A description of this override for administrative reference.');
+
+	$section->addInput(new Form_Checkbox(
+		'disable',
+		'Disable',
+		'Disable this override',
+		$pconfig['disable']
+	))->setHelp('Set this option to disable this client-specific override without removing it from the list.');
+
+	$form->add($section);
+
+	$section = new Form_Section('Override Configuration');
+
 	$serveroptionlist = array();
 	if (is_array($config['openvpn']['openvpn-server'])) {
 		foreach ($config['openvpn']['openvpn-server'] as $serversettings) {
@@ -342,35 +386,12 @@ if ($act == "new" || $act == "edit"):
 		}
 	}
 
-	$section->addInput(new Form_Select(
-		'server_list',
-		'Server List',
-		$pconfig['server_list'],
-		$serveroptionlist,
-		true
-		))->setHelp('Select the servers that will utilize this override. When no servers are selected, the override will apply to all servers.');
-
-
-	$section->addInput(new Form_Checkbox(
-		'disable',
-		'Disable',
-		'Disable this override',
-		$pconfig['disable']
-	))->setHelp('Set this option to disable this client-specific override without removing it from the list.');
-
 	$section->addInput(new Form_Input(
 		'common_name',
 		'*Common Name',
 		'text',
 		$pconfig['common_name']
-	))->setHelp('Enter the X.509 common name for the client certificate, or the username for VPNs utilizing password authentication. This match is case sensitive.');
-
-	$section->addInput(new Form_Input(
-		'description',
-		'Description',
-		'text',
-		$pconfig['description']
-	))->setHelp('A description for administrative reference (not parsed).');
+	))->setHelp('Enter the X.509 common name for the client certificate, or the username for VPNs utilizing password authentication. This match is case sensitive. Enter "DEFAULT" to override default client behavior.');
 
 	$section->addInput(new Form_Checkbox(
 		'block',
@@ -379,6 +400,14 @@ if ($act == "new" || $act == "edit"):
 		$pconfig['block']
 	))->setHelp('Prevents the client from connecting to this server. Do not use this option to permanently disable a client due to a compromised key or password. Use a CRL (certificate revocation list) instead.');
 
+	$section->addInput(new Form_Select(
+		'server_list',
+		'Server List',
+		$pconfig['server_list'],
+		$serveroptionlist,
+		true
+		))->setHelp('Select the servers that will utilize this override. When no servers are selected, the override will apply to all servers.');
+
 	$form->add($section);
 
 	$section = new Form_Section('Tunnel Settings');
@@ -388,7 +417,7 @@ if ($act == "new" || $act == "edit"):
 		'IPv4 Tunnel Network',
 		'text',
 		$pconfig['tunnel_network']
-	))->setHelp('The virtual IPv4 network used for private communications between this client and the server expressed using CIDR (e.g. 10.0.8.5/24). %1$s' .
+	))->setHelp('The virtual IPv4 network or network type alias with a single entry used for private communications between this client and the server expressed using CIDR (e.g. 10.0.8.5/24). %1$s' .
 		    'With subnet topology, enter the client IP address and the subnet mask must match the IPv4 Tunnel Network on the server. %1$s' .
 		    'With net30 topology, the first network address of the /30 is assumed to be the server address and the second network address will be assigned to the client.',
 			'<br />');
@@ -398,7 +427,7 @@ if ($act == "new" || $act == "edit"):
 		'IPv6 Tunnel Network',
 		'text',
 		$pconfig['tunnel_networkv6']
-	))->setHelp('The virtual IPv6 network used for private communications between this client and the server expressed using prefix (e.g. 2001:db9:1:1::100/64). %1$s' .
+	))->setHelp('The virtual IPv6 network or network type alias with a single entry used for private communications between this client and the server expressed using prefix (e.g. 2001:db9:1:1::100/64). %1$s' .
 		    'Enter the client IPv6 address and prefix. The prefix must match the IPv6 Tunnel Network prefix on the server. ',
 			'<br />');
 
@@ -407,7 +436,7 @@ if ($act == "new" || $act == "edit"):
 		'IPv4 Local Network/s',
 		'text',
 		$pconfig['local_network']
-	))->setHelp('These are the IPv4 server-side networks that will be accessible from this particular client. Expressed as a comma-separated list of one or more CIDR networks. %1$s' .
+	))->setHelp('These are the IPv4 server-side networks that will be accessible from this particular client. Expressed as a comma-separated list of one or more CIDR ranges or host/network type aliases. %1$s' .
 		    'NOTE: Networks do not need to be specified here if they have already been defined on the main server configuration.',
 			'<br />');
 
diff --git a/src/usr/local/www/vpn_openvpn_server.php b/src/usr/local/www/vpn_openvpn_server.php
index bf75b778ee..47146f479a 100644
--- a/src/usr/local/www/vpn_openvpn_server.php
+++ b/src/usr/local/www/vpn_openvpn_server.php
@@ -54,6 +54,8 @@ foreach ($a_crl as $cid => $acrl) {
 	}
 }
 
+$certlist = openvpn_build_cert_list(false, true);
+
 if (isset($_REQUEST['id']) && is_numericint($_REQUEST['id'])) {
 	$id = $_REQUEST['id'];
 }
@@ -307,6 +309,31 @@ if ($_POST['save']) {
 		$pconfig['custom_options'] = $a_server[$id]['custom_options'];
 	}
 
+	if (!empty($pconfig['mode']) &&
+	    !array_key_exists($pconfig['mode'], openvpn_build_mode_list())) {
+		$input_errors[] = gettext("The selected Server Mode is not valid.");
+	}
+
+	if (!empty($pconfig['dev_mode']) &&
+	    !array_key_exists($pconfig['dev_mode'], $openvpn_dev_mode)) {
+		$input_errors[] = gettext("The selected Device Mode is not valid.");
+	}
+
+	if (!empty($pconfig['protocol']) &&
+	    !array_key_exists($pconfig['protocol'], $openvpn_prots)) {
+		$input_errors[] = gettext("The selected Protocol is not valid.");
+	}
+
+	if (!empty($pconfig['interface']) &&
+	    !array_key_exists($pconfig['interface'], openvpn_build_if_list())) {
+		$input_errors[] = gettext("The selected Interface is not valid.");
+	}
+
+	if (!empty($pconfig['ecdh_curve']) &&
+	    !array_key_exists($pconfig['ecdh_curve'], openvpn_get_curvelist())) {
+		$input_errors[] = gettext("The selected ECDH Curve is not valid.");
+	}
+
 	$cipher_validation_list = array_keys(openvpn_get_cipherlist());
 	if (!in_array($pconfig['data_ciphers_fallback'], $cipher_validation_list)) {
 		$input_errors[] = gettext("The selected Fallback Data Encryption Algorithm is not valid.");
@@ -317,6 +344,32 @@ if ($_POST['save']) {
 		$input_errors[] = gettext("Too many Data Encryption Algorithms have been selected.");
 	}
 
+	if (!empty($pconfig['data_ciphers']) && is_array($pconfig['data_ciphers'])) {
+		foreach ($pconfig['data_ciphers'] as $dc) {
+			if (!in_array(trim($dc), $cipher_validation_list)) {
+				$input_errors[] = gettext("One or more of the selected Data Encryption Algorithms is not valid.");
+			}
+		}
+	} else {
+		/* If data_ciphers is not empty and also not an array, it can't be valid. */
+		$input_errors[] = gettext("The Data Encryption Algorithm list is not valid.");
+	}
+
+	if (!empty($pconfig['digest']) &&
+	    !array_key_exists($pconfig['digest'], openvpn_get_digestlist())) {
+		$input_errors[] = gettext("The selected Auth Digest Algorithm is not valid.");
+	}
+
+	if (!empty($pconfig['engine']) &&
+	    !array_key_exists($pconfig['engine'], openvpn_get_engines())) {
+		$input_errors[] = gettext("The selected Hardware Crypto engine is not valid.");
+	}
+
+	if (!empty($pconfig['cert_depth']) &&
+	    !array_key_exists($pconfig['cert_depth'], $openvpn_cert_depths)) {
+		$input_errors[] = gettext("The selected Certificate Depth is not valid.");
+	}
+
 	list($iv_iface, $iv_ip) = explode ("|", $pconfig['interface']);
 	if (is_ipaddrv4($iv_ip) && (stristr($pconfig['protocol'], "6") !== false)) {
 		$input_errors[] = gettext("Protocol and IP address families do not match. An IPv6 protocol and an IPv4 IP address cannot be selected.");
@@ -338,6 +391,22 @@ if ($_POST['save']) {
 
 	if ($pconfig['mode'] != "p2p_shared_key") {
 		$tls_mode = true;
+
+		if (!empty($pconfig['caref']) &&
+		    !array_key_exists($pconfig['caref'], cert_build_list('ca', 'OpenVPN'))) {
+			$input_errors[] = gettext("The selected Peer Certificate Authority is not valid.");
+		}
+
+		if (!empty($pconfig['crlref']) &&
+		    !array_key_exists($pconfig['crlref'], openvpn_build_crl_list())) {
+			$input_errors[] = gettext("The selected Peer Certificate Revocation List is not valid.");
+		}
+
+		if (!empty($pconfig['certref']) &&
+		    !array_key_exists($pconfig['certref'], $certlist['server'] + $certlist['non-server'])) {
+			$input_errors[] = gettext("The selected Server Certificate is not valid.");
+		}
+
 	} else {
 		$tls_mode = false;
 	}
@@ -402,6 +471,16 @@ if ($_POST['save']) {
 		$input_errors[] = $result;
 	}
 
+	if (!empty($pconfig['allow_compression']) &&
+	    !array_key_exists($pconfig['allow_compression'], $openvpn_allow_compression)) {
+		$input_errors[] = gettext("The selected Allow Compression value is not valid.");
+	}
+
+	if (!empty($pconfig['compression']) &&
+	    !array_key_exists($pconfig['compression'], $openvpn_compression_modes)) {
+		$input_errors[] = gettext("The selected Compression is not valid.");
+	}
+
 	$portused = openvpn_port_used($pconfig['protocol'], $pconfig['interface'], $pconfig['local_port'], $vpnid);
 	if (($portused != $vpnid) && ($portused != 0)) {
 		$input_errors[] = gettext("The specified 'Local port' is in use. Please select another value");
@@ -426,6 +505,10 @@ if ($_POST['save']) {
 		if (!in_array($pconfig['tls_type'], array_keys($openvpn_tls_modes))) {
 			$input_errors[] = gettext("The field 'TLS Key Usage Mode' is not valid");
 		}
+		if (!empty($pconfig['tlsauth_keydir']) &&
+		    !array_key_exists($pconfig['tlsauth_keydir'], openvpn_get_keydirlist())) {
+			$input_errors[] = gettext("The selected TLS Key Direction is not valid.");
+		}
 	}
 
 	if ($pconfig['dns_server_enable']) {
@@ -472,6 +555,11 @@ if ($_POST['save']) {
 				$input_errors[] = gettext("The field 'NetBIOS Data Distribution Server #1' must contain a valid IP address");
 			}
 		}
+
+		if (!empty($pconfig['netbios_ntype']) &&
+		    !array_key_exists($pconfig['netbios_ntype'], $netbios_nodetypes)) {
+			$input_errors[] = gettext("The selected NetBIOS Node Type is not valid.");
+		}
 	}
 
 	if ($pconfig['maxclients'] && !is_numericint($pconfig['maxclients'])) {
@@ -498,14 +586,6 @@ if ($_POST['save']) {
 		}
 		$reqdfields = explode(" ", "caref certref");
 		$reqdfieldsn = array(gettext("Certificate Authority"), gettext("Certificate"));
-
-		if (($pconfig['ncp_enable'] != "disabled") && !empty($pconfig['data_ciphers']) && is_array($pconfig['data_ciphers'])) {
-			foreach ($pconfig['data_ciphers'] as $dc) {
-				if (!in_array(trim($dc), $cipher_validation_list)) {
-					$input_errors[] = gettext("One or more of the selected Data Encryption Algorithms is not valid.");
-				}
-			}
-		}
 	} elseif (!$pconfig['autokey_enable']) {
 		/* We only need the shared key filled in if we are in shared key mode and autokey is not selected. */
 		$reqdfields = array('shared_key');
@@ -517,6 +597,11 @@ if ($_POST['save']) {
 	}
 
 	if ($pconfig['dev_mode'] == "tap") {
+		if (!empty($pconfig['serverbridge_interface']) &&
+		    !array_key_exists($pconfig['serverbridge_interface'], openvpn_build_bridge_list())) {
+			$input_errors[] = gettext("The selected Server Bridge Interface is not valid.");
+		}
+
 		if ($pconfig['serverbridge_dhcp'] && $pconfig['tunnel_network']) {
 			$input_errors[] = gettext("Using a tunnel network and server bridge settings together is not allowed.");
 		}
@@ -584,6 +669,10 @@ if ($_POST['save']) {
 	if (!empty($pconfig['ocspurl']) && !is_URL($pconfig['ocspurl'])) {
 		$input_errors[] = gettext("OCSP URL must be a valid URL address.");
 	}
+	if (!empty($pconfig['verbosity_level']) &&
+	    !array_key_exists($pconfig['verbosity_level'], $openvpn_verbosity_level)) {
+		$input_errors[] = gettext("The selected Verbosity Level is not valid.");
+	}
 
 	do_input_validation($_POST, $reqdfields, $reqdfieldsn, $input_errors);
 
@@ -993,16 +1082,14 @@ if ($act=="new" || $act=="edit"):
 		$certhelp = sprintf(gettext('No Certificates defined. One may be created here: %1$s%2$s%3$s'), '<span id="certtype">', '<a href="system_camanager.php">' . gettext("System &gt; Cert. Manager") . '</a>', '</span>');
 	}
 
-	$cl = openvpn_build_cert_list(false, true);
-
 	//Save the number of server certs for use at run-time
-	$servercerts = count($cl['server']);
+	$servercerts = count($certlist['server']);
 
 	$section->addInput(new Form_Select(
 		'certref',
 		'*Server certificate',
 		$pconfig['certref'],
-		$cl['server'] + $cl['non-server']
+		$certlist['server'] + $certlist['non-server']
 		))->setHelp($certhelp);
 
 	$section->addInput(new Form_Select(
@@ -1076,7 +1163,8 @@ if ($act=="new" || $act=="edit"):
 	  ->setAttribute('size', '10')
 	  ->setHelp('Allowed Data Encryption Algorithms. Click an algorithm name to remove it from the list');
 
-	$group->setHelp('The order of the selected Data Encryption Algorithms is respected by OpenVPN.%1$s%2$s%3$s',
+	$group->setHelp('The order of the selected Data Encryption Algorithms is respected by OpenVPN. ' .
+					'This list is ignored in Shared Key mode.%1$s%2$s%3$s',
 					'<div class="infoblock">',
 					sprint_info_box(
 						gettext('For backward compatibility, when an older peer connects that does not support dynamic negotiation, OpenVPN will use the Fallback Data Encryption Algorithm ' .
@@ -1091,7 +1179,7 @@ if ($act=="new" || $act=="edit"):
 		$pconfig['data_ciphers_fallback'],
 		openvpn_get_cipherlist()
 		))->setHelp('The Fallback Data Encryption Algorithm used for data channel packets when communicating with ' .
-				'clients that do not support data encryption algorithm negotiation. ' .
+				'clients that do not support data encryption algorithm negotiation (e.g. Shared Key). ' .
 				'This algorithm is automatically included in the Data Encryption Algorithms list.');
 
 	$section->addInput(new Form_Select(
@@ -1680,7 +1768,8 @@ else:
 <?php
 	$i = 0;
 	foreach ($a_server as $server):
-		$dc = openvpn_build_data_cipher_list($server['data_ciphers'], $server['data_ciphers_fallback'], ($server['ncp_enable'] != "disabled"));
+		$ncp = (($server['mode'] != "p2p_shared_key") && ($server['ncp_enable'] != 'disabled'));
+		$dc = openvpn_build_data_cipher_list($server['data_ciphers'], $server['data_ciphers_fallback'], $ncp);
 		$dca = explode(',', $dc);
 		if (count($dca) > 5) {
 			$dca = array_slice($dca, 0, 5);
