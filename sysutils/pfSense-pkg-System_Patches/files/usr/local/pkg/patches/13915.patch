diff --git a/src/usr/local/www/wizards/traffic_shaper_wizard_dedicated.inc b/src/usr/local/www/wizards/traffic_shaper_wizard_dedicated.inc
index 86091b779e..19a1c8a489 100644
--- a/src/usr/local/www/wizards/traffic_shaper_wizard_dedicated.inc
+++ b/src/usr/local/www/wizards/traffic_shaper_wizard_dedicated.inc
@@ -27,29 +27,36 @@ require_once("util.inc");
 
 function step1_stepbeforeformdisplay() {
 	global $stepid, $savemsg, $pkg;
+	$fields = array_get_path($pkg, 'step/0/fields/field', []);
 
-	$fields = &$pkg['step'][0]['fields']['field'];
-
-	$wans = 0;
 	$lans = 0;
+	$wans = 0;
 
 	$iflisttmp = get_configured_interface_with_descr();
 	foreach ($iflisttmp as $if => $ifdesc) {
-		if (!is_altq_capable(get_real_interface($if)))
+		if (!is_altq_capable(get_real_interface($if))) {
 			continue;
-		if (interface_has_gateway($if) || interface_has_gatewayv6($if))
+		}
+		if (interface_has_gateway($if) ||
+		    interface_has_gatewayv6($if)) {
 			$wans++;
-		else
+		} else {
 			$lans++;
+		}
 	}
 
-	foreach ($fields as &$field)
+	foreach ($fields as &$field) {
 		if ($field['name'] == 'numberofconnections') {
 			$field['value'] = ($wans < $lans ? $wans : $lans);
 			if (($wans == 0) && ($lans == 0)) {
 				$field['description'] .= sprint_info_box(gettext("This firewall does not have any interfaces assigned that are capable of using ALTQ traffic shaping."), 'danger', false);
 			}
 		}
+	}
+
+	if (!empty($fields)) {
+		array_set_path($pkg, 'step/0/fields/field', $fields);
+	}
 }
 
 function step1_submitphpaction() {
@@ -73,18 +80,21 @@ function step2_stepbeforeformdisplay() {
 
 	$wans = 0;
 	$lans = 0;
-	$iflist = array();
+	$iflist = [];
 	$iflisttmp = get_configured_interface_with_descr();
 	foreach ($iflisttmp as $if => $ifdesc) {
-		if (!is_altq_capable(get_real_interface($if)))
+		if (!is_altq_capable(get_real_interface($if))) {
 			continue;
-		if (interface_has_gateway($if) || interface_has_gatewayv6($if))
+		}
+		if (interface_has_gateway($if) ||
+		    interface_has_gatewayv6($if)) {
 			$wans++;
-		else
+		} else {
 			$lans++;
+		}
 		$iflist[$if] = $ifdesc;
 	}
-	$numberofconnections = intval($config['ezshaper']['step1']['numberofconnections']);
+	$numberofconnections = intval(config_get_path('ezshaper/step1/numberofconnections', 0));
 	if ($numberofconnections > ($wans < $lans ? $wans : $lans)) {
 		$savemsg=gettext("The specified number of connections is greater than the number of ALTQ-capable assigned interfaces!");
 		$stepid--;
@@ -93,31 +103,33 @@ function step2_stepbeforeformdisplay() {
 
 	$cfgname = "traffic_shaper_wizard_dedicated.xml";
 
-	$fields = &$pkg['step'][1]['fields']['field'];
-
-	$fields = array();
+	$fields = [];
 
 	for ($i = 0; $i < $numberofconnections; $i++) {
-		$field = array();
+		$field = [];
 		$linknum = $i+1;
 		$ifsel = ($i * 2);
 		$field['name'] = "Connection #{$linknum} parameters";
 		$field['type'] = "listtopic";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "Local Interface";
 		$field['name'] = "local{$i}interface";
 		$field['type'] = "select";
-		$field['options']['option'] = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
 		$ifcnt = 0;
 		foreach ($iflist as $ifname => $ifdescr) {
 			// Skip wan interfaces here
-			if (interface_has_gateway($ifname) || interface_has_gatewayv6($ifname))
+			if (interface_has_gateway($ifname) ||
+			    interface_has_gatewayv6($ifname)) {
 				continue;
-			if ($ifcnt == ($ifsel + 1))
+			}
+			if ($ifcnt == ($ifsel + 1)) {
 				$field['value'] = $ifname;
-			$opts = array();
+			}
+			$opts = [];
 			$opts['displayname'] = $ifdescr;
 			$opts['name'] = $ifname;
 			$opts['value'] = $ifname;
@@ -128,7 +140,7 @@ function step2_stepbeforeformdisplay() {
 		$field['bindstofield'] = "ezshaper->step2->local{$i}interface";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['combinefieldsend'] = "true";
 		$field['dontdisplayname'] = "true";
 		$field['dontcombinecells'] = "true";
@@ -136,35 +148,40 @@ function step2_stepbeforeformdisplay() {
 		$field['name'] = "local{$i}downloadscheduler";
 		$field['type'] = "select";
 		$field['typehint'] = "Queueing discipline to apply on the download of this connection.";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['name'] = "PRIQ";
 		$opts['value'] = "PRIQ";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['name'] = "HFSC";
 		$opts['value'] = "HFSC";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['name'] = "CBQ";
 		$opts['value'] = "CBQ";
 		$field['options']['option'][] = $opts;
 		$field['bindstofield'] = "ezshaper->step2->local{$i}downloadscheduler";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "WAN Interface";
 		$field['name'] = "conn{$i}interface";
 		$field['type'] = "select";
-		$field['options']['option'] = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
 		$ifcnt = 0;
 		foreach ($iflist as $ifname => $ifdescr) {
 			// Skip lan interfaces here
-			if (!interface_has_gateway($ifname) && !interface_has_gatewayv6($ifname))
+			if (!interface_has_gateway($ifname) &&
+			    !interface_has_gatewayv6($ifname)) {
 				continue;
-			if ($ifcnt == $ifsel)
+			}
+			if ($ifcnt == $ifsel) {
 				$field['value'] = $ifname;
-			$opts = array();
+			}
+			$opts = [];
 			$opts['displayname'] = $ifdescr;
 			$opts['name'] = $ifname;
 			$opts['value'] = $ifname;
@@ -175,7 +192,7 @@ function step2_stepbeforeformdisplay() {
 		$field['combinefieldsbegin'] = "true";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "WAN Interface Scheduler";
 		$field['name'] = "conn{$i}uploadscheduler";
 		$field['combinefieldsend'] = "true";
@@ -183,23 +200,24 @@ function step2_stepbeforeformdisplay() {
 		$field['dontcombinecells'] = "true";
 		$field['type'] = "select";
 		$field['typehint'] = "Queueing discipline to apply on the upload of this connection.";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['name'] = "PRIQ";
 		$opts['value'] = "PRIQ";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['name'] = "HFSC";
 		$opts['value'] = "HFSC";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['name'] = "CBQ";
 		$opts['value'] = "CBQ";
 		$field['options']['option'][] = $opts;
 		$field['bindstofield'] = "ezshaper->step2->conn{$i}uploadscheduler";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "Upload";
 		$field['name'] = "conn{$i}upload";
 		$field['type'] = "input";
@@ -207,7 +225,7 @@ function step2_stepbeforeformdisplay() {
 		$field['combinefieldsbegin'] = "true";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['combinefieldsend'] = "true";
 		$field['dontdisplayname'] = "true";
 		$field['dontcombinecells'] = "true";
@@ -215,23 +233,24 @@ function step2_stepbeforeformdisplay() {
 		$field['typehint'] = "Upload bandwidth on this connection.";
 		$field['type'] = "select";
 		$field['value'] = "Mb";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['value'] = "Kb";
 		$opts['name'] = "Kbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Mb";
 		$opts['name'] = "Mbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Gb";
 		$opts['name'] = "Gbit/s";
 		$field['options']['option'][] = $opts;
 		$field['bindstofield'] = "ezshaper->step2->conn{$i}uploadspeed";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "Download";
 		$field['name'] = "conn{$i}download";
 		$field['type'] = "input";
@@ -239,7 +258,7 @@ function step2_stepbeforeformdisplay() {
 		$field['combinefieldsbegin'] = "true";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['combinefieldsend'] = "true";
 		$field['dontdisplayname'] = "true";
 		$field['dontcombinecells'] = "true";
@@ -247,26 +266,31 @@ function step2_stepbeforeformdisplay() {
 		$field['typehint'] = "Download bandwidth on this connection.";
 		$field['type'] = "select";
 		$field['value'] = "Mb";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['value'] = "Kb";
 		$opts['name'] = "Kbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Mb";
 		$opts['name'] = "Mbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Gb";
 		$opts['name'] = "Gbit/s";
 		$field['options']['option'][] = $opts;
 		$field['bindstofield'] = "ezshaper->step2->conn{$i}downloadspeed";
 		$fields[] = $field;
 	}
-	$field = array();
+	$field = [];
 	$field['name'] = "Next";
 	$field['type'] = "submit";
 	$fields[] = $field;
+
+	if (!empty($fields)) {
+		array_set_path($pkg, 'step/1/fields/field', $fields);
+	}
 }
 
 function step2_stepsubmitphpaction() {
@@ -275,10 +299,11 @@ function step2_stepsubmitphpaction() {
 	$sumdownloads = 0;
 
 	/* Input Validation */
-	$steps = intval($config['ezshaper']['step1']['numberofconnections']);
+	$steps = intval(config_get_path('ezshaper/step1/numberofconnections', 0));
 	for ($i = 0; $i < $steps; $i++) {
 		for ($j = $i + 1; $j <= $steps; $j++) {
-			if ($_POST["conn{$i}interface"] == $_POST["conn{$j}interface"] || $_POST["conn{$i}interface"] == $_POST["local{$j}interface"]) {
+			if (($_POST["conn{$i}interface"] == $_POST["conn{$j}interface"]) ||
+			    ($_POST["conn{$i}interface"] == $_POST["local{$j}interface"])) {
 				$savemsg=gettext("The same interface cannot be selected for connections {$i} and {$j}.");
 				$stepid--;
 				return;
@@ -301,13 +326,15 @@ function step2_stepsubmitphpaction() {
 					$stepid--;
 					return;
 				}
-				if (intval($upbw) < 128 && $_POST["conn{$i}uploadspeed"] == "Kb" && trim($_POST["conn{$i}uploadscheduler"]) == "CBQ") {
+				if ((trim($_POST["conn{$i}uploadscheduler"]) == "CBQ") &&
+				    (intval($upbw) < 128 && $_POST["conn{$i}uploadspeed"] == "Kb")) {
 					$savemsg=gettext("Uploads smaller than 128Kbit/s is not supported for connection {$i} on CBQ scheduler.");
 					$stepid--;
 					return;
 				}
 			}
-			if ($_POST["local{$i}interface"] == $_POST["conn{$j}interface"] || $_POST["local{$i}interface"] == $_POST["local{$j}interface"]) {
+			if (($_POST["local{$i}interface"] == $_POST["conn{$j}interface"]) ||
+			    ($_POST["local{$i}interface"] == $_POST["local{$j}interface"])) {
 				$savemsg=gettext("The same interface cannot be selected for local and outside.");
 				$stepid--;
 				return;
@@ -315,18 +342,17 @@ function step2_stepsubmitphpaction() {
 		}
 	}
 
-	config_del_path('ezshaper/step2');
-	$config['ezshaper']['step2'] = array();
+	config_set_path('ezshaper/step2', []);
 
 	for ($i = 0; $i < $steps; $i++) {
-		$config['ezshaper']['step2']["local{$i}downloadscheduler"] = $_POST["local{$i}downloadscheduler"];
-		$config['ezshaper']['step2']["local{$i}interface"] = $_POST["local{$i}interface"];
-		$config['ezshaper']['step2']["conn{$i}uploadscheduler"] = $_POST["conn{$i}uploadscheduler"];
-		$config['ezshaper']['step2']["conn{$i}upload"] = $_POST["conn{$i}upload"];
-		$config['ezshaper']['step2']["conn{$i}uploadspeed"] = $_POST["conn{$i}uploadspeed"];
-		$config['ezshaper']['step2']["conn{$i}download"] = $_POST["conn{$i}download"];
-		$config['ezshaper']['step2']["conn{$i}downloadspeed"] = $_POST["conn{$i}downloadspeed"];
-		$config['ezshaper']['step2']["conn${i}interface"] = $_POST["conn{$i}interface"];
+		config_set_path("ezshaper/step2/local{$i}downloadscheduler", $_POST["local{$i}downloadscheduler"]);
+		config_set_path("ezshaper/step2/local{$i}interface", $_POST["local{$i}interface"]);
+		config_set_path("ezshaper/step2/conn{$i}uploadscheduler", $_POST["conn{$i}uploadscheduler"]);
+		config_set_path("ezshaper/step2/conn{$i}upload", $_POST["conn{$i}upload"]);
+		config_set_path("ezshaper/step2/conn{$i}uploadspeed", $_POST["conn{$i}uploadspeed"]);
+		config_set_path("ezshaper/step2/conn{$i}download", $_POST["conn{$i}download"]);
+		config_set_path("ezshaper/step2/conn{$i}downloadspeed", $_POST["conn{$i}downloadspeed"]);
+		config_set_path("ezshaper/step2/conn${i}interface", $_POST["conn{$i}interface"]);
 	}
 }
 
@@ -336,15 +362,12 @@ function step3_stepbeforeformdisplay() {
 
 	$cfgname = "traffic_shaper_wizard_dedicated.xml";
 
-	$numberofconnections = intval($config['ezshaper']['step1']['numberofconnections']);
-
-	$fields = &$pkg['step'][1]['fields']['field'];
-	$voipfields = &$pkg['step'][2]['fields']['field'];
+	$numberofconnections = intval(config_get_path('ezshaper/step1/numberofconnections', 0));
 
-	$voipfields = array();
-	$enablefields = array();
+	$voipfields = [];
+	$enablefields = [];
 
-	$field = array();
+	$field = [];
 	$field['name'] = "Enable";
 	$field['type'] = "checkbox";
 	$field['typehint'] = "Prioritize Voice over IP traffic.";
@@ -352,37 +375,38 @@ function step3_stepbeforeformdisplay() {
 	$field['descritpion'] = "This will raise the priority of VOIP traffic above all other traffic.";
 	$voipfields[] = $field;
 
-	$field = array();
+	$field = [];
 	$field['name'] = "VOIP specific settings";
 	$field['type'] = "listtopic";
 	$voipfields[] = $field;
 
-	$field = array();
+	$field = [];
 	$field['name'] = "Provider";
 	$enablefields[] = "Provider";
 	$field['type'] = "select";
 	$field['description'] = "Choose Generic if the provider isn't listed.";
-	$field['options']['option'] = array();
-	$opts = array();
+	$field['options'] = [];
+	$field['options']['option'] = [];
+	$opts = [];
 	$opts['name'] = "Generic (lowdelay)";
 	$opts['value'] = "Generic";
 	$field['options']['option'][] = $opts;
-	$opts = array();
+	$opts = [];
 	$opts['name'] = "VoicePulse";
 	$opts['value'] = "VoicePulse";
 	$field['options']['option'][] = $opts;
-	$opts = array();
+	$opts = [];
 	$opts['name'] = "Asterisk/Vonage";
 	$opts['value'] = "Asterisk";
 	$field['options']['option'][] = $opts;
-	$opts = array();
+	$opts = [];
 	$opts['name'] = "PanasonicTDA";
 	$opts['value'] = "Panasonic";
 	$field['options']['option'][] = $opts;
 	$field['bindstofield'] = "ezshaper->step3->provider";
 	$voipfields[] = $field;
 
-	$field = array();
+	$field = [];
 	$field['displayname'] = "Upstream SIP Server";
 	$field['name'] = "upstream_sip_server";
 	$enablefields[] = "upstream_sip_server";
@@ -394,12 +418,12 @@ function step3_stepbeforeformdisplay() {
 
 	for ($i = 0; $i < $numberofconnections; $i++) {
 		$connum = $i + 1;
-		$field = array();
+		$field = [];
 		$field['name'] = "Connection #{$connum} parameters";
 		$field['type'] = "listtopic";
 		$voipfields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "Upload rate";
 		$field['name'] = "conn{$i}upload";
 		$enablefields[] = "conn{$i}upload";
@@ -408,7 +432,7 @@ function step3_stepbeforeformdisplay() {
 		$field['combinefieldsbegin'] = "true";
 		$voipfields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "Units";
 		$field['combinefieldsend'] = "true";
 		$field['dontdisplayname'] = "true";
@@ -417,23 +441,24 @@ function step3_stepbeforeformdisplay() {
 		$enablefields[] = "conn{$i}uploadspeed";
 		$field['typehint'] = "Upload bandwidth guarantee for VOIP phone(s) on connection {$i}.";
 		$field['type'] = "select";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['value'] = "Kb";
 		$opts['name'] = "Kbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Mb";
 		$opts['name'] = "Mbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Gb";
 		$opts['name'] = "Gbit/s";
 		$field['options']['option'][] = $opts;
 		$field['bindstofield'] = "ezshaper->step3->conn{$i}uploadspeed";
 		$voipfields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "Download rate";
 		$field['name'] = "local{$i}download";
 		$enablefields[] = "local{$i}download";
@@ -442,25 +467,26 @@ function step3_stepbeforeformdisplay() {
 		$field['combinefieldsbegin'] = "true";
 		$voipfields[] = $field;
 
-		$field = array();
-		$field['combinefieldsend'] = "true";
+		$field = [];
 		$field['displayname'] = "Units";
+		$field['combinefieldsend'] = "true";
 		$field['dontdisplayname'] = "true";
 		$field['dontcombinecells'] = "true";
 		$field['name'] = "local{$i}downloadspeed";
 		$enablefields[] = "local{$i}downloadspeed";
 		$field['typehint'] = "Download bandwidth guarantee for VOIP phone(s) on connections.";
 		$field['type'] = "select";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['value'] = "Kb";
 		$opts['name'] = "Kbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Mb";
 		$opts['name'] = "Mbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Gb";
 		$opts['name'] = "Gbit/s";
 		$field['options']['option'][] = $opts;
@@ -468,19 +494,21 @@ function step3_stepbeforeformdisplay() {
 		$voipfields[] = $field;
 	}
 
-	$field = array();
+	$field = [];
 	$field['name'] = "Next";
 	$field['type'] = "submit";
 	$voipfields[] = $field;
-	$voipfields[0]['enablefields'] = implode(",", $enablefields);
+	array_set_path($voipfields, '0/enablefields', implode(",", $enablefields));
+	array_set_path($pkg, 'step/2/fields/field', $voipfields);
 }
 
 function step3_stepsubmitphpaction() {
 	global $config;
 	global $stepid, $savemsg;
 
-	if (!$_POST['enable'])
+	if (!$_POST['enable']) {
 		return;
+	}
 
 	if ($_POST['upstream_sip_server']) {
 		if (!is_ipaddroralias($_POST['upstream_sip_server'])) {
@@ -491,9 +519,9 @@ function step3_stepsubmitphpaction() {
 		}
 	}
 
-	$steps = intval($config['ezshaper']['step1']['numberofconnections']);
+	$steps = intval(config_get_path('ezshaper/step1/numberofconnections', 0));
 	for ($i = 0; $i < $steps; $i++) {
-		if ($config['ezshaper']['step2']["conn{$i}uploadscheduler"] != "PRIQ") {
+		if (config_get_path("ezshaper/step2/conn{$i}uploadscheduler", "") != "PRIQ") {
 			if (!is_numeric($_POST["conn{$i}upload"])) {
 				$savemsg = gettext("Upload bandwidth of connection {$i} is not valid.");
 				$stepid--;
@@ -506,8 +534,8 @@ function step3_stepsubmitphpaction() {
 					return;
 				}
 			} else {
-				$factor = wizard_get_bandwidthtype_scale($config['ezshaper']['step2']["conn{$i}uploadspeed"]);
-				$ifbw = $factor * floatval($config['ezshaper']['step2']["conn{$i}upload"]);
+				$factor = wizard_get_bandwidthtype_scale(config_get_path("ezshaper/step2/conn{$i}uploadspeed"));
+				$ifbw = $factor * floatval(config_get_path("ezshaper/step2/conn{$i}upload", 0.0));
 				$factor = wizard_get_bandwidthtype_scale($_POST["conn{$i}uploadspeed"]);
 				$input_bw = $factor * floatval($_POST["conn{$i}upload"]);
 				if ((0.8 * $ifbw) < $input_bw) {
@@ -518,7 +546,7 @@ function step3_stepsubmitphpaction() {
 			}
 		}
 
-		if ($config['ezshaper']['step2']["local{$i}downloadscheduler"] != "PRIQ") {
+		if (config_get_path("ezshaper/step2/local{$i}downloadscheduler") != "PRIQ") {
 			if (!is_numeric($_POST["local{$i}download"])) {
 				$savemsg = gettext("Download bandwidth of connection {$i} is not valid.");
 				$stepid--;
@@ -531,8 +559,8 @@ function step3_stepsubmitphpaction() {
 					return;
 				}
 			} else {
-				$factor = wizard_get_bandwidthtype_scale($config['ezshaper']['step2']["conn{$i}downloadspeed"]);
-				$ifbw = $factor * floatval($config['ezshaper']['step2']["conn{$i}download"]);
+				$factor = wizard_get_bandwidthtype_scale(config_get_path("ezshaper/step2/conn{$i}downloadspeed"));
+				$ifbw = $factor * floatval(config_get_path("ezshaper/step2/conn{$i}download", 0.0));
 				$factor = wizard_get_bandwidthtype_scale($_POST["local{$i}downloadspeed"]);
 				$input_bw = $factor * floatval($_POST["local{$i}download"]);
 				if ((0.8 * $ifbw) < $input_bw) {
@@ -544,18 +572,25 @@ function step3_stepsubmitphpaction() {
 		}
 	}
 
-	config_del_path('ezshaper/step3');
-	$config['ezshaper']['step3'] = array();
+	config_set_path('ezshaper/step3', []);
 
-	if (!empty($_POST['upstream_sip_server']))
-		$config['ezshaper']['step3']['address'] = $_POST['upstream_sip_server'];
-	if ($_POST['enable'] == 'on')
-		$config['ezshaper']['step3']['enable'] = 'on';
+	if (!empty($_POST['upstream_sip_server'])) {
+		config_set_path("ezshaper/step3/address", $_POST['upstream_sip_server']);
+	}
+	if ($_POST['enable'] == 'on') {
+		config_set_path("ezshaper/step3/enable", 'on');
+	}
+	if (!empty($_POST['provider'])) {
+		$VoIPproviders = ["Generic", "VoicePulse", "Asterisk", "Panasonic"];
+		if (in_array($_POST['provider'], $VoIPproviders)) {
+			config_set_path("ezshaper/step3/provider", $_POST['provider']);
+		}
+	}
 	for ($i = 0; $i < $steps; $i++) {
-		$config['ezshaper']['step3']["local{$i}download"] = $_POST["local{$i}download"];
-		$config['ezshaper']['step3']["local{$i}downloadspeed"] = $_POST["local{$i}downloadspeed"];
-		$config['ezshaper']['step3']["conn{$i}upload"] = $_POST["conn{$i}upload"];
-		$config['ezshaper']['step3']["conn{$i}uploadspeed"] = $_POST["conn{$i}uploadspeed"];
+		config_set_path("ezshaper/step3/local{$i}download", $_POST["local{$i}download"]);
+		config_set_path("ezshaper/step3/local{$i}downloadspeed", $_POST["local{$i}downloadspeed"]);
+		config_set_path("ezshaper/step3/conn{$i}upload", $_POST["conn{$i}upload"]);
+		config_set_path("ezshaper/step3/conn{$i}uploadspeed", $_POST["conn{$i}uploadspeed"]);
 	}
 }
 
@@ -574,7 +609,6 @@ function step4_stepsubmitphpaction() {
 			$stepid--;
 			return;
 		}
-
 		if ($_POST['bandwidthspeed'] <> "%") {
 			$savemsg = gettext("Only percentage bandwidth specification is allowed.");
 			$stepid--;
@@ -596,7 +630,6 @@ function step4_stepsubmitphpaction() {
 
 function step5_stepsubmitphpaction() {
 	global $stepid, $savemsg;
-
 	if ( $_POST['enable'] ) {
 		if ($_POST['p2pcatchall']) {
 			if (!is_numeric($_POST['bandwidth'])) {
@@ -651,40 +684,37 @@ function apply_all_chosen_items() {
 	 * Doing it here makes sense since we can wipe the previous config only after
 	 * the user decides to do so, finishing the wizard.
 	 */
-	if (isset($config['shaper']['queue']))
-		config_del_path('shaper/queue');
-	/* XXX: This is redundant, because this should be handled by converter at startup. */
-	if (isset($config['shaper']['rule']))
-		config_del_path('shaper/rule');
-	foreach ($config['filter']['rule'] as $key => $rule)
-		if ($rule['wizard'] == "yes")
+	config_del_path('shaper/queue');
+	config_del_path('shaper/rule');
+	foreach (config_get_path('filter/rule', []) as $key => $rule) {
+		if ($rule['wizard'] == "yes") {
 			config_del_path("filter/rule/{$key}");
+		}
+	}
 
 	/* restart the cached config */
 	unset($altq_list_queues);
-	$altq_list_queues = array();
+	$altq_list_queues = [];
 
-	$steps = intval($config['ezshaper']['step1']['numberofconnections']);
-
-	$interfacelist = array();
+	$steps = intval(config_get_path('ezshaper/step1/numberofconnections', 0));
+	$interfacelist = [];
 
 	for ($i = 0; $i < $steps; $i++) {
-
-		$tmppath = array();
+		$tmppath = [];
 		$__tmp_altq = new altq_root_queue(); $altq =& $__tmp_altq;
 
-		$altq->SetInterface($config['ezshaper']['step2']["conn{$i}interface"]);
-		$interfacelist[] = $config['ezshaper']['step2']["conn{$i}interface"];
-		$altq->SetScheduler($config['ezshaper']['step2']["conn{$i}uploadscheduler"]);
-		$altq->SetBandwidth(floatval($config['ezshaper']['step2']["conn{$i}upload"]));
-		$altq->SetBwscale($config['ezshaper']['step2']["conn{$i}uploadspeed"]);
+		$altq->SetInterface(config_get_path("ezshaper/step2/conn${i}interface"));
+		$interfacelist[] = config_get_path("ezshaper/step2/conn${i}interface");
+		$altq->SetScheduler(config_get_path("ezshaper/step2/conn${i}uploadscheduler"));
+		$altq->SetBandwidth(floatval(config_get_path("ezshaper/step2/conn${i}upload", 0.0)));
+		$altq->SetBwscale(config_get_path("ezshaper/step2/conn${i}uploadspeed"));
 		$altq->SetEnabled("on");
 		$altq_list_queues[$altq->GetQname()] =& $altq;
-		array_push($tmppath, $config['ezshaper']['step2']["conn{$i}interface"]);
+		array_push($tmppath, config_get_path("ezshaper/step2/conn${i}interface"));
 		$altq->SetLink($tmppath);
 		$altq->wconfig();
 
-		$sched = $config['ezshaper']['step2']["conn{$i}uploadscheduler"];
+		$sched = config_get_path("ezshaper/step2/conn${i}uploadscheduler");
 		$voipbw =0;
 		$voipbwunit = "Kb";
 		$voip = false;
@@ -699,44 +729,47 @@ function apply_all_chosen_items() {
 		$otherpriority = false;
 		$remainbw = 0;
 		$factor = 0;
-		$upfactor = wizard_get_bandwidthtype_scale($config['ezshaper']['step2']["conn{$i}uploadspeed"]);
-		$upbw = floatval($config['ezshaper']['step2']["conn{$i}upload"]) * $upfactor;
+		$upfactor = wizard_get_bandwidthtype_scale(config_get_path("ezshaper/step2/conn{$i}uploadspeed"));
+		$upbw = floatval(config_get_path("ezshaper/step2/conn{$i}upload", 0.0)) * $upfactor;
 
-		if ($config['ezshaper']['step3']['enable']) {
+		if (config_path_enabled('ezshaper/step3')) {
 			$voip = true;
 			if ($sched != "PRIQ") {
-				$voipbw = $config['ezshaper']['step3']["conn{$i}upload"];
-				$voipbwunit = $config['ezshaper']['step3']["conn{$i}uploadspeed"];
-				if ($voipbwunit == "%")
+				$voipbw = config_get_path("ezshaper/step3/conn${i}upload");
+				$voipbwunit = config_get_path("ezshaper/step3/conn${i}uploadspeed");
+				if ($voipbwunit == "%") {
 					$factor =  $upbw/100;
-				else
+				} else {
 					$factor = wizard_get_bandwidthtype_scale($voipbwunit);
+				}
 				$remainbw += $voipbw * $factor;
 			}
 		}
-		if ($config['ezshaper']['step4']['enable']) {
+		if (config_path_enabled('ezshaper/step4')) {
 			$penalty = true;
 			if ($sched != "PRIQ") {
-				$penaltybw = $config['ezshaper']['step4']['bandwidth'];
-				$penaltybwunit = $config['ezshaper']['step4']['bandwidthunit'];
-				if ($penaltybwunit == "%")
+				$penaltybw = config_get_path('ezshaper/step4/bandwidth');
+				$penaltybwunit = config_get_path('ezshaper/step4/bandwidthunit');
+				if ($penaltybwunit == "%") {
 					$factor = $upbw/100;
-				else
+				} else {
 					$factor = wizard_get_bandwidthtype_scale($penaltybwunit);
+				}
 				$remainbw += $penaltybw * $factor;
 			}
 		}
-		if ($config['ezshaper']['step5']['enable']) {
+		if (config_path_enabled('ezshaper/step5')) {
 			$p2p = true;
-			if ($config['ezshaper']['step5']['p2pcatchall']) {
+			if (!empty(config_get_path('ezshaper/step5/p2pcatchall'))) {
 				$p2pcatchall = true;
 				if ($sched != "PRIQ") {
-					$p2pcatchbw = $config['ezshaper']['step5']['bandwidth'];
-					$p2pcatchbwunit = $config['ezshaper']['step5']['bandwidthunit'];
-					if ($p2pcatchbwunit == "%")
+					$p2pcatchbw = config_get_path('ezshaper/step5/bandwidth');
+					$p2pcatchbwunit = config_get_path('ezshaper/step5/bandwidthunit');
+					if ($p2pcatchbwunit == "%") {
 						$factor = $upbw/100;
-					else
+					} else {
 						$factor = wizard_get_bandwidthtype_scale($p2pcatchbwunit);
+					}
 					$remainbw += $p2pcatchbw * $factor;
 				}
 			} else {
@@ -748,413 +781,417 @@ function apply_all_chosen_items() {
 			$p2pcatchall = false;
 			$p2pcatchbw = 0;
 		}
-		if ($config['ezshaper']['step6']['enable']) {
+		if (config_path_enabled('ezshaper/step6')) {
 			$games = true;
 		} else {
 			$games = false;
 		}
 
-		if ($config['ezshaper']['step7']['enable']) {
+		if (config_path_enabled('ezshaper/step7')) {
 			$otherpriority = true;
 		} else  {
 			$otherpriority = false;
 		}
 
-			if ($sched != "PRIQ") {
-				$remainbw = round($remainbw / $upbw * 100, 2);
+		if ($sched != "PRIQ") {
+			$remainbw = round($remainbw / $upbw * 100, 2);
 
-				if (intval($remainbw) > 0 && intval($remainbw) > 30) {
-					$savemsg=gettext("Custom Bandwidths are greater than 30%. Please lower them for the wizard to continue.");
-					header("Location: wizard.php?xml=traffic_shaper_wizard_dedicated.xml&stepid=2&message={$savemsg}");
-					exit;
-				} else {
-					$remainbw = 100 - $remainbw;
-				}
+			if (intval($remainbw) > 0 && intval($remainbw) > 30) {
+				$savemsg=gettext("Custom Bandwidths are greater than 30%. Please lower them for the wizard to continue.");
+				header("Location: wizard.php?xml=traffic_shaper_wizard_dedicated.xml&stepid=2&message={$savemsg}");
+				exit;
+			} else {
+				$remainbw = 100 - $remainbw;
+			}
 
-				if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue();
-					$q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue();
-					$q =& $__tmp_q;
-				}
+			if ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
+			}
 
-				$tmpcf = array();
-				$tmpcf['name'] = "qInternet";
-				//$tmpcf['priority'] = 6;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				If ($sched == "CBQ") {
-					$tmpcf['bandwidth'] = floatval($config['ezshaper']['step2']["conn{$i}upload"]);
-					$tmpcf['bandwidthtype'] = $config['ezshaper']['step2']["conn{$i}uploadspeed"];
-				}
-				else if ($sched == "HFSC") {
+			$tmpcf = [];
+			$tmpcf['name'] = "qInternet";
+			//$tmpcf['priority'] = 6;
+			$tmpcf['ecn'] = "on";
+			$tmpcf['enabled'] = "on";
+			If ($sched == "CBQ") {
+				$tmpcf['bandwidth'] = floatval(config_get_path("ezshaper/step2/conn${i}upload", 0.0));
+				$tmpcf['bandwidthtype'] = config_get_path("ezshaper/step2/conn${i}uploadspeed");
+			} elseif ($sched == "HFSC") {
+				$tmpcf['upperlimit'] = "on";
+				$tmpcf['upperlimit3'] = floatval(config_get_path("ezshaper/step2/conn${i}upload", 0.0)) .
+							config_get_path("ezshaper/step2/conn${i}uploadspeed");
+				$tmpcf['linkshare'] = "on";
+				$tmpcf['linkshare3'] = floatval(config_get_path("ezshaper/step2/conn${i}upload", 0.0)) .
+							config_get_path("ezshaper/step2/conn${i}uploadspeed");
+				$tmpcf['bandwidth'] =  floatval(config_get_path("ezshaper/step2/conn${i}upload", 0.0));
+				$tmpcf['bandwidthtype'] = config_get_path("ezshaper/step2/conn${i}uploadspeed");
+			}
+
+			array_push($tmppath, "qInternet");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+			//array_pop($tmppath);
+			$qtmp->wconfig();
+			$altq =& $qtmp;
+		}
+
+		if ($sched == "PRIQ") {
+			$__tmp_q = new priq_queue(); $q =& $__tmp_q;
+		} elseif ($sched == "CBQ") {
+			$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
+		} elseif ($sched == "HFSC") {
+			$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+		}
+		$tmpcf = [];
+		$tmpcf['name'] = "qACK";
+		$tmpcf['priority'] = 6;
+		$tmpcf['ecn'] = "on";
+		$tmpcf['enabled'] = "on";
+		If ($sched == "CBQ") {
+			$tmpcf['borrow'] = "on";
+			$tmpcf['bandwidth'] = intval($remainbw * 0.2);
+			$tmpcf['bandwidthtype'] = "%";
+		} elseif ($sched == "HFSC") {
+			$lkbw = 0.20 * $remainbw;
+			$tmpcf['linkshare3'] = intval($lkbw) . "%";
+			$tmpcf['linkshare'] = "on";
+			$tmpcf['bandwidth'] = intval($lkbw);
+			$tmpcf['bandwidthtype'] = "%";
+		}
+		array_push($tmppath, "qACK");
+		$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+		array_pop($tmppath);
+		$qtmp->wconfig();
+
+		if ($sched == "PRIQ") {
+			$__tmp_q = new priq_queue();
+			$q =& $__tmp_q;
+		} elseif ($sched == "CBQ") {
+			$__tmp_q = new cbq_queue();
+			$q =& $__tmp_q;
+		} elseif ($sched == "HFSC") {
+			$__tmp_q = new hfsc_queue();
+			$q =& $__tmp_q;
+		}
+		$tmpcf = [];
+		if ($p2pcatchall) {
+			$tmpcf['name'] = "qOthersDefault";
+		} else {
+			$tmpcf['name'] = "qDefault";
+		}
+		$tmpcf['priority'] = 3;
+		$tmpcf['enabled'] = "on";
+		if (!$p2pcatchall) {
+			$tmpcf['default'] = "on";
+		}
+		$tmpcf['ecn'] = "on";
+		if ($sched == "CBQ") {
+			$tmpcf['borrow'] = "on";
+			$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
+			$tmpcf['bandwidthtype'] = "%";
+		} elseif ($sched == "HFSC") {
+			$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
+			$tmpcf['bandwidthtype'] = "%";
+		}
+		array_push($tmppath, $tmpcf['name']);
+		$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+		array_pop($tmppath);
+		$qtmp->wconfig();
+
+		if ($p2p) {
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
+			}
+			$tmpcf = [];
+			$tmpcf['name'] = "qP2P";
+			$tmpcf['priority'] = 1;
+			$tmpcf['ecn'] = "on";
+			$tmpcf['enabled'] = "on";
+			if ($p2pcatchall) {
+				if ($sched == "CBQ") {
+					$tmpcf['borrow'] = "on";
+					$tmpcf['bandwidth'] = $p2pcatchbw;
+					$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
+				} elseif ($sched == "HFSC") {
+					$tmpcf['linkshare'] = "on";
+					$tmpcf['linkshare3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
 					$tmpcf['upperlimit'] = "on";
-					$tmpcf['upperlimit3'] =
-						floatval($config['ezshaper']['step2']["conn{$i}upload"]) . $config['ezshaper']['step2']["conn{$i}uploadspeed"];
+					$tmpcf['upperlimit3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
+					$tmpcf['bandwidth'] = $p2pcatchbw;
+					$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
+				}
+				$tmpcf['default'] = "on";
+			} else {
+				if ($sched == "CBQ") {
+					$tmpcf['borrow'] = "on";
+					$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
+					$tmpcf['bandwidthtype'] = "%";
+				} elseif ($sched == "HFSC") {
+					$tmpbw = $remainbw * 0.05; /* 5% bandwidth */
 					$tmpcf['linkshare'] = "on";
-					$tmpcf['linkshare3'] = floatval($config['ezshaper']['step2']["conn{$i}upload"]) . $config['ezshaper']['step2']["conn{$i}uploadspeed"];
-					$tmpcf['bandwidth'] =  floatval($config['ezshaper']['step2']["conn{$i}upload"]);
-					$tmpcf['bandwidthtype'] = $config['ezshaper']['step2']["conn{$i}uploadspeed"];
+					$tmpcf['linkshare3'] = "{$tmpbw}%";
+					$tmpcf['upperlimit'] = "on";
+					$tmpcf['upperlimit3'] = "{$tmpbw}%";
+					$tmpcf['bandwidth'] = $tmpbw;
+					$tmpcf['bandwidthtype'] = "%";
 				}
-				array_push($tmppath, "qInternet");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				//array_pop($tmppath);
-				//echo "qInternet <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
-				$altq =& $qtmp;
 			}
+			array_push($tmppath, "qP2P");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+			array_pop($tmppath);
+			$qtmp->wconfig();
+		}
 
+		if ($voip) {
 			if ($sched == "PRIQ") {
-				$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
-			$tmpcf['name'] = "qACK";
-			$tmpcf['priority'] = 6;
+			$tmpcf = [];
+			$tmpcf['name'] = "qVoIP";
+			$tmpcf['priority'] = 7;
 			$tmpcf['ecn'] = "on";
 			$tmpcf['enabled'] = "on";
-			If ($sched == "CBQ") {
+			if ($sched == "CBQ") {
 				$tmpcf['borrow'] = "on";
-				$tmpcf['bandwidth'] = $remainbw * 0.2;
-				$tmpcf['bandwidthtype'] = "%";
+				if ($voipbw > 0) {
+					$tmpcf['bandwidth'] = $voipbw;
+					$tmpcf['bandwidthtype'] = $voipbwunit;
+				} else {
+					$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
+					$tmpcf['bandwidthtype'] = "%";
+				}
+			} elseif ($sched == "HFSC") {
+				if ($voipbw > 0) {
+					$tmpcf['realtime3'] = "{$voipbw}{$voipbwunit}";
+				} else {
+					$voipbw = $remainbw * 0.20; /* 20% bandwidth */
+					$tmpcf['realtime3'] = "{$voipbw}%";
+				}
+				$tmpcf['realtime'] = "on";
+				$tmpcf['bandwidth'] = 32;
+				$tmpcf['bandwidthtype'] = "Kb";
 			}
-			else if ($sched == "HFSC") {
-				$lkbw = 0.20 * $remainbw;
-				$tmpcf['linkshare3'] = "{$lkbw}%";
+			array_push($tmppath, "qVoIP");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+			array_pop($tmppath);
+			$qtmp->wconfig();
+		}
+
+		if ($games) {
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
+			}
+			$tmpcf = [];
+			$tmpcf['name'] = "qGames";
+			$tmpcf['priority'] = 5;
+			$tmpcf['enabled'] = "on";
+			$tmpcf['ecn'] = "on";
+			if ($sched == "CBQ") {
+				$tmpcf['borrow'] = "on";
+				$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
+				$tmpcf['bandwidthtype'] = "%";
+			} elseif ($sched == "HFSC") {
+				$gamesbw = $remainbw * 0.2; /* 20% bandwidth */
 				$tmpcf['linkshare'] = "on";
-				$tmpcf['bandwidth'] = $lkbw;
+				$tmpcf['linkshare3'] = "{$gamesbw}%";
+				$tmpcf['bandwidth'] = "{$gamesbw}";
 				$tmpcf['bandwidthtype'] = "%";
 			}
-			array_push($tmppath, "qACK");
+			array_push($tmppath, "qGames");
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
-			//echo "qACK <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
+		}
 
+		if ($otherpriority) {
 			if ($sched == "PRIQ") {
-				$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
-			if ($p2pcatchall)
-				$tmpcf['name'] = "qOthersDefault";
-			else
-				$tmpcf['name'] = "qDefault";
-			$tmpcf['priority'] = 3;
-			$tmpcf['enabled'] = "on";
-			if (!$p2pcatchall)
-				$tmpcf['default'] = "on";
+			$tmpcf = [];
+			$tmpcf['name'] = "qOthersHigh";
+			$tmpcf['priority'] = 4;
 			$tmpcf['ecn'] = "on";
+			$tmpcf['enabled'] = "on";
 			if ($sched == "CBQ") {
 				$tmpcf['borrow'] = "on";
 				$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
 				$tmpcf['bandwidthtype'] = "%";
-			} else if ($sched == "HFSC") {
-				$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
+			} elseif ($sched == "HFSC") {
+				$tmpcf['linkshare'] = "on";
+				$otherbw = $remainbw * 0.1; /* 10% bandwidth */
+				$tmpcf['linkshare3'] = "{$otherbw}%";
+				$tmpcf['bandwidth'] = $otherbw;
 				$tmpcf['bandwidthtype'] = "%";
 			}
-			array_push($tmppath, $tmpcf['name']);
+			array_push($tmppath, "qOthersHigh");
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
-			//echo "qDefault <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
 
-			if ($p2p) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
+			}
+			$tmpcf = [];
+			$tmpcf['name'] = "qOthersLow";
+			$tmpcf['priority'] = 2;
+			$tmpcf['ecn'] = "on";
+			$tmpcf['enabled'] = "on";
+			if ($sched == "CBQ") {
+				$tmpcf['borrow'] = "on";
+				if ($penalty) {
+					$tmpcf['bandwidthtype'] = $penaltybwunit;
+					$tmpcf['bandwidth'] = $penaltybw;
+				} else {
+					$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
+					$tmpcf['bandwidthtype'] = "%";
 				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qP2P";
-				$tmpcf['priority'] = 1;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				if ($p2pcatchall) {
-					if ($sched == "CBQ") {
-						$tmpcf['borrow'] = "on";
-						$tmpcf['bandwidth'] = $p2pcatchbw;
-						$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
-					} else if ($sched == "HFSC") {
-						$tmpcf['linkshare'] = "on";
-						$tmpcf['linkshare3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
-						$tmpcf['upperlimit'] = "on";
-						$tmpcf['upperlimit3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
-						$tmpcf['bandwidth'] = $p2pcatchbw;
-						$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
-					}
-					$tmpcf['default'] = "on";
-
+			} elseif ($sched == "HFSC") {
+				if ($penalty) {
+					$tmpcf['linkshare3'] = "{$penaltybw}{$penaltybwunit}";
+					$tmpcf['bandwidth'] = $penaltybw;
+					$tmpcf['bandwidthtype'] = $penaltybwunit;
 				} else {
-					if ($sched == "CBQ") {
-						$tmpcf['borrow'] = "on";
-						$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
-						$tmpcf['bandwidthtype'] = "%";
-					} else if ($sched == "HFSC") {
-						$tmpbw = $remainbw * 0.05; /* 5% bandwidth */
-						$tmpcf['linkshare'] = "on";
-						$tmpcf['linkshare3'] = "{$tmpbw}%";
-						$tmpcf['upperlimit'] = "on";
-						$tmpcf['upperlimit3'] = "{$tmpbw}%";
-						$tmpcf['bandwidth'] = $tmpbw;
-						$tmpcf['bandwidthtype'] = "%";
-					}
+					$lsbw = $remainbw * 0.05;
+					$tmpcf['linkshare3'] = "{$lsbw}%"; /* 5% bandwidth */
+					$tmpcf['bandwidth'] = $lsbw;
+					$tmpcf['bandwidthtype'] = "%";
 				}
-				array_push($tmppath, "qP2P");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qP2P <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
+				$tmpcf['linkshare'] = "on";
 			}
+			array_push($tmppath, "qOthersLow");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+			array_pop($tmppath);
+			$qtmp->wconfig();
+		}
+		array_pop($tmppath);
 
-			if ($voip) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
-				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qVoIP";
-				$tmpcf['priority'] = 7;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				if ($sched == "CBQ") {
-					$tmpcf['borrow'] = "on";
-					if ($voipbw > 0) {
-						$tmpcf['bandwidth'] = $voipbw;
-						$tmpcf['bandwidthtype'] = $voipbwunit;
-					} else {
-						$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
-						$tmpcf['bandwidthtype'] = "%";
-					}
-				} else if ($sched == "HFSC") {
-					if ($voipbw > 0) {
-						$tmpcf['realtime3'] = "{$voipbw}{$voipbwunit}";
-					} else {
-						$voipbw = $remainbw * 0.20; /* 20% bandwidth */
-						$tmpcf['realtime3'] = "{$voipbw}%";
-					}
-					$tmpcf['realtime'] = "on";
-					$tmpcf['bandwidth'] = 32;
-					$tmpcf['bandwidthtype'] = "Kb";
-				}
-				array_push($tmppath, "qVoIP");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qVoIP <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
-			}
+		$downfactor = wizard_get_bandwidthtype_scale(config_get_path("ezshaper/step2/conn${i}downloadspeed"));
+		$downbw = floatval(config_get_path("ezshaper/step2/conn${i}download", 0.0)) * $downfactor;
 
-			if ($games) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
-				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qGames";
-				$tmpcf['priority'] = 5;
-				$tmpcf['enabled'] = "on";
-				$tmpcf['ecn'] = "on";
-				if ($sched == "CBQ") {
-					$tmpcf['borrow'] = "on";
-					$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
-					$tmpcf['bandwidthtype'] = "%";
-				} else if ($sched == "HFSC") {
-					$gamesbw = $remainbw * 0.2; /* 20% bandwidth */
-					$tmpcf['linkshare'] = "on";
-					$tmpcf['linkshare3'] = "{$gamesbw}%";
-					$tmpcf['bandwidth'] = "{$gamesbw}";
-					$tmpcf['bandwidthtype'] = "%";
-				}
-				array_push($tmppath, "qGames");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qGames <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
-			}
+		$tmppath = [];
+		$__tmp_altq = new altq_root_queue(); $altq =& $__tmp_altq;
 
-			if ($otherpriority) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
-				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qOthersHigh";
-				$tmpcf['priority'] = 4;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				if ($sched == "CBQ") {
-					$tmpcf['borrow'] = "on";
-					$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
-					$tmpcf['bandwidthtype'] = "%";
-				} else if ($sched == "HFSC") {
-					$tmpcf['linkshare'] = "on";
-					$otherbw = $remainbw * 0.1; /* 10% bandwidth */
-					$tmpcf['linkshare3'] = "{$otherbw}%";
-					$tmpcf['bandwidth'] = $otherbw;
-					$tmpcf['bandwidthtype'] = "%";
-				}
-				array_push($tmppath, "qOthersHigh");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qHigh <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
-
-
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
-				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qOthersLow";
-				$tmpcf['priority'] = 2;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				if ($sched == "CBQ") {
-					$tmpcf['borrow'] = "on";
-					if ($penalty) {
-						$tmpcf['bandwidthtype'] = $penaltybwunit;
-						$tmpcf['bandwidth'] = $penaltybw;
-					} else {
-						$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
-						$tmpcf['bandwidthtype'] = "%";
-					}
-				} else if ($sched == "HFSC") {
-					if ($penalty) {
-						$tmpcf['linkshare3'] = "{$penaltybw}{$penaltybwunit}";
-						$tmpcf['bandwidth'] = $penaltybw;
-						$tmpcf['bandwidthtype'] = $penaltybwunit;
+		$altq->SetInterface(config_get_path("ezshaper/step2/local${i}interface"));
+		$altq->SetScheduler(config_get_path("ezshaper/step2/local{$i}downloadscheduler"));
+		$altq->SetBandwidth(floatval(config_get_path("ezshaper/step2/conn${i}download", 0.0)));
+		$altq->SetBwscale(config_get_path("ezshaper/step2/conn${i}downloadspeed"));
+		$altq->SetEnabled("on");
+		$altq_list_queues[$altq->GetQname()] =& $altq;
+		array_push($tmppath, config_get_path("ezshaper/step2/local${i}interface"));
+		$altq->SetLink($tmppath);
+		$altq->wconfig();
+
+		$sched = config_get_path("ezshaper/step2/local{$i}downloadscheduler");
+		$voipbw =0;
+		$voipbwunit = "%";
+		$voip = false;
+		$penalty = false;
+		$penaltybw = 0;
+		$penaltybwunit = "%";
+		$p2p = false;
+		$p2pcatchall = false;
+		$p2pcatchbw = 0;
+		$games = false;
+		$otherpriority = false;
+		$remainbw = 0;
+
+		if (config_path_enabled('ezshaper/step3')) {
+			$voip = true;
+			if ($sched != "PRIQ") {
+				$voipbw = config_get_path("ezshaper/step3/local{$i}download");
+				$voipbwunit = config_get_path("ezshaper/step3/local{$i}downloadspeed");
+				if ($sched != 'HFSC') {
+					if ($voipbwunit == "%") {
+						$factor = $downbw/100;
 					} else {
-						$lsbw = $remainbw * 0.05;
-						$tmpcf['linkshare3'] = "{$lsbw}%"; /* 5% bandwidth */
-						$tmpcf['bandwidth'] = $lsbw;
-						$tmpcf['bandwidthtype'] = "%";
+						$factor = wizard_get_bandwidthtype_scale($voipbwunit);
 					}
-					$tmpcf['linkshare'] = "on";
+					$remainbw += floatval($voipbw) * $factor;
+				} else {
+					$remainbw += 32000; /* 32Kbit/s reserved for HFSC link sharing */
 				}
-				array_push($tmppath, "qOthersLow");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qLow <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
 			}
-			array_pop($tmppath);
-
-			$downfactor = wizard_get_bandwidthtype_scale($config['ezshaper']['step2']["conn{$i}downloadspeed"]);
-			$downbw = floatval($config['ezshaper']['step2']["conn{$i}download"]) * $downfactor;
-
-			$tmppath = array();
-			$__tmp_altq = new altq_root_queue(); $altq =& $__tmp_altq;
-
-			$altq->SetInterface($config['ezshaper']['step2']["local{$i}interface"]);
-			$altq->SetScheduler($config['ezshaper']['step2']["local{$i}downloadscheduler"]);
-			$altq->SetBandwidth(floatval($config['ezshaper']['step2']["conn{$i}download"]));
-			$altq->SetBwscale($config['ezshaper']['step2']["conn{$i}downloadspeed"]);
-			$altq->SetEnabled("on");
-			$altq_list_queues[$altq->GetQname()] =& $altq;
-			array_push($tmppath, $config['ezshaper']['step2']["local{$i}interface"]);
-			$altq->SetLink($tmppath);
-			//var_dump($input_errors);
-			$altq->wconfig();
-
-			$sched = $config['ezshaper']['step2']["local{$i}downloadscheduler"];
-			$voipbw =0;
-			$voipbwunit = "%";
-			$voip = false;
-			$penalty = false;
-			$penaltybw = 0;
-			$penaltybwunit = "%";
-			$p2p = false;
-			$p2pcatchall = false;
-			$p2pcatchbw = 0;
-			$games = false;
-			$otherpriority = false;
-			$remainbw = 0;
-
-			if ($config['ezshaper']['step3']['enable']) {
-				$voip = true;
-				if ($sched != "PRIQ") {
-					$voipbw = $config['ezshaper']['step3']["local{$i}download"];
-					$voipbwunit = $config['ezshaper']['step3']["local{$i}downloadspeed"];
-					if ($sched != 'HFSC') {
-						if ($voipbwunit == "%")
-							$factor = $downbw/100;
-						else
-							$factor = wizard_get_bandwidthtype_scale($voipbwunit);
-						$remainbw += floatval($voipbw) * $factor;
-					} else
-					$remainbw += 32000; /* 32Kbit/s reserved for HFSC link sharing */
+		}
+		if (config_path_enabled('ezshaper/step4')) {
+			$penalty = true;
+			if ($sched != "PRIQ") {
+				$penaltybw = config_get_path('ezshaper/step4/bandwidth');
+				$penaltybwunit = config_get_path('ezshaper/step4/bandwidthunit');
+				if ($penaltybwunit == "%") {
+					$factor = $downbw/100;
+				} else {
+					$factor = wizard_get_bandwidthtype_scale($penaltybwunit);
 				}
+				$remainbw += floatval($penaltybw) * $factor;
 			}
-			if ($config['ezshaper']['step4']['enable']) {
-				$penalty = true;
+		}
+		if (config_path_enabled('ezshaper/step5')) {
+			$p2p = true;
+			if (!empty(config_get_path('ezshaper/step5/p2pcatchall'))) {
+				$p2pcatchall = true;
 				if ($sched != "PRIQ") {
-					$penaltybw = $config['ezshaper']['step4']['bandwidth'];
-					$penaltybwunit = $config['ezshaper']['step4']['bandwidthunit'];
-					if ($penaltybwunit == "%")
+					$p2pcatchbw = config_get_path('ezshaper/step5/bandwidth');
+					$p2pcatchbwunit = config_get_path('ezshaper/step5/bandwidthunit');
+					if ($p2pcatchbwunit == "%") {
 						$factor = $downbw/100;
-					else
-						$factor = wizard_get_bandwidthtype_scale($penaltybwunit);
-					$remainbw += floatval($penaltybw) * $factor;
-				}
-			}
-			if ($config['ezshaper']['step5']['enable']) {
-				$p2p = true;
-				if ($config['ezshaper']['step5']['p2pcatchall']) {
-					$p2pcatchall = true;
-					if ($sched != "PRIQ") {
-						$p2pcatchbw = $config['ezshaper']['step5']['bandwidth'];
-						$p2pcatchbwunit = $config['ezshaper']['step5']['bandwidthunit'];
-						if ($p2pcatchbwunit == "%")
-							$factor = $downbw/100;
-						else
-							$factor = wizard_get_bandwidthtype_scale($p2pcatchbwunit);
-						$remainbw += floatval($p2pcatchbw) * $factor;
+					} else {
+						$factor = wizard_get_bandwidthtype_scale($p2pcatchbwunit);
 					}
-				} else {
-					$p2pcatchall = false;
-					$p2pcatchbw = 0;
+					$remainbw += floatval($p2pcatchbw) * $factor;
 				}
 			} else {
-				$p2p = false;
 				$p2pcatchall = false;
 				$p2pcatchbw = 0;
 			}
-		if ($config['ezshaper']['step6']['enable']) {
+		} else {
+			$p2p = false;
+			$p2pcatchall = false;
+			$p2pcatchbw = 0;
+		}
+		if (config_path_enabled('ezshaper/step6')) {
 			$games = true;
 		} else {
 			$games = false;
 		}
-
-		if ($config['ezshaper']['step7']['enable']) {
+		if (config_path_enabled('ezshaper/step7')) {
 			$otherpriority = true;
 		} else  {
 			$otherpriority = false;
@@ -1173,13 +1210,16 @@ function apply_all_chosen_items() {
 
 		if (!$p2pcatchall) {
 			if ($sched == "PRIQ") {
-				$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
+			$tmpcf = [];
 			$tmpcf['name'] = "qLink";
 			$tmpcf['priority'] = 2;
 			$tmpcf['enabled'] = "on";
@@ -1190,27 +1230,29 @@ function apply_all_chosen_items() {
 				$tmpcf['borrow'] = "on";
 				$tmpcf['bandwidth'] = 20; /* 20% bandwidth */
 				$tmpcf['bandwidthtype'] = "%";
-			} else if ($sched == "HFSC") {
+			} elseif ($sched == "HFSC") {
 				$tmpcf['bandwidth'] = 20; /* 20% bandwidth */
 				$tmpcf['bandwidthtype'] = "%";
 			}
 			array_push($tmppath, $tmpcf['name']);
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
-			//echo "qDefault <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
 
-			$downqbw *= 0.8; /* $downqbw - 20% */
+			if ($sched != "PRIQ") {
+				$downqbw *= 0.8; /* $downqbw - 20% */
+			}
 		}
 
 		if ($sched != "PRIQ") {
 			if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
+			$tmpcf = [];
 			$tmpcf['name'] = "qInternet";
 			//$tmpcf['priority'] = 6;
 			$tmpcf['ecn'] = "on";
@@ -1218,8 +1260,7 @@ function apply_all_chosen_items() {
 			If ($sched == "CBQ") {
 				$tmpcf['bandwidth'] = $downqbw / 1000;
 				$tmpcf['bandwidthtype'] = "Kb";
-			}
-			else if ($sched == "HFSC") {
+			} elseif ($sched == "HFSC") {
 				$tmpcf['upperlimit'] = "on";
 				$tmpcf['upperlimit3'] = ($downqbw / 1000) . "Kb";
 				$tmpcf['linkshare'] = "on";
@@ -1230,20 +1271,21 @@ function apply_all_chosen_items() {
 			array_push($tmppath, "qInternet");
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			//array_pop($tmppath);
-			//echo "qInternet <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
 			$altq =& $qtmp;
 		}
 
 		if ($sched == "PRIQ") {
-			$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-		} else if ($sched == "CBQ") {
-			$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-		} else if ($sched == "HFSC") {
-			$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+			$__tmp_q = new priq_queue();
+			$q =& $__tmp_q;
+		} elseif ($sched == "CBQ") {
+			$__tmp_q = new cbq_queue();
+			$q =& $__tmp_q;
+		} elseif ($sched == "HFSC") {
+			$__tmp_q = new hfsc_queue();
+			$q =& $__tmp_q;
 		}
-		$tmpcf = array();
+		$tmpcf = [];
 		$tmpcf['name'] = "qACK";
 		$tmpcf['priority'] = 6;
 		$tmpcf['ecn'] = "on";
@@ -1252,7 +1294,7 @@ function apply_all_chosen_items() {
 			$tmpcf['borrow'] = "on";
 			$tmpcf['bandwidth'] = $remainbw * 0.2;
 			$tmpcf['bandwidthtype'] = "%";
-		} else if ($sched == "HFSC") {
+		} elseif ($sched == "HFSC") {
 			$lkbw = 0.20 * $remainbw;
 			$tmpcf['linkshare3'] = "{$lkbw}%";
 			$tmpcf['linkshare'] = "on";
@@ -1262,19 +1304,20 @@ function apply_all_chosen_items() {
 		array_push($tmppath, "qACK");
 		$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 		array_pop($tmppath);
-		//echo "qACK $remainbw <br />";
-		//var_dump($input_errors);
 		$qtmp->wconfig();
 
 		if ($p2p) {
 			if ($sched == "PRIQ") {
-				$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
+			$tmpcf = [];
 			$tmpcf['name'] = "qP2P";
 			$tmpcf['priority'] = 1;
 			$tmpcf['ecn'] = "on";
@@ -1284,7 +1327,7 @@ function apply_all_chosen_items() {
 					$tmpcf['borrow'] = "on";
 					$tmpcf['bandwidth'] = $p2pcatchbw;
 					$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
-				} else if ($sched == "HFSC") {
+				} elseif ($sched == "HFSC") {
 					$tmpcf['linkshare'] = "on";
 					$tmpcf['linkshare3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
 					$tmpcf['upperlimit'] = "on";
@@ -1299,7 +1342,7 @@ function apply_all_chosen_items() {
 					$tmpcf['borrow'] = "on";
 					$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
 					$tmpcf['bandwidthtype'] = "%";
-				} else if ($sched == "HFSC") {
+				} elseif ($sched == "HFSC") {
 					$tmpbw = $remainbw * 0.05; /* 5% bandwidth */
 					$tmpcf['linkshare'] = "on";
 					$tmpcf['linkshare3'] = "{$tmpbw}%";
@@ -1312,20 +1355,21 @@ function apply_all_chosen_items() {
 			array_push($tmppath, "qP2P");
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
-			//echo "qP2P <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
 		}
 
 		if ($voip) {
 			if ($sched == "PRIQ") {
-				$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
+			$tmpcf = [];
 			$tmpcf['name'] = "qVoIP";
 			$tmpcf['priority'] = 7;
 			$tmpcf['ecn'] = "on";
@@ -1339,7 +1383,7 @@ function apply_all_chosen_items() {
 					$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
 					$tmpcf['bandwidthtype'] = "%";
 				}
-			} else if ($sched == "HFSC") {
+			} elseif ($sched == "HFSC") {
 				if ($voipbw > 0) {
 					$tmpcf['realtime3'] = "{$voipbw}{$voipbwunit}";
 				} else {
@@ -1353,20 +1397,21 @@ function apply_all_chosen_items() {
 			array_push($tmppath, "qVoIP");
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
-			//echo "qVoIP <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
 		}
 
 		if ($games) {
 			if ($sched == "PRIQ") {
-				$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
+			$tmpcf = [];
 			$tmpcf['name'] = "qGames";
 			$tmpcf['priority'] = 5;
 			$tmpcf['enabled'] = "on";
@@ -1375,7 +1420,7 @@ function apply_all_chosen_items() {
 				$tmpcf['borrow'] = "on";
 				$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
 				$tmpcf['bandwidthtype'] = "%";
-			} else if ($sched == "HFSC") {
+			} elseif ($sched == "HFSC") {
 				$gamesbw = $remainbw * 0.2; /* 20% bandwidth */
 				$tmpcf['linkshare'] = "on";
 				$tmpcf['linkshare3'] = "{$gamesbw}%";
@@ -1385,20 +1430,21 @@ function apply_all_chosen_items() {
 			array_push($tmppath, "qGames");
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
-			//echo "qGames <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
 		}
 
 		if ($otherpriority) {
 			if ($sched == "PRIQ") {
-				$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
+			$tmpcf = [];
 			$tmpcf['name'] = "qOthersHigh";
 			$tmpcf['priority'] = 4;
 			$tmpcf['ecn'] = "on";
@@ -1407,7 +1453,7 @@ function apply_all_chosen_items() {
 				$tmpcf['borrow'] = "on";
 				$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
 				$tmpcf['bandwidthtype'] = "%";
-			} else if ($sched == "HFSC") {
+			} elseif ($sched == "HFSC") {
 				$tmpcf['linkshare'] = "on";
 				$otherbw = $remainbw * 0.1; /* 10% bandwidth */
 				$tmpcf['linkshare3'] = "{$otherbw}%";
@@ -1417,18 +1463,19 @@ function apply_all_chosen_items() {
 			array_push($tmppath, "qOthersHigh");
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
-			//echo "qHigh <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
 
 			if ($sched == "PRIQ") {
-				$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
+			$tmpcf = [];
 			$tmpcf['name'] = "qOthersLow";
 			$tmpcf['priority'] = 3;
 			$tmpcf['ecn'] = "on";
@@ -1442,7 +1489,7 @@ function apply_all_chosen_items() {
 					$tmpcf['bandwidthtype'] = "%";
 					$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
 				}
-			} else if ($sched == "HFSC") {
+			} elseif ($sched == "HFSC") {
 				if ($penalty) {
 					$tmpcf['linkshare3'] = "{$penaltybw}{$penaltybwunit}";
 					$tmpcf['bandwidth'] = $penaltybw;
@@ -1458,15 +1505,12 @@ function apply_all_chosen_items() {
 			array_push($tmppath, "qOthersLow");
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
-			//echo "qLow <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
 		}
 		array_pop($tmppath);
 	}
 
-	if (!is_array($config['filter']['rule']))
-		$config['filter']['rule'] = array();
+	$filter_rules = config_get_path('filter/rule', []);
 
 	if (!empty($interfacelist)) {
 		$interfacelist = implode(",", $interfacelist);
@@ -1477,13 +1521,14 @@ function apply_all_chosen_items() {
 	/* Rules */
 	$tracker = (int)microtime(true);
 	if ($penalty) {
-		if (is_ipaddr($config['ezshaper']['step4']['address']) || is_alias($config['ezshaper']['step4']['address'])) {
-			$rule = array();
+		if (is_ipaddr(config_get_path('ezshaper/step4/address')) ||
+		    is_alias(config_get_path('ezshaper/step4/address'))) {
+			$rule = [];
 			$rule['type'] = "match";
 			$rule['interface'] = $interfacelist;
-			if (is_ipaddrv4($config['ezshaper']['step4']['address'])) {
+			if (is_ipaddrv4(config_get_path('ezshaper/step4/address'))) {
 				$rule['ipprotocol'] = "inet";
-			} elseif (is_ipaddrv6($config['ezshaper']['step4']['address'])) {
+			} elseif (is_ipaddrv6(config_get_path('ezshaper/step4/address'))) {
 				$rule['ipprotocol'] = "inet6";
 			} else {
 				$rule['ipprotocol'] = "inet46";
@@ -1494,26 +1539,29 @@ function apply_all_chosen_items() {
 			} else {
 				$rule['defaultqueue'] = "qDefault";
 			}
-			$rule['source']['address'] = $config['ezshaper']['step4']['address'];
+			$rule['source'] = [];
+			$rule['source']['address'] = config_get_path('ezshaper/step4/address');
+			$rule['destination'] = [];
 			$rule['destination']['any'] = TRUE;
 			$rule['floating'] = "yes";
 			$rule['wizard'] = "yes";
 			$rule['enabled'] = "on";
 			$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
 			$rule['tracker'] = $tracker++;
-			$config['filter']['rule'][] = $rule;
+			$filter_rules[] = $rule;
 		}
 	}
 
 	/* If user specifies an IP, we don't bother with providers */
 	if ($voip) {
-		if (is_ipaddr($config['ezshaper']['step3']['address']) || is_alias($config['ezshaper']['step3']['address'])) {
+		if (is_ipaddr(config_get_path('ezshaper/step3/address')) ||
+		    is_alias(config_get_path('ezshaper/step3/address'))) {
 			/* create VOIP rules */
-			$rule = array();
+			$rule = [];
 			$rule['type'] = "match";
-			if (is_ipaddrv4($config['ezshaper']['step3']['address'])) {
+			if (is_ipaddrv4(config_get_path('ezshaper/step3/address'))) {
 				$ipprotocol = "inet";
-			} elseif (is_ipaddrv6($config['ezshaper']['step3']['address'])) {
+			} elseif (is_ipaddrv6(config_get_path('ezshaper/step3/address'))) {
 				$ipprotocol = "inet6";
 			} else {
 				$ipprotocol = "inet46";
@@ -1523,41 +1571,46 @@ function apply_all_chosen_items() {
 			$rule['descr'] = gettext("Connections From Upstream SIP Server");
 			$rule['protocol'] = "udp";
 			$rule['defaultqueue'] = "qVoIP";
-			$rule['source']['address'] = $config['ezshaper']['step3']['address'];
+			$rule['source'] = [];
+			$rule['source']['address'] = config_get_path('ezshaper/step3/address');
+			$rule['destination'] = [];
 			$rule['destination']['any'] = TRUE;
 			$rule['floating'] = "yes";
 			$rule['wizard'] = "yes";
 			$rule['enabled'] = "on";
 			$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
 			$rule['tracker'] = $tracker++;
-			$config['filter']['rule'][] = $rule;
+			$filter_rules[] = $rule;
 
-			$rule = array();
+			$rule = [];
 			$rule['type'] = "match";
 			$rule['interface'] = "any";
 			$rule['ipprotocol'] = $ipprotocol;
 			$rule['descr'] = gettext("Connections To Upstream SIP Server");
 			$rule['protocol'] = "udp";
 			$rule['defaultqueue'] = "qVoIP";
+			$rule['source'] = [];
 			$rule['source']['any'] = TRUE;
-			$rule['destination']['address'] = $config['ezshaper']['step3']['address'];
+			$rule['destination'] = [];
+			$rule['destination']['address'] = config_get_path('ezshaper/step3/address');
 			$rule['floating'] = "yes";
 			$rule['wizard'] = "yes";
 			$rule['enabled'] = "on";
 			$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
 			$rule['tracker'] = $tracker++;
-			$config['filter']['rule'][] = $rule;
-
-		} elseif ($config['ezshaper']['step3']['provider'] == "Generic") {
+			$filter_rules[] = $rule;
+		} elseif (config_get_path('ezshaper/step3/provider') == "Generic") {
 			/* create VOIP rules */
-			$rule = array();
+			$rule = [];
 			$rule['type'] = "match";
 			$rule['interface'] = $interfacelist;
 			$rule['ipprotocol'] = "inet46";
 			$rule['descr'] = "DiffServ/Lowdelay/Upload";
 			$rule['protocol'] = "udp";
+			$rule['source'] = [];
 			$rule['source']['any'] = TRUE;
 			$rule['defaultqueue'] = "qVoIP";
+			$rule['destination'] = [];
 			$rule['destination']['any'] = TRUE;
 			$rule['iptos'] = "lowdelay";
 			$rule['floating'] = "yes";
@@ -1565,121 +1618,142 @@ function apply_all_chosen_items() {
 			$rule['enabled'] = "on";
 			$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
 			$rule['tracker'] = $tracker++;
-			$config['filter']['rule'][] = $rule;
-		} elseif (array_key_exists($config['ezshaper']['step3']['provider'], $voiplist)) {
+			$filter_rules[] = $rule;
+		} elseif (array_key_exists(config_get_path('ezshaper/step3/provider'), $voiplist)) {
 			/* loop through voiplist[] */
-			foreach ($voiplist[$config['ezshaper']['step3']['provider']] as $voip) {
-				$rule = array();
+			foreach ($voiplist[config_get_path('ezshaper/step3/provider')] as $voip) {
+				$rule = [];
 				$rule['type'] = "match";
 				$rule['interface'] = $interfacelist;
 				$rule['ipprotocol'] = "inet46";
 				$rule['defaultqueue'] = 'qVoIP';
+				$rule['source'] = [];
 				$rule['source']['any'] = TRUE;
+				$rule['destination'] = [];
 				$rule['destination']['any'] = TRUE;
 				$rule['descr'] = "m_voip {$voip[0]} outbound";
 				$rule['floating'] = "yes";
 				$rule['wizard'] = "yes";
 				$rule['enabled'] = "on";
 				$rule['destination']['port'] = $voip[2]."-".$voip[3];
-				if ($voip[1] != '')
+				if ($voip[1] != '') {
 					$rule['protocol'] = $voip[1];
+				}
 				$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
 				$rule['tracker'] = $tracker++;
-				$config['filter']['rule'][] = $rule;
+				$filter_rules[] = $rule;
 			}
 		}
 	}
 
 	/* loop through p2plist[] */
 	if ($p2p) {
-		foreach ($config['ezshaper']['step5'] as $key => $val) {
-			if (!is_array($p2plist[$key]))
+		foreach (config_get_path('ezshaper/step5', []) as $key => $val) {
+			if (!is_array($p2plist[$key])) {
 				continue;
+			}
 			foreach ($p2plist[$key] as $p2pclient) {
-				$rule = array();
+				$rule = [];
 				$rule['type'] = "match";
 				$rule['interface'] = $interfacelist;
 				$rule['ipprotocol'] = "inet46";
 				$rule['defaultqueue'] = 'qP2P';
+				$rule['source'] = [];
 				$rule['source']['any'] = TRUE;
+				$rule['destination'] = [];
 				$rule['destination']['any'] = TRUE;
 				$rule['descr'] = "m_P2P {$p2pclient[0]} outbound";
 				$rule['floating'] = "yes";
 				$rule['wizard'] = "yes";
 				$rule['destination']['port'] = $p2pclient[2]."-".$p2pclient[3];
-				if ($p2pclient[1] != '')
+				if ($p2pclient[1] != '') {
 					$rule['protocol'] = $p2pclient[1];
+				}
 				$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
 				$rule['tracker'] = $tracker++;
-				$config['filter']['rule'][] = $rule;
+				$filter_rules[] = $rule;
 			}
 		}
 	}
 
 	/* loop through gamesplist[] */
 	if ($games) {
-		foreach ($config['ezshaper']['step6'] as $key => $val) {
-			if (!is_array($gamesplist[$key]))
+		foreach (config_get_path('ezshaper/step6', []) as $key => $val) {
+			if (!is_array($gamesplist[$key])) {
 				continue;
+			}
 			foreach ($gamesplist[$key] as $Gameclient) {
-				$rule = array();
+				$rule = [];
 				$rule['type'] = "match";
 				$rule['interface'] = $interfacelist;
 				$rule['ipprotocol'] = "inet46";
 				$rule['defaultqueue'] = 'qGames';
-				if ($Gameclient[1] == "tcp")
+				if ($Gameclient[1] == "tcp") {
 					$rule['ackqueue'] = 'qACK';
+				}
+				$rule['source'] = [];
 				$rule['source']['any'] = TRUE;
+				$rule['destination'] = [];
 				$rule['destination']['any'] = TRUE;
 				$rule['floating'] = "yes";
 				$rule['wizard'] = "yes";
 				$rule['enabled'] = "on";
 				$rule['descr'] = "m_Game {$Gameclient[0]} outbound";
 				$rule['destination']['port'] = $Gameclient[2]."-".$Gameclient[3];
-				if ($Gameclient[1] != '')
+				if ($Gameclient[1] != '') {
 					$rule['protocol'] = $Gameclient[1];
-				$config['filter']['rule'][] = $rule;
+				}
+				$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
+				$rule['tracker'] = $tracker++;
+				$filter_rules[] = $rule;
 			}
 		}
 	}
 
 	/* loop through othersplist[] */
 	if ($otherpriority) {
-		foreach ($config['ezshaper']['step7'] as $key => $val) {
-			if (!is_array($othersplist[$key]))
+		foreach (config_get_path('ezshaper/step7', []) as $key => $val) {
+			if (!is_array($othersplist[$key])) {
 				continue;
+			}
 			foreach ($othersplist[$key] as $otherclient) {
-				$rule = array();
+				$rule = [];
 				$rule['type'] = "match";
 				$rule['interface'] = $interfacelist;
 				$rule['ipprotocol'] = "inet46";
 				switch ($val) {
 				case "H":
 					$rule['defaultqueue'] = 'qOthersHigh'; /* posted value H or L */
-					if ($otherclient[1] == "tcp")
+					if ($otherclient[1] == "tcp") {
 						$rule['ackqueue'] = 'qACK';
+					}
 					$loop = 0;
 					break;
 				case "L":
 					$rule['defaultqueue'] = 'qOthersLow'; /* posted value H or L */
-					if ($otherclient[1] == "tcp")
+					if ($otherclient[1] == "tcp") {
 						$rule['ackqueue'] = 'qACK';
+					}
 					$loop = 0;
 					break;
 				case "D":
 					if ($p2pcatchall) {
-							$loop = 0;
+						$loop = 0;
 						$rule['defaultqueue'] = 'qOthersDefault';
-						if ($otherclient[1] == "tcp")
+						if ($otherclient[1] == "tcp") {
 							$rule['ackqueue'] = 'qACK';
-					} else
+						}
+					} else {
 						$loop = 1; /* It automatically goes to default queue */
+					}
 					break;
 				default:
 					$loop = 1;
 				}
 				if (!$loop) {
+					$rule['source'] = [];
 					$rule['source']['any'] = TRUE;
+					$rule['destination'] = [];
 					$rule['destination']['any'] = TRUE;
 					$rule['floating'] = "yes";
 					$rule['wizard'] = "yes";
@@ -1689,15 +1763,18 @@ function apply_all_chosen_items() {
 					if ($otherclient[2] or $otherclient[3]) {
 						$rule['destination']['port'] = $otherclient[2]."-".$otherclient[3];
 					}
-					if ($otherclient[1] != '')
+					if ($otherclient[1] != '') {
 						$rule['protocol'] = $otherclient[1];
+					}
 					$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
 					$rule['tracker'] = $tracker++;
-					$config['filter']['rule'][] = $rule;
+					$filter_rules[] = $rule;
 				}
 			}
 		}
 	}
+
+	config_set_path('filter/rule', $filter_rules);
 	write_config(gettext("Shaper configuration saved via traffic shaper wizard."));
 }
 
diff --git a/src/usr/local/www/wizards/traffic_shaper_wizard_multi_all.inc b/src/usr/local/www/wizards/traffic_shaper_wizard_multi_all.inc
index efa3570c04..15d2ba755b 100644
--- a/src/usr/local/www/wizards/traffic_shaper_wizard_multi_all.inc
+++ b/src/usr/local/www/wizards/traffic_shaper_wizard_multi_all.inc
@@ -27,20 +27,22 @@ require_once("util.inc");
 
 function step1_stepbeforeformdisplay() {
 	global $stepid, $savemsg, $pkg;
-
-	$fields = &$pkg['step'][0]['fields']['field'];
+	$fields = array_get_path($pkg, 'step/0/fields/field', []);
 
 	$lans = 0;
 	$wans = 0;
 
 	$iflisttmp = get_configured_interface_with_descr();
 	foreach ($iflisttmp as $if => $ifdesc) {
-		if (!is_altq_capable(get_real_interface($if)))
+		if (!is_altq_capable(get_real_interface($if))) {
 			continue;
-		if (interface_has_gateway($if) || interface_has_gatewayv6($if))
+		}
+		if (interface_has_gateway($if) ||
+		    interface_has_gatewayv6($if)) {
 			$wans++;
-		else
+		} else {
 			$lans++;
+		}
 	}
 
 	foreach ($fields as &$field) {
@@ -49,13 +51,17 @@ function step1_stepbeforeformdisplay() {
 			if ($wans == 0) {
 				$field['description'] .= sprint_info_box(gettext("This firewall does not have any WAN-type interfaces assigned that are capable of using ALTQ traffic shaping."), 'danger', false);
 			}
-		} else if ($field['name'] == 'numberoflocalinterfaces') {
+		} elseif ($field['name'] == 'numberoflocalinterfaces') {
 			$field['value'] = $lans;
 			if ($lans == 0) {
 				$field['description'] .= sprint_info_box(gettext("This firewall does not have any LAN-type interfaces assigned that are capable of using ALTQ traffic shaping."), 'danger', false);
 			}
 		}
 	}
+
+	if (!empty($fields)) {
+		array_set_path($pkg, 'step/0/fields/field', $fields);
+	}
 }
 
 function step1_submitphpaction() {
@@ -91,59 +97,62 @@ function step2_stepbeforeformdisplay() {
 	$list_all_ifs = false;
 	$wans = 0;
 	$lans = 0;
-	$iflist = array();
+	$iflist = [];
 	$iflisttmp = get_configured_interface_with_descr();
 	foreach ($iflisttmp as $if => $ifdesc) {
-		if (!is_altq_capable(get_real_interface($if)))
+		if (!is_altq_capable(get_real_interface($if))) {
 			continue;
-		if (interface_has_gateway($if) || interface_has_gatewayv6($if))
+		}
+		if (interface_has_gateway($if) ||
+		    interface_has_gatewayv6($if)) {
 			$wans++;
-		else
+		} else {
 			$lans++;
+		}
 		$iflist[$if] = $ifdesc;
 	}
 	if ($wans == 0) {
 		$list_all_ifs = true;
 		$wans = $lans;
 	}
-	$numberofconnections = intval($config['ezshaper']['step1']['numberofconnections']);
+	$numberofconnections = intval(config_get_path('ezshaper/step1/numberofconnections', 0));
 	if ($numberofconnections > $wans) {
 		$savemsg=gettext("The specified number of connections is greater than the number of ALTQ-capable assigned interfaces!");
 		$stepid--;
 		return;
 	}
 
-	$numberoflocalinterfaces = intval($config['ezshaper']['step1']['numberoflocalinterfaces']);
+	$numberoflocalinterfaces = intval(config_get_path('ezshaper/step1/numberoflocalinterfaces', 0));
 	if ($numberoflocalinterfaces > $lans) {
 		$savemsg=gettext("The specified number of connections is greater than the number of ALTQ-capable assigned interfaces!");
 		$stepid--;
 		return;
 	}
-	$cfgname = "traffic_shaper_wizard_multi_all.xml";
 
-	$fields = &$pkg['step'][1]['fields']['field'];
+	$cfgname = "traffic_shaper_wizard_multi_all.xml";
 
-	$fields = array();
+	$fields = [];
 
 	for ($i = 0; $i < $numberoflocalinterfaces; $i++) {
-		$field = array();
+		$field = [];
 		$interface_friendly = $i+1;
 		$field['name'] = "Setup connection speed and scheduler information for interface LAN #{$interface_friendly}";
 		$field['type'] = "listtopic";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "Interface";
 		$field['name'] = "local{$i}interface";
 		$field['type'] = "select";
-		$field['options']['option'] = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
 		foreach ($iflist as $ifname => $ifdescr) {
 			// Skip wan interfaces here
 			if (interface_has_gateway($ifname) ||
 			    interface_has_gatewayv6($ifname)) {
 				continue;
 			}
-			$opts = array();
+			$opts = [];
 			$opts['displayname'] = $ifdescr;
 			$opts['name'] = $ifname;
 			$opts['value'] = $ifname;
@@ -153,7 +162,7 @@ function step2_stepbeforeformdisplay() {
 		$field['bindstofield'] = "ezshaper->step2->local{$i}interface";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['combinefieldsend'] = "true";
 		$field['dontdisplayname'] = "true";
 		$field['dontcombinecells'] = "true";
@@ -161,16 +170,17 @@ function step2_stepbeforeformdisplay() {
 		$field['name'] = "local{$i}downloadscheduler";
 		$field['type'] = "select";
 		$field['typehint'] = "Queueing discipline to apply on this local interface.";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['name'] = "PRIQ";
 		$opts['value'] = "PRIQ";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['name'] = "HFSC";
 		$opts['value'] = "HFSC";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['name'] = "CBQ";
 		$opts['value'] = "CBQ";
 		$field['options']['option'][] = $opts;
@@ -179,18 +189,19 @@ function step2_stepbeforeformdisplay() {
 	}
 
 	for ($i = 0; $i < $numberofconnections; $i++) {
-		$field = array();
+		$field = [];
 		$interface_friendly = $i+1;
 		$field['name'] = "Setup connection speed and scheduler information for interface WAN#{$interface_friendly}";
 		$field['type'] = "listtopic";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "Interface";
 		$field['name'] = "conn{$i}interface";
 		$field['type'] = "select";
 		$interface_real = $i+1;
-		$field['options']['option'] = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
 		foreach ($iflist as $ifname => $ifdescr) {
 			// Skip lan interfaces here
 			if (!$list_all_ifs &&
@@ -198,7 +209,7 @@ function step2_stepbeforeformdisplay() {
 			    !interface_has_gatewayv6($ifname)) {
 				continue;
 			}
-			$opts = array();
+			$opts = [];
 			$opts['displayname'] = $ifdescr;
 			$opts['name'] = $ifname;
 			$opts['value'] = $ifname;
@@ -208,31 +219,32 @@ function step2_stepbeforeformdisplay() {
 		$field['combinefieldsbegin'] = "true";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
+		$field['displayname'] = "Interface Scheduler";
+		$field['name'] = "conn{$i}uploadscheduler";
 		$field['combinefieldsend'] = "true";
 		$field['dontdisplayname'] = "true";
 		$field['dontcombinecells'] = "true";
-		$field['displayname'] = "Interface Scheduler";
-		$field['name'] = "conn{$i}uploadscheduler";
 		$field['type'] = "select";
 		$field['typehint'] = "Queueing discipline to apply on the upload of this connection.";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['name'] = "PRIQ";
 		$opts['value'] = "PRIQ";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['name'] = "HFSC";
 		$opts['value'] = "HFSC";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['name'] = "CBQ";
 		$opts['value'] = "CBQ";
 		$field['options']['option'][] = $opts;
 		$field['bindstofield'] = "ezshaper->step2->conn{$i}uploadscheduler";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "Upload";
 		$field['name'] = "conn{$i}upload";
 		$field['type'] = "input";
@@ -240,7 +252,7 @@ function step2_stepbeforeformdisplay() {
 		$field['combinefieldsbegin'] = "true";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['combinefieldsend'] = "true";
 		$field['dontdisplayname'] = "true";
 		$field['dontcombinecells'] = "true";
@@ -248,23 +260,24 @@ function step2_stepbeforeformdisplay() {
 		$field['typehint'] = "Upload bandwidth on this connection.";
 		$field['type'] = "select";
 		$field['value'] = "Mb";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['value'] = "Kb";
 		$opts['name'] = "Kbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Mb";
 		$opts['name'] = "Mbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Gb";
 		$opts['name'] = "Gbit/s";
 		$field['options']['option'][] = $opts;
 		$field['bindstofield'] = "ezshaper->step2->conn{$i}uploadspeed";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['displayname'] = "Download";
 		$field['name'] = "conn{$i}download";
 		$field['type'] = "input";
@@ -272,7 +285,7 @@ function step2_stepbeforeformdisplay() {
 		$field['combinefieldsbegin'] = "true";
 		$fields[] = $field;
 
-		$field = array();
+		$field = [];
 		$field['combinefieldsend'] = "true";
 		$field['dontdisplayname'] = "true";
 		$field['dontcombinecells'] = "true";
@@ -280,26 +293,31 @@ function step2_stepbeforeformdisplay() {
 		$field['typehint'] = "Download bandwidth on this connection.";
 		$field['type'] = "select";
 		$field['value'] = "Mb";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['value'] = "Kb";
 		$opts['name'] = "Kbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Mb";
 		$opts['name'] = "Mbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Gb";
 		$opts['name'] = "Gbit/s";
 		$field['options']['option'][] = $opts;
 		$field['bindstofield'] = "ezshaper->step2->conn{$i}downloadspeed";
 		$fields[] = $field;
 	}
-	$field = array();
+	$field = [];
 	$field['name'] = "Next";
 	$field['type'] = "submit";
 	$fields[] = $field;
+
+	if (!empty($fields)) {
+		array_set_path($pkg, 'step/1/fields/field', $fields);
+	}
 }
 
 function step2_stepsubmitphpaction() {
@@ -308,8 +326,8 @@ function step2_stepsubmitphpaction() {
 	$sumdownloads = 0;
 
 	/* Input Validation */
-	$steps = intval($config['ezshaper']['step1']['numberofconnections']);
-	$localint = intval($config['ezshaper']['step1']['numberoflocalinterfaces']);
+	$steps = intval(config_get_path('ezshaper/step1/numberofconnections', 0));
+	$localint = intval(config_get_path('ezshaper/step1/numberoflocalinterfaces', 0));
 	for ($i = 0; $i < $steps; $i++) {
 		for ($j = $i + 1; $j <= $steps; $j++) {
 			if ($_POST["conn{$i}interface"] == $_POST["conn{$j}interface"]) {
@@ -335,7 +353,8 @@ function step2_stepsubmitphpaction() {
 					$stepid--;
 					return;
 				}
-				if (intval($upbw) < 128 && $_POST["conn{$i}uploadspeed"] == "Kb" && trim($_POST["conn{$i}uploadscheduler"]) == "CBQ") {
+				if ((trim($_POST["conn{$i}uploadscheduler"]) == "CBQ") &&
+				    (intval($upbw) < 128 && $_POST["conn{$i}uploadspeed"] == "Kb")) {
 					$savemsg=gettext("Uploads smaller than 128Kbit/s is not supported for connection {$i} on CBQ scheduler.");
 					$stepid--;
 					return;
@@ -360,21 +379,20 @@ function step2_stepsubmitphpaction() {
 		}
 	}
 
-	config_del_path('ezshaper/step2');
-	$config['ezshaper']['step2'] = array();
+	config_set_path('ezshaper/step2', []);
 
 	for ($i = 0; $i < $localint; $i++) {
-		$config['ezshaper']['step2']["local{$i}downloadscheduler"] = $_POST["local{$i}downloadscheduler"];
-		$config['ezshaper']['step2']["local{$i}interface"] = $_POST["local{$i}interface"];
+		config_set_path("ezshaper/step2/local{$i}downloadscheduler", $_POST["local{$i}downloadscheduler"]);
+		config_set_path("ezshaper/step2/local{$i}interface", $_POST["local{$i}interface"]);
 	}
 
 	for ($i = 0; $i < $steps; $i++) {
-		$config['ezshaper']['step2']["conn{$i}uploadscheduler"] = $_POST["conn{$i}uploadscheduler"];
-		$config['ezshaper']['step2']["conn{$i}upload"] = $_POST["conn{$i}upload"];
-		$config['ezshaper']['step2']["conn{$i}uploadspeed"] = $_POST["conn{$i}uploadspeed"];
-		$config['ezshaper']['step2']["conn{$i}download"] = $_POST["conn{$i}download"];
-		$config['ezshaper']['step2']["conn{$i}downloadspeed"] = $_POST["conn{$i}downloadspeed"];
-		$config['ezshaper']['step2']["conn${i}interface"] = $_POST["conn{$i}interface"];
+		config_set_path("ezshaper/step2/conn{$i}uploadscheduler", $_POST["conn{$i}uploadscheduler"]);
+		config_set_path("ezshaper/step2/conn{$i}upload", $_POST["conn{$i}upload"]);
+		config_set_path("ezshaper/step2/conn{$i}uploadspeed", $_POST["conn{$i}uploadspeed"]);
+		config_set_path("ezshaper/step2/conn{$i}download", $_POST["conn{$i}download"]);
+		config_set_path("ezshaper/step2/conn{$i}downloadspeed", $_POST["conn{$i}downloadspeed"]);
+		config_set_path("ezshaper/step2/conn${i}interface", $_POST["conn{$i}interface"]);
 	}
 }
 
@@ -384,53 +402,52 @@ function step3_stepbeforeformdisplay() {
 
 	$cfgname = "traffic_shaper_wizard_multi_all.xml";
 
-	$numberofconnections = intval($config['ezshaper']['step1']['numberofconnections']);
-	$numberoflocalinterfaces = intval($config['ezshaper']['step1']['numberoflocalinterfaces']);
-
-	$fields = &$pkg['step'][1]['fields']['field'];
-	$voipfields = &$pkg['step'][2]['fields']['field'];
+	$numberofconnections = intval(config_get_path('ezshaper/step1/numberofconnections', 0));
+	$numberoflocalinterfaces = intval(config_get_path('ezshaper/step1/numberoflocalinterfaces', 0));
 
-	$voipfields = array();
-	$enablefields = array();
+	$voipfields = [];
+	$enablefields = [];
 
-	$field = array();
-	$field['name'] = "enable";
+	$field = [];
+	$field['name'] = "Enable";
 	$field['type'] = "checkbox";
 	$field['typehint'] = "Prioritize Voice over IP traffic.";
 	$field['bindstofield'] = "ezshaper->step3->enable";
 	$field['descritpion'] = "This will raise the priority of VOIP traffic above all other traffic.";
 	$voipfields[] = $field;
 
-	$field = array();
+	$field = [];
 	$field['name'] = "VOIP specific settings";
 	$field['type'] = "listtopic";
 	$voipfields[] = $field;
 
+	$field = [];
 	$field['name'] = "Provider";
 	$enablefields[] = "Provider";
 	$field['type'] = "select";
 	$field['description'] = "Choose Generic if the provider isn't listed.";
-	$field['options']['option'] = array();
-	$opts = array();
+	$field['options'] = [];
+	$field['options']['option'] = [];
+	$opts = [];
 	$opts['name'] = "Generic (lowdelay)";
 	$opts['value'] = "Generic";
 	$field['options']['option'][] = $opts;
-	$opts = array();
+	$opts = [];
 	$opts['name'] = "VoicePulse";
 	$opts['value'] = "VoicePulse";
 	$field['options']['option'][] = $opts;
-	$opts = array();
+	$opts = [];
 	$opts['name'] = "Asterisk/Vonage";
 	$opts['value'] = "Asterisk";
 	$field['options']['option'][] = $opts;
-	$opts = array();
+	$opts = [];
 	$opts['name'] = "PanasonicTDA";
 	$opts['value'] = "Panasonic";
 	$field['options']['option'][] = $opts;
 	$field['bindstofield'] = "ezshaper->step3->provider";
 	$voipfields[] = $field;
 
-	$field = array();
+	$field = [];
 	$field['displayname'] = "Upstream SIP Server";
 	$field['name'] = "upstream_sip_server";
 	$enablefields[] = "upstream_sip_server";
@@ -441,14 +458,14 @@ function step3_stepbeforeformdisplay() {
 	$voipfields[] = $field;
 
 	for ($i = 0; $i < $numberofconnections; $i++) {
-		$field = array();
 		$interface_friendly = $i+1;
+		$field = [];
 		$field['name'] = "Connection WAN #{$interface_friendly}";
 		$field['type'] = "listtopic";
 		$voipfields[] = $field;
 
-		$field = array();
-		$field['displayname'] = "Upload";
+		$field = [];
+		$field['displayname'] = "Upload rate";
 		$field['name'] = "conn{$i}upload";
 		$enablefields[] = "conn{$i}upload";
 		$field['type'] = "input";
@@ -456,25 +473,26 @@ function step3_stepbeforeformdisplay() {
 		$field['combinefieldsbegin'] = "true";
 		$voipfields[] = $field;
 
-		$field = array();
+		$field = [];
+		$field['displayname'] = "Units";
 		$field['combinefieldsend'] = "true";
 		$field['dontdisplayname'] = "true";
 		$field['dontcombinecells'] = "true";
 		$field['name'] = "conn{$i}uploadspeed";
 		$enablefields[] = "conn{$i}uploadspeed";
 		$field['typehint'] = "Upload bandwidth guarantee for VOIP phone(s) on connection {$i}.";
-		$field['displayname'] = "Units";
 		$field['type'] = "select";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['value'] = "Kb";
 		$opts['name'] = "Kbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Mb";
 		$opts['name'] = "Mbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Gb";
 		$opts['name'] = "Gbit/s";
 		$field['options']['option'][] = $opts;
@@ -483,14 +501,14 @@ function step3_stepbeforeformdisplay() {
 	}
 
 	for ($i = 0; $i < $numberoflocalinterfaces; $i++) {
-		$field = array();
+		$field = [];
 		$interface_friendly = $i+1;
 		$field['name'] = "Connection LAN #{$interface_friendly}";
 		$field['type'] = "listtopic";
 		$voipfields[] = $field;
 
-		$field = array();
-		$field['displayname'] = "Download";
+		$field = [];
+		$field['displayname'] = "Download rate";
 		$field['name'] = "local{$i}download";
 		$enablefields[] = "local{$i}download";
 		$field['type'] = "input";
@@ -498,25 +516,26 @@ function step3_stepbeforeformdisplay() {
 		$field['combinefieldsbegin'] = "true";
 		$voipfields[] = $field;
 
-		$field = array();
+		$field = [];
+		$field['displayname'] = "Units";
 		$field['combinefieldsend'] = "true";
 		$field['dontdisplayname'] = "true";
 		$field['dontcombinecells'] = "true";
 		$field['name'] = "local{$i}downloadspeed";
 		$enablefields[] = "local{$i}downloadspeed";
 		$field['typehint'] = "Download bandwidth guarantee for VOIP phone(s) on connections.";
-		$field['displayname'] = "Units";
 		$field['type'] = "select";
-		$field['options']['option'] = array();
-		$opts = array();
+		$field['options'] = [];
+		$field['options']['option'] = [];
+		$opts = [];
 		$opts['value'] = "Kb";
 		$opts['name'] = "Kbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Mb";
 		$opts['name'] = "Mbit/s";
 		$field['options']['option'][] = $opts;
-		$opts = array();
+		$opts = [];
 		$opts['value'] = "Gb";
 		$opts['name'] = "Gbit/s";
 		$field['options']['option'][] = $opts;
@@ -524,19 +543,21 @@ function step3_stepbeforeformdisplay() {
 		$voipfields[] = $field;
 	}
 
-	$field = array();
+	$field = [];
 	$field['name'] = "Next";
 	$field['type'] = "submit";
 	$voipfields[] = $field;
-	$voipfields[0]['enablefields'] = implode(",", $enablefields);
+	array_set_path($voipfields, '0/enablefields', implode(",", $enablefields));
+	array_set_path($pkg, 'step/2/fields/field', $voipfields);
 }
 
 function step3_stepsubmitphpaction() {
 	global $config;
 	global $stepid, $savemsg;
 
-	if (!$_POST['enable'])
+	if (!$_POST['enable']) {
 		return;
+	}
 
 	if ($_POST['upstream_sip_server']) {
 		if (!is_ipaddroralias($_POST['upstream_sip_server'])) {
@@ -547,10 +568,11 @@ function step3_stepsubmitphpaction() {
 		}
 	}
 
-	$steps = intval($config['ezshaper']['step1']['numberofconnections']);
+	$steps = intval(config_get_path('ezshaper/step1/numberofconnections', 0));
 	for ($i = 0; $i < $steps; $i++) {
-		if ($config['ezshaper']['step2']["conn{$i}uploadscheduler"] == "PRIQ")
+		if (config_get_path("ezshaper/step2/conn{$i}uploadscheduler", "") == "PRIQ") {
 			continue;
+		}
 		if (!is_numeric($_POST["conn{$i}upload"])) {
 			$savemsg = gettext("Upload bandwidth of connection {$i} is not valid.");
 			$stepid--;
@@ -563,8 +585,8 @@ function step3_stepsubmitphpaction() {
 				return;
 			}
 		} else {
-			$factor = wizard_get_bandwidthtype_scale($config['ezshaper']['step2']["conn{$i}uploadspeed"]);
-			$ifbw = $factor * floatval($config['ezshaper']['step2']["conn{$i}upload"]);
+			$factor = wizard_get_bandwidthtype_scale(config_get_path("ezshaper/step2/conn{$i}uploadspeed"));
+			$ifbw = $factor * floatval(config_get_path("ezshaper/step2/conn{$i}upload", 0.0));
 			$factor = wizard_get_bandwidthtype_scale($_POST["conn{$i}uploadspeed"]);
 			$input_bw = $factor * floatval($_POST["conn{$i}upload"]);
 			if ((0.8 * $ifbw) < $input_bw) {
@@ -575,10 +597,11 @@ function step3_stepsubmitphpaction() {
 		}
 	}
 
-	$localint = intval($config['ezshaper']['step1']['numberoflocalinterfaces']);
+	$localint = intval(config_get_path('ezshaper/step1/numberoflocalinterfaces', 0));
 	for ($i = 0; $i < $localint; $i++) {
-		if ($config['ezshaper']['step2']["local{$i}downloadscheduler"] == "PRIQ")
+		if (config_get_path("ezshaper/step2/local{$i}downloadscheduler") == "PRIQ") {
 			continue;
+		}
 		if (!is_numeric($_POST["local{$i}download"])) {
 			$savemsg = gettext("Download bandwidth of connection {$i} is not valid.");
 			$stepid--;
@@ -592,8 +615,8 @@ function step3_stepsubmitphpaction() {
 			}
 		} else {
 			for ($j = 0; $j < $steps; $j++) {
-				$factor = wizard_get_bandwidthtype_scale($config['ezshaper']['step2']["conn{$j}downloadspeed"]);
-				$ifbw = $factor * floatval($config['ezshaper']['step2']["conn{$j}download"]);
+				$factor = wizard_get_bandwidthtype_scale(config_get_path("ezshaper/step2/conn{$j}downloadspeed"));
+				$ifbw = $factor * floatval(config_get_path("ezshaper/step2/conn{$j}download", 0.0));
 				$factor = wizard_get_bandwidthtype_scale($_POST["local{$i}downloadspeed"]);
 				$input_bw = $factor * floatval($_POST["local{$i}download"]);
 				if ((0.8 * $ifbw) < $input_bw) {
@@ -605,27 +628,28 @@ function step3_stepsubmitphpaction() {
 		}
 	}
 
-	config_del_path('ezshaper/step3');
-	$config['ezshaper']['step3'] = array();
+	config_set_path('ezshaper/step3', []);
 
-	if (!empty($_POST['upstream_sip_server']))
-		$config['ezshaper']['step3']['address'] = $_POST['upstream_sip_server'];
-	if ($_POST['enable'] == 'on')
-		$config['ezshaper']['step3']['enable'] = 'on';
+	if (!empty($_POST['upstream_sip_server'])) {
+		config_set_path("ezshaper/step3/address", $_POST['upstream_sip_server']);
+	}
+	if ($_POST['enable'] == 'on') {
+		config_set_path("ezshaper/step3/enable", 'on');
+	}
 	if (!empty($_POST['provider'])) {
-		$VoIPproviders = array("Generic", "VoicePulse", "Asterisk", "Panasonic");
+		$VoIPproviders = ["Generic", "VoicePulse", "Asterisk", "Panasonic"];
 		if (in_array($_POST['provider'], $VoIPproviders)) {
-			$config['ezshaper']['step3']['provider'] = $_POST['provider'];
+			config_set_path("ezshaper/step3/provider", $_POST['provider']);
 		}
 	}
 	for ($i = 0; $i < $localint; $i++) {
-		$config['ezshaper']['step3']["local{$i}download"] = $_POST["local{$i}download"];
-		$config['ezshaper']['step3']["local{$i}downloadspeed"] = $_POST["local{$i}downloadspeed"];
+		config_set_path("ezshaper/step3/local{$i}download", $_POST["local{$i}download"]);
+		config_set_path("ezshaper/step3/local{$i}downloadspeed", $_POST["local{$i}downloadspeed"]);
 	}
 
 	for ($i = 0; $i < $steps; $i++) {
-		$config['ezshaper']['step3']["conn{$i}upload"] = $_POST["conn{$i}upload"];
-		$config['ezshaper']['step3']["conn{$i}uploadspeed"] = $_POST["conn{$i}uploadspeed"];
+		config_set_path("ezshaper/step3/conn{$i}upload", $_POST["conn{$i}upload"]);
+		config_set_path("ezshaper/step3/conn{$i}uploadspeed", $_POST["conn{$i}uploadspeed"]);
 	}
 }
 
@@ -636,7 +660,6 @@ function step4_stepsubmitphpaction() {
 	if ( $_POST['enable'] ) {
 		if (!$_POST['bandwidth']) {
 			$savemsg="A value for bandwidth must be specified.";
-
 			$stepid--;
 			return;
 		}
@@ -671,6 +694,7 @@ function step5_stepsubmitphpaction() {
 			if (!is_numeric($_POST['bandwidth'])) {
 				$savemsg="Posted value is not a valid bandwidth.";
 				$stepid--;
+				return;
 			}
 			if ($_POST['bandwidthspeed'] <> "%") {
 				$savemsg = gettext("Only percentage bandwidth specification is allowed.");
@@ -719,40 +743,37 @@ function apply_all_chosen_items() {
 	 * Doing it here makes sense since we can wipe the previous config only after
 	 * the user decides to do so, finishing the wizard.
 	 */
-	if (isset($config['shaper']['queue']))
-		config_del_path('shaper/queue');
-	/* XXX: This is redundant, because this should be handled by converter at startup. */
-	if (isset($config['shaper']['rule']))
-		config_del_path('shaper/rule');
-	foreach ($config['filter']['rule'] as $key => $rule)
-		if ($rule['wizard'] == "yes")
+	config_del_path('shaper/queue');
+	config_del_path('shaper/rule');
+	foreach (config_get_path('filter/rule', []) as $key => $rule) {
+		if ($rule['wizard'] == "yes") {
 			config_del_path("filter/rule/{$key}");
+		}
+	}
 
 	/* restart the cached config */
 	unset($altq_list_queues);
-	$altq_list_queues = array();
+	$altq_list_queues = [];
 
-	$steps = intval($config['ezshaper']['step1']['numberofconnections']);
-
-	$interfacelist = array();
+	$steps = intval(config_get_path('ezshaper/step1/numberofconnections', 0));
+	$interfacelist = [];
 
 	for ($i = 0; $i < $steps; $i++) {
-
-		$tmppath = array();
+		$tmppath = [];
 		$__tmp_altq = new altq_root_queue(); $altq =& $__tmp_altq;
 
-		$altq->SetInterface($config['ezshaper']['step2']["conn{$i}interface"]);
-		$interfacelist[] = $config['ezshaper']['step2']["conn{$i}interface"];
-		$altq->SetScheduler($config['ezshaper']['step2']["conn{$i}uploadscheduler"]);
-		$altq->SetBandwidth(floatval($config['ezshaper']['step2']["conn{$i}upload"]));
-		$altq->SetBwscale($config['ezshaper']['step2']["conn{$i}uploadspeed"]);
+		$altq->SetInterface(config_get_path("ezshaper/step2/conn${i}interface"));
+		$interfacelist[] = config_get_path("ezshaper/step2/conn${i}interface");
+		$altq->SetScheduler(config_get_path("ezshaper/step2/conn${i}uploadscheduler"));
+		$altq->SetBandwidth(floatval(config_get_path("ezshaper/step2/conn${i}upload", 0.0)));
+		$altq->SetBwscale(config_get_path("ezshaper/step2/conn${i}uploadspeed"));
 		$altq->SetEnabled("on");
 		$altq_list_queues[$altq->GetQname()] =& $altq;
-		array_push($tmppath, $config['ezshaper']['step2']["conn{$i}interface"]);
+		array_push($tmppath, config_get_path("ezshaper/step2/conn${i}interface"));
 		$altq->SetLink($tmppath);
 		$altq->wconfig();
 
-		$sched = $config['ezshaper']['step2']["conn{$i}uploadscheduler"];
+		$sched = config_get_path("ezshaper/step2/conn${i}uploadscheduler");
 		$voipbw =0;
 		$voipbwunit = "Kb";
 		$voip = false;
@@ -767,44 +788,47 @@ function apply_all_chosen_items() {
 		$otherpriority = false;
 		$remainbw = 0;
 		$factor = 0;
-		$upfactor = wizard_get_bandwidthtype_scale($config['ezshaper']['step2']["conn{$i}uploadspeed"]);
-		$upbw = floatval($config['ezshaper']['step2']["conn{$i}upload"]) * $upfactor;
+		$upfactor = wizard_get_bandwidthtype_scale(config_get_path("ezshaper/step2/conn{$i}uploadspeed"));
+		$upbw = floatval(config_get_path("ezshaper/step2/conn{$i}upload", 0.0)) * $upfactor;
 
-		if ($config['ezshaper']['step3']['enable']) {
+		if (config_path_enabled('ezshaper/step3')) {
 			$voip = true;
 			if ($sched != "PRIQ") {
-				$voipbw = $config['ezshaper']['step3']["conn{$i}upload"];
-				$voipbwunit = $config['ezshaper']['step3']["conn{$i}uploadspeed"];
-				if ($voipbwunit == "%")
+				$voipbw = config_get_path("ezshaper/step3/conn${i}upload");
+				$voipbwunit = config_get_path("ezshaper/step3/conn${i}uploadspeed");
+				if ($voipbwunit == "%") {
 					$factor =  $upbw/100;
-				else
+				} else {
 					$factor = wizard_get_bandwidthtype_scale($voipbwunit);
+				}
 				$remainbw += $voipbw * $factor;
 			}
 		}
-		if ($config['ezshaper']['step4']['enable']) {
+		if (config_path_enabled('ezshaper/step4')) {
 			$penalty = true;
 			if ($sched != "PRIQ") {
-				$penaltybw = $config['ezshaper']['step4']['bandwidth'];
-				$penaltybwunit = $config['ezshaper']['step4']['bandwidthunit'];
-				if ($penaltybwunit == "%")
+				$penaltybw = config_get_path('ezshaper/step4/bandwidth');
+				$penaltybwunit = config_get_path('ezshaper/step4/bandwidthunit');
+				if ($penaltybwunit == "%") {
 					$factor = $upbw/100;
-				else
+				} else {
 					$factor = wizard_get_bandwidthtype_scale($penaltybwunit);
+				}
 				$remainbw += $penaltybw * $factor;
 			}
 		}
-		if ($config['ezshaper']['step5']['enable']) {
+		if (config_path_enabled('ezshaper/step5')) {
 			$p2p = true;
-			if ($config['ezshaper']['step5']['p2pcatchall']) {
+			if (!empty(config_get_path('ezshaper/step5/p2pcatchall'))) {
 				$p2pcatchall = true;
 				if ($sched != "PRIQ") {
-					$p2pcatchbw = $config['ezshaper']['step5']['bandwidth'];
-					$p2pcatchbwunit = $config['ezshaper']['step5']['bandwidthunit'];
-					if ($p2pcatchbwunit == "%")
+					$p2pcatchbw = config_get_path('ezshaper/step5/bandwidth');
+					$p2pcatchbwunit = config_get_path('ezshaper/step5/bandwidthunit');
+					if ($p2pcatchbwunit == "%") {
 						$factor = $upbw/100;
-					else
+					} else {
 						$factor = wizard_get_bandwidthtype_scale($p2pcatchbwunit);
+					}
 					$remainbw += $p2pcatchbw * $factor;
 				}
 			} else {
@@ -816,13 +840,13 @@ function apply_all_chosen_items() {
 			$p2pcatchall = false;
 			$p2pcatchbw = 0;
 		}
-		if ($config['ezshaper']['step6']['enable']) {
+		if (config_path_enabled('ezshaper/step6')) {
 			$games = true;
 		} else {
 			$games = false;
 		}
 
-		if ($config['ezshaper']['step7']['enable']) {
+		if (config_path_enabled('ezshaper/step7')) {
 			$otherpriority = true;
 		} else  {
 			$otherpriority = false;
@@ -840,49 +864,47 @@ function apply_all_chosen_items() {
 			}
 
 			if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
+
+			$tmpcf = [];
 			$tmpcf['name'] = "qInternet";
 			//$tmpcf['priority'] = 6;
 			$tmpcf['ecn'] = "on";
 			$tmpcf['enabled'] = "on";
 			If ($sched == "CBQ") {
-				$tmpcf['bandwidth'] = floatval($config['ezshaper']['step2']["conn{$i}upload"]);
-				$tmpcf['bandwidthtype'] = $config['ezshaper']['step2']["conn{$i}uploadspeed"];
-			}
-			else if ($sched == "HFSC") {
-				$tmpcf['linkshare3'] =
-					floatval($config['ezshaper']['step2']["conn{$i}upload"]) . $config['ezshaper']['step2']["conn{$i}uploadspeed"];
-				$tmpcf['upperlimit3'] =
-					floatval($config['ezshaper']['step2']["conn{$i}upload"]) . $config['ezshaper']['step2']["conn{$i}uploadspeed"];
+				$tmpcf['bandwidth'] = floatval(config_get_path("ezshaper/step2/conn${i}upload", 0.0));
+				$tmpcf['bandwidthtype'] = config_get_path("ezshaper/step2/conn${i}uploadspeed");
+			} elseif ($sched == "HFSC") {
 				$tmpcf['upperlimit'] = "on";
-
-
+				$tmpcf['upperlimit3'] = floatval(config_get_path("ezshaper/step2/conn${i}upload", 0.0)) .
+							config_get_path("ezshaper/step2/conn${i}uploadspeed");
 				$tmpcf['linkshare'] = "on";
-				$tmpcf['bandwidth'] =  floatval($config['ezshaper']['step2']["conn{$i}upload"]);
-				$tmpcf['bandwidthtype'] = $config['ezshaper']['step2']["conn{$i}uploadspeed"];
+				$tmpcf['linkshare3'] = floatval(config_get_path("ezshaper/step2/conn${i}upload", 0.0)) .
+							config_get_path("ezshaper/step2/conn${i}uploadspeed");
+				$tmpcf['bandwidth'] =  floatval(config_get_path("ezshaper/step2/conn${i}upload", 0.0));
+				$tmpcf['bandwidthtype'] = config_get_path("ezshaper/step2/conn${i}uploadspeed");
 			}
 
 			array_push($tmppath, "qInternet");
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			//array_pop($tmppath);
-			//echo "qInternet <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
 			$altq =& $qtmp;
 		}
 
 		if ($sched == "PRIQ") {
 			$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-		} else if ($sched == "CBQ") {
+		} elseif ($sched == "CBQ") {
 			$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-		} else if ($sched == "HFSC") {
+		} elseif ($sched == "HFSC") {
 			$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
 		}
-		$tmpcf = array();
+		$tmpcf = [];
 		$tmpcf['name'] = "qACK";
 		$tmpcf['priority'] = 6;
 		$tmpcf['ecn'] = "on";
@@ -891,8 +913,7 @@ function apply_all_chosen_items() {
 			$tmpcf['borrow'] = "on";
 			$tmpcf['bandwidth'] = intval($remainbw * 0.2);
 			$tmpcf['bandwidthtype'] = "%";
-		}
-		else if ($sched == "HFSC") {
+		} elseif ($sched == "HFSC") {
 			$lkbw = 0.20 * $remainbw;
 			$tmpcf['linkshare3'] = intval($lkbw) . "%";
 			$tmpcf['linkshare'] = "on";
@@ -902,268 +923,270 @@ function apply_all_chosen_items() {
 		array_push($tmppath, "qACK");
 		$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 		array_pop($tmppath);
-		//echo "qACK <br />";
-		//var_dump($input_errors);
 		$qtmp->wconfig();
 
 		if ($sched == "PRIQ") {
-			$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-		} else if ($sched == "CBQ") {
-			$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-		} else if ($sched == "HFSC") {
-			$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+			$__tmp_q = new priq_queue();
+			$q =& $__tmp_q;
+		} elseif ($sched == "CBQ") {
+			$__tmp_q = new cbq_queue();
+			$q =& $__tmp_q;
+		} elseif ($sched == "HFSC") {
+			$__tmp_q = new hfsc_queue();
+			$q =& $__tmp_q;
 		}
-		$tmpcf = array();
-		if ($p2pcatchall)
+		$tmpcf = [];
+		if ($p2pcatchall) {
 			$tmpcf['name'] = "qOthersDefault";
-		else
+		} else {
 			$tmpcf['name'] = "qDefault";
+		}
 		$tmpcf['priority'] = 3;
 		$tmpcf['enabled'] = "on";
-		if (!$p2pcatchall)
+		if (!$p2pcatchall) {
 			$tmpcf['default'] = "on";
+		}
 		$tmpcf['ecn'] = "on";
 		if ($sched == "CBQ") {
 			$tmpcf['borrow'] = "on";
 			$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
 			$tmpcf['bandwidthtype'] = "%";
-		} else if ($sched == "HFSC") {
+		} elseif ($sched == "HFSC") {
 			$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
 			$tmpcf['bandwidthtype'] = "%";
 		}
 		array_push($tmppath, $tmpcf['name']);
 		$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 		array_pop($tmppath);
-		//echo "qDefault <br />";
-			//var_dump($input_errors);
-			$qtmp->wconfig();
-
-			if ($p2p) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
-				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qP2P";
-				$tmpcf['priority'] = 1;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				if ($p2pcatchall) {
-					if ($sched == "CBQ") {
-						$tmpcf['borrow'] = "on";
-						$tmpcf['bandwidth'] = $p2pcatchbw;
-						$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
-					} else if ($sched == "HFSC") {
-						$tmpcf['linkshare'] = "on";
-						$tmpcf['linkshare3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
-						$tmpcf['upperlimit'] = "on";
-						$tmpcf['upperlimit3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
-						$tmpcf['bandwidth'] = $p2pcatchbw;
-						$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
-					}
-					$tmpcf['default'] = "on";
+		$qtmp->wconfig();
 
-				} else {
-					if ($sched == "CBQ") {
-						$tmpcf['borrow'] = "on";
-						$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
-						$tmpcf['bandwidthtype'] = "%";
-					} else if ($sched == "HFSC") {
-						$tmpbw = $remainbw * 0.05; /* 5% bandwidth */
-						$tmpcf['linkshare'] = "on";
-						$tmpcf['linkshare3'] = "{$tmpbw}%";
-						$tmpcf['upperlimit'] = "on";
-						$tmpcf['upperlimit3'] = "{$tmpbw}%";
-						$tmpcf['bandwidth'] = $tmpbw;
-						$tmpcf['bandwidthtype'] = "%";
-					}
-				}
-				array_push($tmppath, "qP2P");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qP2P <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
+		if ($p2p) {
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-
-			if ($voip) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
-				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qVoIP";
-				$tmpcf['priority'] = 7;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
+			$tmpcf = [];
+			$tmpcf['name'] = "qP2P";
+			$tmpcf['priority'] = 1;
+			$tmpcf['ecn'] = "on";
+			$tmpcf['enabled'] = "on";
+			if ($p2pcatchall) {
 				if ($sched == "CBQ") {
 					$tmpcf['borrow'] = "on";
-					if ($voipbw > 0) {
-						$tmpcf['bandwidth'] = $voipbw;
-						$tmpcf['bandwidthtype'] = $voipbwunit;
-					} else {
-						$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
-						$tmpcf['bandwidthtype'] = "%";
-					}
-				} else if ($sched == "HFSC") {
-					if ($voipbw > 0) {
-						$tmpcf['realtime3'] = "{$voipbw}{$voipbwunit}";
-					} else {
-						$voipbw = $remainbw * 0.20; /* 20% bandwidth */
-						$tmpcf['realtime3'] = "{$voipbw}%";
-					}
-					$tmpcf['realtime'] = "on";
-					$tmpcf['bandwidth'] = 32;
-					$tmpcf['bandwidthtype'] = "Kb";
-				}
-				array_push($tmppath, "qVoIP");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qVoIP <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
-			}
-
-			if ($games) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+					$tmpcf['bandwidth'] = $p2pcatchbw;
+					$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
+				} elseif ($sched == "HFSC") {
+					$tmpcf['linkshare'] = "on";
+					$tmpcf['linkshare3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
+					$tmpcf['upperlimit'] = "on";
+					$tmpcf['upperlimit3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
+					$tmpcf['bandwidth'] = $p2pcatchbw;
+					$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
 				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qGames";
-				$tmpcf['priority'] = 5;
-				$tmpcf['enabled'] = "on";
-				$tmpcf['ecn'] = "on";
+				$tmpcf['default'] = "on";
+			} else {
 				if ($sched == "CBQ") {
 					$tmpcf['borrow'] = "on";
-					$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
+					$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
 					$tmpcf['bandwidthtype'] = "%";
-				} else if ($sched == "HFSC") {
-					$gamesbw = $remainbw * 0.2; /* 20% bandwidth */
+				} elseif ($sched == "HFSC") {
+					$tmpbw = $remainbw * 0.05; /* 5% bandwidth */
 					$tmpcf['linkshare'] = "on";
-					$tmpcf['linkshare3'] = "{$gamesbw}%";
-					$tmpcf['bandwidth'] = "{$gamesbw}";
+					$tmpcf['linkshare3'] = "{$tmpbw}%";
+					$tmpcf['upperlimit'] = "on";
+					$tmpcf['upperlimit3'] = "{$tmpbw}%";
+					$tmpcf['bandwidth'] = $tmpbw;
 					$tmpcf['bandwidthtype'] = "%";
 				}
-				array_push($tmppath, "qGames");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qGames <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
 			}
+			array_push($tmppath, "qP2P");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+			array_pop($tmppath);
+			$qtmp->wconfig();
+		}
 
-			if ($otherpriority) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
-				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qOthersHigh";
-				$tmpcf['priority'] = 4;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				if ($sched == "CBQ") {
-					$tmpcf['borrow'] = "on";
-					$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
-					$tmpcf['bandwidthtype'] = "%";
-				} else if ($sched == "HFSC") {
-					$tmpcf['linkshare'] = "on";
-					$otherbw = $remainbw * 0.1; /* 10% bandwidth */
-					$tmpcf['linkshare3'] = "{$otherbw}%";
-					$tmpcf['bandwidth'] = $otherbw;
+		if ($voip) {
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
+			}
+			$tmpcf = [];
+			$tmpcf['name'] = "qVoIP";
+			$tmpcf['priority'] = 7;
+			$tmpcf['ecn'] = "on";
+			$tmpcf['enabled'] = "on";
+			if ($sched == "CBQ") {
+				$tmpcf['borrow'] = "on";
+				if ($voipbw > 0) {
+					$tmpcf['bandwidth'] = $voipbw;
+					$tmpcf['bandwidthtype'] = $voipbwunit;
+				} else {
+					$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
 					$tmpcf['bandwidthtype'] = "%";
 				}
-				array_push($tmppath, "qOthersHigh");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qHigh <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
-
-
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				if ($voipbw > 0) {
+					$tmpcf['realtime3'] = "{$voipbw}{$voipbwunit}";
+				} else {
+					$voipbw = $remainbw * 0.20; /* 20% bandwidth */
+					$tmpcf['realtime3'] = "{$voipbw}%";
 				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qOthersLow";
-				$tmpcf['priority'] = 2;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				if ($sched == "CBQ") {
-					$tmpcf['borrow'] = "on";
-					if ($penalty) {
-						$tmpcf['bandwidthtype'] = $penaltybwunit;
-						$tmpcf['bandwidth'] = $penaltybw;
-					} else {
-						$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
-						$tmpcf['bandwidthtype'] = "%";
-					}
-				} else if ($sched == "HFSC") {
-					if ($penalty) {
-						$tmpcf['linkshare3'] = "{$penaltybw}{$penaltybwunit}";
-						$tmpcf['bandwidth'] = $penaltybw;
-						$tmpcf['bandwidthtype'] = $penaltybwunit;
-					} else {
-						$lsbw = $remainbw * 0.05;
-						$tmpcf['linkshare3'] = "{$lsbw}%"; /* 5% bandwidth */
-						$tmpcf['bandwidth'] = $lsbw;
-						$tmpcf['bandwidthtype'] = "%";
-					}
-					$tmpcf['linkshare'] = "on";
+				$tmpcf['realtime'] = "on";
+				$tmpcf['bandwidth'] = 32;
+				$tmpcf['bandwidthtype'] = "Kb";
+			}
+			array_push($tmppath, "qVoIP");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+			array_pop($tmppath);
+			$qtmp->wconfig();
+		}
+
+		if ($games) {
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
+			}
+			$tmpcf = [];
+			$tmpcf['name'] = "qGames";
+			$tmpcf['priority'] = 5;
+			$tmpcf['enabled'] = "on";
+			$tmpcf['ecn'] = "on";
+			if ($sched == "CBQ") {
+				$tmpcf['borrow'] = "on";
+				$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
+				$tmpcf['bandwidthtype'] = "%";
+			} elseif ($sched == "HFSC") {
+				$gamesbw = $remainbw * 0.2; /* 20% bandwidth */
+				$tmpcf['linkshare'] = "on";
+				$tmpcf['linkshare3'] = "{$gamesbw}%";
+				$tmpcf['bandwidth'] = "{$gamesbw}";
+				$tmpcf['bandwidthtype'] = "%";
+			}
+			array_push($tmppath, "qGames");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+			array_pop($tmppath);
+			$qtmp->wconfig();
+		}
+
+		if ($otherpriority) {
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
+			}
+			$tmpcf = [];
+			$tmpcf['name'] = "qOthersHigh";
+			$tmpcf['priority'] = 4;
+			$tmpcf['ecn'] = "on";
+			$tmpcf['enabled'] = "on";
+			if ($sched == "CBQ") {
+				$tmpcf['borrow'] = "on";
+				$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
+				$tmpcf['bandwidthtype'] = "%";
+			} elseif ($sched == "HFSC") {
+				$tmpcf['linkshare'] = "on";
+				$otherbw = $remainbw * 0.1; /* 10% bandwidth */
+				$tmpcf['linkshare3'] = "{$otherbw}%";
+				$tmpcf['bandwidth'] = $otherbw;
+				$tmpcf['bandwidthtype'] = "%";
+			}
+			array_push($tmppath, "qOthersHigh");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+			array_pop($tmppath);
+			$qtmp->wconfig();
+
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
+			}
+			$tmpcf = [];
+			$tmpcf['name'] = "qOthersLow";
+			$tmpcf['priority'] = 2;
+			$tmpcf['ecn'] = "on";
+			$tmpcf['enabled'] = "on";
+			if ($sched == "CBQ") {
+				$tmpcf['borrow'] = "on";
+				if ($penalty) {
+					$tmpcf['bandwidthtype'] = $penaltybwunit;
+					$tmpcf['bandwidth'] = $penaltybw;
+				} else {
+					$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
+					$tmpcf['bandwidthtype'] = "%";
 				}
-				array_push($tmppath, "qOthersLow");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qLow <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
+			} elseif ($sched == "HFSC") {
+				if ($penalty) {
+					$tmpcf['linkshare3'] = "{$penaltybw}{$penaltybwunit}";
+					$tmpcf['bandwidth'] = $penaltybw;
+					$tmpcf['bandwidthtype'] = $penaltybwunit;
+				} else {
+					$lsbw = $remainbw * 0.05;
+					$tmpcf['linkshare3'] = "{$lsbw}%"; /* 5% bandwidth */
+					$tmpcf['bandwidth'] = $lsbw;
+					$tmpcf['bandwidthtype'] = "%";
+				}
+				$tmpcf['linkshare'] = "on";
 			}
+			array_push($tmppath, "qOthersLow");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
+			$qtmp->wconfig();
 		}
+		array_pop($tmppath);
+	}
 
 	/* LAN bandwidth ----------------------------------------------------------------------------------------- */
-	$localint = intval($config['ezshaper']['step1']['numberoflocalinterfaces']);
+	$localint = intval(config_get_path('ezshaper/step1/numberoflocalinterfaces', 0));
 	$lanbw = 0;
 	for ($i = 0; $i < $steps; $i++) {
-		$down = wizard_get_bandwidthtype_scale($config['ezshaper']['step2']["conn{$i}downloadspeed"]);
-		$input_bw = floatval($config['ezshaper']['step2']["conn{$i}download"]) * $down;
+		$down = wizard_get_bandwidthtype_scale(config_get_path("ezshaper/step2/conn${i}downloadspeed"));
+		$input_bw = floatval(config_get_path("ezshaper/step2/conn${i}download", 0.0)) * $down;
 		$lanbw += $input_bw;
 	}
 
 	for ($i = 0; $i < $localint; $i++) {
-
-		$tmppath = array();
+		$tmppath = [];
 		$__tmp_altq = new altq_root_queue(); $altq =& $__tmp_altq;
 
-		$altq->SetInterface($config['ezshaper']['step2']["local{$i}interface"]);
-		$altq->SetScheduler($config['ezshaper']['step2']["local{$i}downloadscheduler"]);
+		$altq->SetInterface(config_get_path("ezshaper/step2/local${i}interface"));
+		$altq->SetScheduler(config_get_path("ezshaper/step2/local{$i}downloadscheduler"));
 		$altq->SetBandwidth($lanbw/1000);
 		$altq->SetBwscale("Kb");
 		$altq->SetEnabled("on");
 		$altq_list_queues[$altq->GetQname()] =& $altq;
-		array_push($tmppath, $config['ezshaper']['step2']["local{$i}interface"]);
+		array_push($tmppath, config_get_path("ezshaper/step2/local${i}interface"));
 		$altq->SetLink($tmppath);
-		//var_dump($input_errors);
 		$altq->wconfig();
 
-		$sched = $config['ezshaper']['step2']["local{$i}downloadscheduler"];
+		$sched = config_get_path("ezshaper/step2/local{$i}downloadscheduler");
 		$voipbw =0;
 		$voipbwunit = "%";
 		$voip = false;
@@ -1177,44 +1200,48 @@ function apply_all_chosen_items() {
 		$otherpriority = false;
 		$remainbw = 0;
 
-		if ($config['ezshaper']['step3']['enable']) {
+		if (config_path_enabled('ezshaper/step3')) {
 			$voip = true;
 			if ($sched != "PRIQ") {
-				$voipbw = $config['ezshaper']['step3']["local{$i}download"];
-				$voipbwunit = $config['ezshaper']['step3']["local{$i}downloadspeed"];
+				$voipbw = config_get_path("ezshaper/step3/local{$i}download");
+				$voipbwunit = config_get_path("ezshaper/step3/local{$i}downloadspeed");
 				if ($sched != 'HFSC') {
-					if ($voipbwunit == "%")
+					if ($voipbwunit == "%") {
 						$factor = $lanbw/100;
-					else
+					} else {
 						$factor = wizard_get_bandwidthtype_scale($voipbwunit);
+					}
 					$remainbw += floatval($voipbw) * $factor;
-				} else
+				} else {
 					$remainbw += 32000; /* 32Kbit/s reserved for HFSC link sharing */
+				}
 			}
 		}
-		if ($config['ezshaper']['step4']['enable']) {
+		if (config_path_enabled('ezshaper/step4')) {
 			$penalty = true;
 			if ($sched != "PRIQ") {
-				$penaltybw = $config['ezshaper']['step4']['bandwidth'];
-				$penaltybwunit = $config['ezshaper']['step4']['bandwidthunit'];
-				if ($penaltybwunit == "%")
+				$penaltybw = config_get_path('ezshaper/step4/bandwidth');
+				$penaltybwunit = config_get_path('ezshaper/step4/bandwidthunit');
+				if ($penaltybwunit == "%") {
 					$factor = $lanbw/100;
-				else
+				} else {
 					$factor = wizard_get_bandwidthtype_scale($penaltybwunit);
+				}
 				$remainbw += floatval($penaltybw) * $factor;
 			}
 		}
-		if ($config['ezshaper']['step5']['enable']) {
+		if (config_path_enabled('ezshaper/step5')) {
 			$p2p = true;
-			if ($config['ezshaper']['step5']['p2pcatchall']) {
+			if (!empty(config_get_path('ezshaper/step5/p2pcatchall'))) {
 				$p2pcatchall = true;
 				if ($sched != "PRIQ") {
-					$p2pcatchbw = $config['ezshaper']['step5']['bandwidth'];
-					$p2pcatchbwunit = $config['ezshaper']['step5']['bandwidthunit'];
-					if ($p2pcatchbwunit == "%")
+					$p2pcatchbw = config_get_path('ezshaper/step5/bandwidth');
+					$p2pcatchbwunit = config_get_path('ezshaper/step5/bandwidthunit');
+					if ($p2pcatchbwunit == "%") {
 						$factor = $upbw/100;
-					else
+					} else {
 						$factor = wizard_get_bandwidthtype_scale($p2pcatchbwunit);
+					}
 					$remainbw += floatval($p2pcatchbw) * $factor;
 				}
 			} else {
@@ -1226,20 +1253,18 @@ function apply_all_chosen_items() {
 			$p2pcatchall = false;
 			$p2pcatchbw = 0;
 		}
-		if ($config['ezshaper']['step6']['enable']) {
+		if (config_path_enabled('ezshaper/step6')) {
 			$games = true;
 		} else {
 			$games = false;
 		}
-
-		if ($config['ezshaper']['step7']['enable']) {
+		if (config_path_enabled('ezshaper/step7')) {
 			$otherpriority = true;
 		} else  {
 			$otherpriority = false;
 		}
 		if ($sched != "PRIQ") {
 			$remainbw = round($remainbw / $lanbw * 100, 2);
-
 			if (intval($remainbw) > 0 && intval($remainbw) > 40) {
 				$savemsg=gettext("Custom Bandwidths are greater than 40%. Please lower them for the wizard to continue.");
 				header("Location: wizard.php?xml=traffic_shaper_wizard_multi_all.xml&stepid=2&message={$savemsg}");
@@ -1247,18 +1272,20 @@ function apply_all_chosen_items() {
 			} else {
 				$remainbw = 100 - $remainbw;
 			}
-
 			$lanqbw = $lanbw;
 		}
 		if (!$p2pcatchall) {
 			if ($sched == "PRIQ") {
-				$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
+			$tmpcf = [];
 			$tmpcf['name'] = "qLink";
 			$tmpcf['priority'] = 2;
 			$tmpcf['enabled'] = "on";
@@ -1269,28 +1296,29 @@ function apply_all_chosen_items() {
 				$tmpcf['borrow'] = "on";
 				$tmpcf['bandwidth'] = 20; /* 20% bandwidth */
 				$tmpcf['bandwidthtype'] = "%";
-			} else if ($sched == "HFSC") {
+			} elseif ($sched == "HFSC") {
 				$tmpcf['bandwidth'] = 20; /* 20% bandwidth */
 				$tmpcf['bandwidthtype'] = "%";
 			}
 			array_push($tmppath, $tmpcf['name']);
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
-			//echo "qDefault <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
 
-			if ($sched != "PRIQ")
+			if ($sched != "PRIQ") {
 				$lanqbw *= 0.8; /* lanqbw - 20% */
+			}
 		}
 
 		if ($sched != "PRIQ") {
 			if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
+			$tmpcf = [];
 			$tmpcf['name'] = "qInternet";
 			//$tmpcf['priority'] = 6;
 			$tmpcf['ecn'] = "on";
@@ -1298,261 +1326,259 @@ function apply_all_chosen_items() {
 			If ($sched == "CBQ") {
 				$tmpcf['bandwidth'] = $lanqbw/1000;
 				$tmpcf['bandwidthtype'] = "Kb";
-			}
-			else if ($sched == "HFSC") {
-				$tmpcf['linkshare3'] = ($lanqbw/1000) . "Kb";
-				$tmpcf['upperlimit3'] = ($lanqbw/1000) . "Kb";
+			} elseif ($sched == "HFSC") {
 				$tmpcf['upperlimit'] = "on";
+				$tmpcf['upperlimit3'] = ($lanqbw/1000) . "Kb";
 				$tmpcf['linkshare'] = "on";
+				$tmpcf['linkshare3'] = ($lanqbw/1000) . "Kb";
 				$tmpcf['bandwidth'] =  $lanqbw/1000;
 				$tmpcf['bandwidthtype'] = "Kb";
 			}
 			array_push($tmppath, "qInternet");
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			//array_pop($tmppath);
-			//echo "qInternet <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
 			$altq =& $qtmp;
 		}
 
+		if ($sched == "PRIQ") {
+			$__tmp_q = new priq_queue();
+			$q =& $__tmp_q;
+		} elseif ($sched == "CBQ") {
+			$__tmp_q = new cbq_queue();
+			$q =& $__tmp_q;
+		} elseif ($sched == "HFSC") {
+			$__tmp_q = new hfsc_queue();
+			$q =& $__tmp_q;
+		}
+		$tmpcf = [];
+		$tmpcf['name'] = "qACK";
+		$tmpcf['priority'] = 6;
+		$tmpcf['ecn'] = "on";
+		$tmpcf['enabled'] = "on";
+		If ($sched == "CBQ") {
+			$tmpcf['borrow'] = "on";
+			$tmpcf['bandwidth'] = $remainbw * 0.2;
+			$tmpcf['bandwidthtype'] = "%";
+		} elseif ($sched == "HFSC") {
+			$lkbw = 0.20 * $remainbw;
+			$tmpcf['linkshare3'] = "{$lkbw}%";
+			$tmpcf['linkshare'] = "on";
+			$tmpcf['bandwidth'] = $lkbw;
+			$tmpcf['bandwidthtype'] = "%";
+		}
+		array_push($tmppath, "qACK");
+		$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+		array_pop($tmppath);
+		$qtmp->wconfig();
+
+		if ($p2p) {
 			if ($sched == "PRIQ") {
-				$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "CBQ") {
-				$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-			} else if ($sched == "HFSC") {
-				$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
-			$tmpcf = array();
-			$tmpcf['name'] = "qACK";
-			$tmpcf['priority'] = 6;
+			$tmpcf = [];
+			$tmpcf['name'] = "qP2P";
+			$tmpcf['priority'] = 1;
 			$tmpcf['ecn'] = "on";
 			$tmpcf['enabled'] = "on";
-			If ($sched == "CBQ") {
-				$tmpcf['borrow'] = "on";
-				$tmpcf['bandwidth'] = $remainbw * 0.2;
-				$tmpcf['bandwidthtype'] = "%";
-			}
-			else if ($sched == "HFSC") {
-				$lkbw = 0.20 * $remainbw;
-				$tmpcf['linkshare3'] = "{$lkbw}%";
-				$tmpcf['linkshare'] = "on";
-				$tmpcf['bandwidth'] = $lkbw;
-				$tmpcf['bandwidthtype'] = "%";
+			if ($p2pcatchall) {
+				if ($sched == "CBQ") {
+					$tmpcf['borrow'] = "on";
+					$tmpcf['bandwidth'] = $p2pcatchbw;
+					$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
+				} elseif ($sched == "HFSC") {
+					$tmpcf['linkshare'] = "on";
+					$tmpcf['linkshare3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
+					$tmpcf['upperlimit'] = "on";
+					$tmpcf['upperlimit3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
+					$tmpcf['bandwidth'] = $p2pcatchbw;
+					$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
+				}
+				$tmpcf['default'] = "on";
+				$tmpcf['qlimit'] = 500;
+			} else {
+				if ($sched == "CBQ") {
+					$tmpcf['borrow'] = "on";
+					$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
+					$tmpcf['bandwidthtype'] = "%";
+				} elseif ($sched == "HFSC") {
+					$tmpbw = $remainbw * 0.05; /* 5% bandwidth */
+					$tmpcf['linkshare'] = "on";
+					$tmpcf['linkshare3'] = "{$tmpbw}%";
+					$tmpcf['upperlimit'] = "on";
+					$tmpcf['upperlimit3'] = "{$tmpbw}%";
+					$tmpcf['bandwidth'] = $tmpbw;
+					$tmpcf['bandwidthtype'] = "%";
+				}
 			}
-			array_push($tmppath, "qACK");
+			array_push($tmppath, "qP2P");
 			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
-			//echo "qACK <br />";
-			//var_dump($input_errors);
 			$qtmp->wconfig();
+		}
 
-			if ($p2p) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
+		if ($voip) {
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
+			}
+			$tmpcf = [];
+			$tmpcf['name'] = "qVoIP";
+			$tmpcf['priority'] = 7;
+			$tmpcf['ecn'] = "on";
+			$tmpcf['enabled'] = "on";
+			if ($sched == "CBQ") {
+				$tmpcf['borrow'] = "on";
+				if ($voipbw > 0) {
+					$tmpcf['bandwidth'] = $voipbw;
+					$tmpcf['bandwidthtype'] = $voipbwunit;
+				} else {
+					$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
+					$tmpcf['bandwidthtype'] = "%";
 				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qP2P";
-				$tmpcf['priority'] = 1;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				if ($p2pcatchall) {
-					if ($sched == "CBQ") {
-						$tmpcf['borrow'] = "on";
-						$tmpcf['bandwidth'] = $p2pcatchbw;
-						$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
-					} else if ($sched == "HFSC") {
-						$tmpcf['linkshare'] = "on";
-						$tmpcf['linkshare3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
-						$tmpcf['upperlimit'] = "on";
-						$tmpcf['upperlimit3'] = "{$p2pcatchbw}{$p2pcatchbwunit}";
-						$tmpcf['bandwidth'] = $p2pcatchbw;
-						$tmpcf['bandwidthtype'] = $p2pcatchbwunit;
-					}
-					$tmpcf['default'] = "on";
-					$tmpcf['qlimit'] = 500;
+			} elseif ($sched == "HFSC") {
+				if ($voipbw > 0) {
+					$tmpcf['realtime3'] = "{$voipbw}{$voipbwunit}";
 				} else {
-					if ($sched == "CBQ") {
-						$tmpcf['borrow'] = "on";
-						$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
-						$tmpcf['bandwidthtype'] = "%";
-					} else if ($sched == "HFSC") {
-						$tmpbw = $remainbw * 0.05; /* 5% bandwidth */
-						$tmpcf['linkshare'] = "on";
-						$tmpcf['linkshare3'] = "{$tmpbw}%";
-						$tmpcf['upperlimit'] = "on";
-						$tmpcf['upperlimit3'] = "{$tmpbw}%";
-						$tmpcf['bandwidth'] = $tmpbw;
-						$tmpcf['bandwidthtype'] = "%";
-					}
+					$voipbw = $remainbw * 0.20; /* 20% bandwidth */
+					$tmpcf['realtime3'] = "{$voipbw}%";
 				}
-				array_push($tmppath, "qP2P");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qP2P <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
+				$tmpcf['realtime'] = "on";
+				$tmpcf['bandwidth'] = 32;
+				$tmpcf['bandwidthtype'] = "Kb";
 			}
+			array_push($tmppath, "qVoIP");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+			array_pop($tmppath);
+			$qtmp->wconfig();
+		}
 
-			if ($voip) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
-				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qVoIP";
-				$tmpcf['priority'] = 7;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				if ($sched == "CBQ") {
-					$tmpcf['borrow'] = "on";
-					if ($voipbw > 0) {
-						$tmpcf['bandwidth'] = $voipbw;
-						$tmpcf['bandwidthtype'] = $voipbwunit;
-					} else {
-						$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
-						$tmpcf['bandwidthtype'] = "%";
-					}
-				} else if ($sched == "HFSC") {
-					if ($voipbw > 0) {
-						$tmpcf['realtime3'] = "{$voipbw}{$voipbwunit}";
-					} else {
-						$voipbw = $remainbw * 0.20; /* 20% bandwidth */
-						$tmpcf['realtime3'] = "{$voipbw}%";
-					}
-					$tmpcf['realtime'] = "on";
-					$tmpcf['bandwidth'] = 32;
-					$tmpcf['bandwidthtype'] = "Kb";
-				}
-				array_push($tmppath, "qVoIP");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qVoIP <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
+		if ($games) {
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
+			$tmpcf = [];
+			$tmpcf['name'] = "qGames";
+			$tmpcf['priority'] = 5;
+			$tmpcf['enabled'] = "on";
+			$tmpcf['ecn'] = "on";
+			if ($sched == "CBQ") {
+				$tmpcf['borrow'] = "on";
+				$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
+				$tmpcf['bandwidthtype'] = "%";
+			} elseif ($sched == "HFSC") {
+				$gamesbw = $remainbw * 0.2; /* 20% bandwidth */
+				$tmpcf['linkshare'] = "on";
+				$tmpcf['linkshare3'] = "{$gamesbw}%";
+				$tmpcf['bandwidth'] = "{$gamesbw}";
+				$tmpcf['bandwidthtype'] = "%";
+			}
+			array_push($tmppath, "qGames");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+			array_pop($tmppath);
+			$qtmp->wconfig();
+		}
 
-			if ($games) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
-				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qGames";
-				$tmpcf['priority'] = 5;
-				$tmpcf['enabled'] = "on";
-				$tmpcf['ecn'] = "on";
-				if ($sched == "CBQ") {
-					$tmpcf['borrow'] = "on";
-					$tmpcf['bandwidth'] = $remainbw * 0.2; /* 20% bandwidth */
-					$tmpcf['bandwidthtype'] = "%";
-				} else if ($sched == "HFSC") {
-					$gamesbw = $remainbw * 0.2; /* 20% bandwidth */
-					$tmpcf['linkshare'] = "on";
-					$tmpcf['linkshare3'] = "{$gamesbw}%";
-					$tmpcf['bandwidth'] = "{$gamesbw}";
-					$tmpcf['bandwidthtype'] = "%";
-				}
-				array_push($tmppath, "qGames");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qGames <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
+		if ($otherpriority) {
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
 			}
+			$tmpcf = [];
+			$tmpcf['name'] = "qOthersHigh";
+			$tmpcf['priority'] = 4;
+			$tmpcf['ecn'] = "on";
+			$tmpcf['enabled'] = "on";
+			if ($sched == "CBQ") {
+				$tmpcf['borrow'] = "on";
+				$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
+				$tmpcf['bandwidthtype'] = "%";
+			} elseif ($sched == "HFSC") {
+				$tmpcf['linkshare'] = "on";
+				$otherbw = $remainbw * 0.1; /* 10% bandwidth */
+				$tmpcf['linkshare3'] = "{$otherbw}%";
+				$tmpcf['bandwidth'] = $otherbw;
+				$tmpcf['bandwidthtype'] = "%";
+			}
+			array_push($tmppath, "qOthersHigh");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
+			array_pop($tmppath);
+			$qtmp->wconfig();
 
-			if ($otherpriority) {
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
-				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qOthersHigh";
-				$tmpcf['priority'] = 4;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				if ($sched == "CBQ") {
-					$tmpcf['borrow'] = "on";
-					$tmpcf['bandwidth'] = $remainbw * 0.1; /* 10% bandwidth */
-					$tmpcf['bandwidthtype'] = "%";
-				} else if ($sched == "HFSC") {
-					$tmpcf['linkshare'] = "on";
-					$otherbw = $remainbw * 0.1; /* 10% bandwidth */
-					$tmpcf['linkshare3'] = "{$otherbw}%";
-					$tmpcf['bandwidth'] = $otherbw;
+			if ($sched == "PRIQ") {
+				$__tmp_q = new priq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "CBQ") {
+				$__tmp_q = new cbq_queue();
+				$q =& $__tmp_q;
+			} elseif ($sched == "HFSC") {
+				$__tmp_q = new hfsc_queue();
+				$q =& $__tmp_q;
+			}
+			$tmpcf = [];
+			$tmpcf['name'] = "qOthersLow";
+			$tmpcf['priority'] = 3;
+			$tmpcf['ecn'] = "on";
+			$tmpcf['enabled'] = "on";
+			if ($sched == "CBQ") {
+				$tmpcf['borrow'] = "on";
+				if ($penalty) {
+					$tmpcf['bandwidth'] = $penaltybw;
+					$tmpcf['bandwidthtype'] = $penaltybwunit;
+				} else {
 					$tmpcf['bandwidthtype'] = "%";
+					$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
 				}
-				array_push($tmppath, "qOthersHigh");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qHigh <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
-
-
-				if ($sched == "PRIQ") {
-					$__tmp_q = new priq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "CBQ") {
-					$__tmp_q = new cbq_queue(); $q =& $__tmp_q;
-				} else if ($sched == "HFSC") {
-					$__tmp_q = new hfsc_queue(); $q =& $__tmp_q;
-				}
-				$tmpcf = array();
-				$tmpcf['name'] = "qOthersLow";
-				$tmpcf['priority'] = 3;
-				$tmpcf['ecn'] = "on";
-				$tmpcf['enabled'] = "on";
-				if ($sched == "CBQ") {
-					$tmpcf['borrow'] = "on";
-					if ($penalty) {
-						$tmpcf['bandwidth'] = $penaltybw;
-						$tmpcf['bandwidthtype'] = $penaltybwunit;
-					} else {
-						$tmpcf['bandwidthtype'] = "%";
-						$tmpcf['bandwidth'] = $remainbw * 0.05; /* 5% bandwidth */
-					}
-				} else if ($sched == "HFSC") {
-					if ($penalty) {
-						$tmpcf['linkshare3'] = "{$penaltybw}{$penaltybwunit}";
-						$tmpcf['bandwidth'] = $penaltybw;
-						$tmpcf['bandwidthtype'] = $penaltybwunit;
-					} else {
-						$lsbw = $remainbw * 0.05;
-						$tmpcf['linkshare3'] = "{$lsbw}%"; /* 5% bandwidth */
-						$tmpcf['bandwidth'] = $lsbw;
-						$tmpcf['bandwidthtype'] = "%";
-					}
-					$tmpcf['linkshare'] = "on";
+			} elseif ($sched == "HFSC") {
+				if ($penalty) {
+					$tmpcf['linkshare3'] = "{$penaltybw}{$penaltybwunit}";
+					$tmpcf['bandwidth'] = $penaltybw;
+					$tmpcf['bandwidthtype'] = $penaltybwunit;
+				} else {
+					$lsbw = $remainbw * 0.05;
+					$tmpcf['linkshare3'] = "{$lsbw}%"; /* 5% bandwidth */
+					$tmpcf['bandwidth'] = $lsbw;
+					$tmpcf['bandwidthtype'] = "%";
 				}
-				array_push($tmppath, "qOthersLow");
-				$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
-				array_pop($tmppath);
-				//echo "qLow <br />";
-				//var_dump($input_errors);
-				$qtmp->wconfig();
+				$tmpcf['linkshare'] = "on";
 			}
+			array_push($tmppath, "qOthersLow");
+			$qtmp =& $altq->add_queue($q, $tmpcf, $tmppath, $input_errors);
 			array_pop($tmppath);
+			$qtmp->wconfig();
+		}
+		array_pop($tmppath);
 	}
 
 /* End LAN bandwidth ------------------------------------------------------------------------------------- */
 
-
-
-	if (!is_array($config['filter']['rule']))
-		$config['filter']['rule'] = array();
+	$filter_rules = config_get_path('filter/rule', []);
 
 	if (!empty($interfacelist)) {
 		$interfacelist = implode(",", $interfacelist);
@@ -1563,13 +1589,14 @@ function apply_all_chosen_items() {
 	/* Rules */
 	$tracker = (int)microtime(true);
 	if ($penalty) {
-		if (is_ipaddr($config['ezshaper']['step4']['address']) || is_alias($config['ezshaper']['step4']['address'])) {
-			$rule = array();
+		if (is_ipaddr(config_get_path('ezshaper/step4/address')) ||
+		    is_alias(config_get_path('ezshaper/step4/address'))) {
+			$rule = [];
 			$rule['type'] = "match";
 			$rule['interface'] = $interfacelist;
-			if (is_ipaddrv4($config['ezshaper']['step4']['address'])) {
+			if (is_ipaddrv4(config_get_path('ezshaper/step4/address'))) {
 				$rule['ipprotocol'] = "inet";
-			} elseif (is_ipaddrv6($config['ezshaper']['step4']['address'])) {
+			} elseif (is_ipaddrv6(config_get_path('ezshaper/step4/address'))) {
 				$rule['ipprotocol'] = "inet6";
 			} else {
 				$rule['ipprotocol'] = "inet46";
@@ -1580,196 +1607,221 @@ function apply_all_chosen_items() {
 			} else {
 				$rule['defaultqueue'] = "qDefault";
 			}
-			$rule['source']['address'] = $config['ezshaper']['step4']['address'];
+			$rule['source'] = [];
+			$rule['source']['address'] = config_get_path('ezshaper/step4/address');
+			$rule['destination'] = [];
 			$rule['destination']['any'] = TRUE;
 			$rule['floating'] = "yes";
 			$rule['wizard'] = "yes";
 			$rule['enabled'] = "on";
 			$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
 			$rule['tracker'] = $tracker++;
-			$config['filter']['rule'][] = $rule;
-
+			$filter_rules[] = $rule;
 		}
 	}
 
-			/* If user specifies an IP, we don't bother with providers */
-			if ($voip) {
-				if (is_ipaddr($config['ezshaper']['step3']['address']) || is_alias($config['ezshaper']['step3']['address'])) {
-					/* create VOIP rules */
-					$rule = array();
-					$rule['type'] = "match";
-					if (is_ipaddrv4($config['ezshaper']['step3']['address'])) {
-						$ipprotocol = "inet";
-					} elseif (is_ipaddrv6($config['ezshaper']['step3']['address'])) {
-						$ipprotocol = "inet6";
-					} else {
-						$ipprotocol = "inet46";
-					}
-					$rule['interface'] = "any";
-					$rule['ipprotocol'] = $ipprotocol;
-					$rule['descr'] = gettext("Connections From Upstream SIP Server");
-					$rule['protocol'] = "udp";
-					$rule['defaultqueue'] = "qVoIP";
-					$rule['source']['address'] = $config['ezshaper']['step3']['address'];
-					$rule['destination']['any'] = TRUE;
-					$rule['floating'] = "yes";
-					$rule['wizard'] = "yes";
-					$rule['enabled'] = "on";
-					$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
-					$rule['tracker'] = $tracker++;
-					$config['filter']['rule'][] = $rule;
-
-					$rule = array();
-					$rule['type'] = "match";
-					$rule['interface'] = "any";
-					$rule['ipprotocol'] = $ipprotocol;
-					$rule['descr'] = gettext("Connections To Upstream SIP Server");
-					$rule['protocol'] = "udp";
-					$rule['defaultqueue'] = "qVoIP";
-					$rule['source']['any'] = TRUE;
-					$rule['destination']['address'] = $config['ezshaper']['step3']['address'];
-					$rule['floating'] = "yes";
-					$rule['wizard'] = "yes";
-					$rule['enabled'] = "on";
-					$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
-					$rule['tracker'] = $tracker++;
-					$config['filter']['rule'][] = $rule;
-
-				} elseif ($config['ezshaper']['step3']['provider'] == "Generic") {
-					/* create VOIP rules */
-					$rule = array();
-					$rule['type'] = "match";
-					$rule['interface'] = $interfacelist;
-					$rule['ipprotocol'] = "inet46";
-					$rule['descr'] = "DiffServ/Lowdelay/Upload";
-					$rule['protocol'] = "udp";
-					$rule['source']['any'] = TRUE;
-					$rule['defaultqueue'] = "qVoIP";
-					$rule['destination']['any'] = TRUE;
-					$rule['iptos'] = "lowdelay";
-					$rule['floating'] = "yes";
-					$rule['wizard'] = "yes";
-					$rule['enabled'] = "on";
-					$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
-					$rule['tracker'] = $tracker++;
-					$config['filter']['rule'][] = $rule;
+	/* If user specifies an IP, we don't bother with providers */
+	if ($voip) {
+		if (is_ipaddr(config_get_path('ezshaper/step3/address')) ||
+		    is_alias(config_get_path('ezshaper/step3/address'))) {
+			/* create VOIP rules */
+			$rule = [];
+			$rule['type'] = "match";
+			if (is_ipaddrv4(config_get_path('ezshaper/step3/address'))) {
+				$ipprotocol = "inet";
+			} elseif (is_ipaddrv6(config_get_path('ezshaper/step3/address'))) {
+				$ipprotocol = "inet6";
+			} else {
+				$ipprotocol = "inet46";
+			}
+			$rule['interface'] = "any";
+			$rule['ipprotocol'] = $ipprotocol;
+			$rule['descr'] = gettext("Connections From Upstream SIP Server");
+			$rule['protocol'] = "udp";
+			$rule['defaultqueue'] = "qVoIP";
+			$rule['source'] = [];
+			$rule['source']['address'] = config_get_path('ezshaper/step3/address');
+			$rule['destination'] = [];
+			$rule['destination']['any'] = TRUE;
+			$rule['floating'] = "yes";
+			$rule['wizard'] = "yes";
+			$rule['enabled'] = "on";
+			$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
+			$rule['tracker'] = $tracker++;
+			$filter_rules[] = $rule;
 
-				} else {
-					/* loop through voiplist[] */
-					foreach ($voiplist[$config['ezshaper']['step3']['provider']] as $voip) {
-						$rule = array();
-						$rule['type'] = "match";
-						$rule['interface'] = $interfacelist;
-						$rule['ipprotocol'] = "inet46";
-						$rule['defaultqueue'] = 'qVoIP';
-						$rule['source']['any'] = TRUE;
-						$rule['destination']['any'] = TRUE;
-						$rule['descr'] = "m_voip {$voip[0]} outbound";
-						$rule['floating'] = "yes";
-						$rule['wizard'] = "yes";
-						$rule['enabled'] = "on";
-						$rule['destination']['port'] = $voip[2]."-".$voip[3];
-						if ($voip[1] != '')
-							$rule['protocol'] = $voip[1];
-						$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
-						$rule['tracker'] = $tracker++;
-						$config['filter']['rule'][] = $rule;
-					}
+			$rule = [];
+			$rule['type'] = "match";
+			$rule['interface'] = "any";
+			$rule['ipprotocol'] = $ipprotocol;
+			$rule['descr'] = gettext("Connections To Upstream SIP Server");
+			$rule['protocol'] = "udp";
+			$rule['defaultqueue'] = "qVoIP";
+			$rule['source'] = [];
+			$rule['source']['any'] = TRUE;
+			$rule['destination'] = [];
+			$rule['destination']['address'] = config_get_path('ezshaper/step3/address');
+			$rule['floating'] = "yes";
+			$rule['wizard'] = "yes";
+			$rule['enabled'] = "on";
+			$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
+			$rule['tracker'] = $tracker++;
+			$filter_rules[] = $rule;
+		} elseif (config_get_path('ezshaper/step3/provider') == "Generic") {
+			/* create VOIP rules */
+			$rule = [];
+			$rule['type'] = "match";
+			$rule['interface'] = $interfacelist;
+			$rule['ipprotocol'] = "inet46";
+			$rule['descr'] = "DiffServ/Lowdelay/Upload";
+			$rule['protocol'] = "udp";
+			$rule['source'] = [];
+			$rule['source']['any'] = TRUE;
+			$rule['defaultqueue'] = "qVoIP";
+			$rule['destination'] = [];
+			$rule['destination']['any'] = TRUE;
+			$rule['iptos'] = "lowdelay";
+			$rule['floating'] = "yes";
+			$rule['wizard'] = "yes";
+			$rule['enabled'] = "on";
+			$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
+			$rule['tracker'] = $tracker++;
+			$filter_rules[] = $rule;
+		} elseif (array_key_exists(config_get_path('ezshaper/step3/provider'), $voiplist)) {
+			/* loop through voiplist[] */
+			foreach ($voiplist[config_get_path('ezshaper/step3/provider')] as $voip) {
+				$rule = [];
+				$rule['type'] = "match";
+				$rule['interface'] = $interfacelist;
+				$rule['ipprotocol'] = "inet46";
+				$rule['defaultqueue'] = 'qVoIP';
+				$rule['source'] = [];
+				$rule['source']['any'] = TRUE;
+				$rule['destination'] = [];
+				$rule['destination']['any'] = TRUE;
+				$rule['descr'] = "m_voip {$voip[0]} outbound";
+				$rule['floating'] = "yes";
+				$rule['wizard'] = "yes";
+				$rule['enabled'] = "on";
+				$rule['destination']['port'] = $voip[2]."-".$voip[3];
+				if ($voip[1] != '') {
+					$rule['protocol'] = $voip[1];
 				}
+				$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
+				$rule['tracker'] = $tracker++;
+				$filter_rules[] = $rule;
 			}
+		}
+	}
 
-			/* loop through p2plist[] */
-			if ($p2p) {
-				foreach ($config['ezshaper']['step5'] as $key => $val) {
-					if (!is_array($p2plist[$key]))
-						continue;
-					foreach ($p2plist[$key] as $p2pclient) {
-						$rule = array();
-						$rule['type'] = "match";
-						$rule['interface'] = $interfacelist;
-						$rule['ipprotocol'] = "inet46";
-						$rule['defaultqueue'] = 'qP2P';
-						$rule['source']['any'] = TRUE;
-						$rule['destination']['any'] = TRUE;
-						$rule['descr'] = "m_P2P {$p2pclient[0]} outbound";
-						$rule['floating'] = "yes";
-						$rule['wizard'] = "yes";
-						$rule['destination']['port'] = $p2pclient[2]."-".$p2pclient[3];
-						if ($p2pclient[1] != '')
-							$rule['protocol'] = $p2pclient[1];
-						$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
-						$rule['tracker'] = $tracker++;
-						$config['filter']['rule'][] = $rule;
-					}
+	/* loop through p2plist[] */
+	if ($p2p) {
+		foreach (config_get_path('ezshaper/step5', []) as $key => $val) {
+			if (!is_array($p2plist[$key])) {
+				continue;
+			}
+			foreach ($p2plist[$key] as $p2pclient) {
+				$rule = [];
+				$rule['type'] = "match";
+				$rule['interface'] = $interfacelist;
+				$rule['ipprotocol'] = "inet46";
+				$rule['defaultqueue'] = 'qP2P';
+				$rule['source'] = [];
+				$rule['source']['any'] = TRUE;
+				$rule['destination'] = [];
+				$rule['destination']['any'] = TRUE;
+				$rule['descr'] = "m_P2P {$p2pclient[0]} outbound";
+				$rule['floating'] = "yes";
+				$rule['wizard'] = "yes";
+				$rule['destination']['port'] = $p2pclient[2]."-".$p2pclient[3];
+				if ($p2pclient[1] != '') {
+					$rule['protocol'] = $p2pclient[1];
 				}
+				$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
+				$rule['tracker'] = $tracker++;
+				$filter_rules[] = $rule;
 			}
+		}
+	}
 
-			/* loop through gamesplist[] */
-			if ($games) {
-				foreach ($config['ezshaper']['step6'] as $key => $val) {
-					if (!is_array($gamesplist[$key]))
-										continue;
-					foreach ($gamesplist[$key] as $Gameclient) {
-						$rule = array();
-						$rule['type'] = "match";
-						$rule['interface'] = $interfacelist;
-						$rule['ipprotocol'] = "inet46";
-						$rule['defaultqueue'] = 'qGames';
-						if ($Gameclient[1] == "tcp")
-							$rule['ackqueue'] = 'qACK';
-						$rule['source']['any'] = TRUE;
-						$rule['destination']['any'] = TRUE;
-						$rule['floating'] = "yes";
-						$rule['wizard'] = "yes";
-						$rule['enabled'] = "on";
-						$rule['descr'] = "m_Game {$Gameclient[0]} outbound";
-						$rule['destination']['port'] = $Gameclient[2]."-".$Gameclient[3];
-						if ($Gameclient[1] != '')
-							$rule['protocol'] = $Gameclient[1];
-						$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
-						$rule['tracker'] = $tracker++;
-						$config['filter']['rule'][] = $rule;
-					}
+	/* loop through gamesplist[] */
+	if ($games) {
+		foreach (config_get_path('ezshaper/step6', []) as $key => $val) {
+			if (!is_array($gamesplist[$key])) {
+				continue;
+			}
+			foreach ($gamesplist[$key] as $Gameclient) {
+				$rule = [];
+				$rule['type'] = "match";
+				$rule['interface'] = $interfacelist;
+				$rule['ipprotocol'] = "inet46";
+				$rule['defaultqueue'] = 'qGames';
+				if ($Gameclient[1] == "tcp") {
+					$rule['ackqueue'] = 'qACK';
 				}
+				$rule['source'] = [];
+				$rule['source']['any'] = TRUE;
+				$rule['destination'] = [];
+				$rule['destination']['any'] = TRUE;
+				$rule['floating'] = "yes";
+				$rule['wizard'] = "yes";
+				$rule['enabled'] = "on";
+				$rule['descr'] = "m_Game {$Gameclient[0]} outbound";
+				$rule['destination']['port'] = $Gameclient[2]."-".$Gameclient[3];
+				if ($Gameclient[1] != '') {
+					$rule['protocol'] = $Gameclient[1];
+				}
+				$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
+				$rule['tracker'] = $tracker++;
+				$filter_rules[] = $rule;
 			}
+		}
+	}
 
 	/* loop through othersplist[] */
 	if ($otherpriority) {
-		foreach ($config['ezshaper']['step7'] as $key => $val) {
-			if (!is_array($othersplist[$key]))
+		foreach (config_get_path('ezshaper/step7', []) as $key => $val) {
+			if (!is_array($othersplist[$key])) {
 				continue;
+			}
 			foreach ($othersplist[$key] as $otherclient) {
-				$rule = array();
+				$rule = [];
 				$rule['type'] = "match";
 				$rule['interface'] = $interfacelist;
 				$rule['ipprotocol'] = "inet46";
 				switch ($val) {
 				case "H":
 					$rule['defaultqueue'] = 'qOthersHigh'; /* posted value H or L */
-					if ($otherclient[1] == "tcp")
-								$rule['ackqueue'] = 'qACK';
+					if ($otherclient[1] == "tcp") {
+						$rule['ackqueue'] = 'qACK';
+					}
 					$loop = 0;
 					break;
 				case "L":
 					$rule['defaultqueue'] = 'qOthersLow'; /* posted value H or L */
-					if ($otherclient[1] == "tcp")
+					if ($otherclient[1] == "tcp") {
 						$rule['ackqueue'] = 'qACK';
+					}
 					$loop = 0;
 					break;
 				case "D":
 					if ($p2pcatchall) {
 						$loop = 0;
 						$rule['defaultqueue'] = 'qOthersDefault';
-						if ($otherclient[1] == "tcp")
+						if ($otherclient[1] == "tcp") {
 							$rule['ackqueue'] = 'qACK';
-					} else
+						}
+					} else {
 						$loop = 1; /* It automatically goes to default queue */
+					}
 					break;
 				default:
 					$loop = 1;
 				}
 				if (!$loop) {
+					$rule['source'] = [];
 					$rule['source']['any'] = TRUE;
+					$rule['destination'] = [];
 					$rule['destination']['any'] = TRUE;
 					$rule['floating'] = "yes";
 					$rule['wizard'] = "yes";
@@ -1779,15 +1831,18 @@ function apply_all_chosen_items() {
 					if ($otherclient[2] or $otherclient[3]) {
 						$rule['destination']['port'] = $otherclient[2]."-".$otherclient[3];
 					}
-					if ($otherclient[1] != '')
+					if ($otherclient[1] != '') {
 						$rule['protocol'] = $otherclient[1];
+					}
 					$rule['created'] = make_config_revision_entry(null, gettext("Traffic Shaper Wizard"));
 					$rule['tracker'] = $tracker++;
-					$config['filter']['rule'][] = $rule;
+					$filter_rules[] = $rule;
 				}
 			}
 		}
 	}
+
+	config_set_path('filter/rule', $filter_rules);
 	write_config(gettext("Shaper configuration saved via traffic shaper wizard."));
 }
 
