lib/ivis_opengl/gfx_api_vk.cpp:480:3: error: use of undeclared identifier 'throwResultException'; did you mean 'vk::throwResultException'?
                throwResultException( result, "vmaCreateBuffer" );
                ^~~~~~~~~~~~~~~~~~~~
                vk::throwResultException
/usr/local/include/vulkan/vulkan.hpp:6315:23: note: 'vk::throwResultException' declared here
    [[noreturn]] void throwResultException( Result result, char const * message )
                      ^
lib/ivis_opengl/gfx_api_vk.cpp:1293:4: error: use of undeclared identifier 'throwResultException'; did you mean 'vk::throwResultException'?
                        throwResultException(result.result, "createGraphicsPipeline");
                        ^~~~~~~~~~~~~~~~~~~~
                        vk::throwResultException
/usr/local/include/vulkan/vulkan.hpp:6315:23: note: 'vk::throwResultException' declared here
    [[noreturn]] void throwResultException( Result result, char const * message )
                      ^
lib/ivis_opengl/gfx_api_vk.cpp:1353:3: error: use of undeclared identifier 'throwResultException'; did you mean 'vk::throwResultException'?
                throwResultException( result, "vmaCreateBuffer" );
                ^~~~~~~~~~~~~~~~~~~~
                vk::throwResultException
/usr/local/include/vulkan/vulkan.hpp:6315:23: note: 'vk::throwResultException' declared here
    [[noreturn]] void throwResultException( Result result, char const * message )
                      ^
lib/ivis_opengl/gfx_api_vk.cpp:1460:3: error: use of undeclared identifier 'throwResultException'; did you mean 'vk::throwResultException'?
                throwResultException( result, "vmaCreateImage" );
                ^~~~~~~~~~~~~~~~~~~~
                vk::throwResultException
/usr/local/include/vulkan/vulkan.hpp:6315:23: note: 'vk::throwResultException' declared here
    [[noreturn]] void throwResultException( Result result, char const * message )
                      ^

--- lib/ivis_opengl/gfx_api_vk.cpp.orig	2021-04-18 18:28:41 UTC
+++ lib/ivis_opengl/gfx_api_vk.cpp
@@ -477,7 +477,7 @@ void BlockBufferAllocator::allocateNewBlock(uint32_t m
 	if (result != vk::Result::eSuccess)
 	{
 		// Failed to allocate memory!
-		throwResultException( result, "vmaCreateBuffer" );
+		vk::throwResultException( result, "vmaCreateBuffer" );
 	}
 
 	if (autoMap)
@@ -1290,7 +1290,7 @@ VkPSO::VkPSO(vk::Device _dev,
 			object = std::move(result.value);
 			break;
 		default:
-			throwResultException(result.result, "createGraphicsPipeline");
+			vk::throwResultException(result.result, "createGraphicsPipeline");
 	}
 }
 
@@ -1350,7 +1350,7 @@ void VkBuf::allocateBufferObject(const std::size_t& si
 	if (result != vk::Result::eSuccess)
 	{
 		// Failed to allocate memory!
-		throwResultException( result, "vmaCreateBuffer" );
+		vk::throwResultException( result, "vmaCreateBuffer" );
 	}
 
 	buffer_size = size;
@@ -1457,7 +1457,7 @@ VkTexture::VkTexture(const VkRoot& root, const std::si
 	if (result != vk::Result::eSuccess)
 	{
 		// Failed to allocate memory!
-		throwResultException( result, "vmaCreateImage" );
+		vk::throwResultException( result, "vmaCreateImage" );
 	}
 
 	const auto imageViewCreateInfo = vk::ImageViewCreateInfo()
