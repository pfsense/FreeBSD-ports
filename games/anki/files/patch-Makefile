Coerce sequential processing of the build targets as it's already done for the
"develop" target in the same file.

Not doing this will often cause failures with the "build-qt" target that needs
files in ${WRKSRC}/ts/dist/ which is created by the "build-ts" target.

A workaround would be to set MAKE_JOBS_UNSAFE but that would also slow down the
compilation of the Rust library.

Also the "build-ts" target must be run after the "build-pylib" target otherwise
it produces a ${WRKSRC}/ts/dist/graphs.js with wrong content.

--- Makefile.orig	2020-08-30 01:23:44 UTC
+++ Makefile
@@ -115,7 +115,11 @@ qt/po/repo:
 	$(MAKE) pull-i18n
 
 .PHONY: build
-build: clean-dist build-ts build-rspy build-pylib build-qt add-buildhash
+build:
+	@set -eu -o pipefail ${SHELLFLAGS}; \
+	for dir in $(DEVEL); do \
+		$(SUBMAKE) -C $$dir build BUILDFLAGS="$(BUILDFLAGS)"; \
+	done
 	@echo
 	@echo "Build complete."
 
